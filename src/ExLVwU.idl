//////////////////////////////////////////////////////////////////////
/// \mainpage ExplorerListView Documentation
///
/// \section intro_sec Introduction
///
/// %ExplorerListView is an ActiveX control that may be used as a common listview as well as for
/// shell-browsing. It is optimized for Visual Basic 6.0, but should also work in any other environment
/// that supports COM controls.
///
/// \section basics_sec Basics
///
/// The control superclasses the listview listview window class of Windows: \c SysListView32. Although I
/// tried to wrap all features of this window class (status: Windows 10), some things may be missing.
/// In these cases you usually may use the Win32 API and handle the control as a native listview window.
/// One of my goals was it to create a listview control that may be controlled via API as well as via the
/// classes that I implemented.\n
/// The control's contained edit and header controls are native edit respectively \c SysHeader32 windows
/// of Microsoft Windows and may be controlled via API, too.
///
/// \subsection basics_conv_sec Conventions
///
/// By "contained edit control" I mean the label-edit control as well as the filter-edit control.
///
/// \section reqs_sec Requirements
///
/// %ExplorerListView Unicode runs on the following operating systems:
/// - Windows XP (SP3 or later)
/// - Windows Server 2003 (SP2 or later)
/// - Windows Vista (SP2 or later)
/// - Windows Server 2008 (SP2 or later)
/// - Windows 7 (SP1 or later)
/// - Windows Server 2008 R2 (SP1 or later)
/// - Windows 8
/// - Windows Server 2012
/// - Windows 8.1
/// - Windows Server 2012 R2
/// - Windows 10
/// - Windows Server 2016
/// - Systems supported by Wine (Wine is a Win32 subsystem for alternative operating systems) - <strong>limited support</strong>
/// - ReactOS (a free Windows XP clone) - <strong>limited support</strong>
///
/// Some features have additional requirements which are mentioned in the affected feature's
/// documentation.\n
/// Limited support means, that I won't invest much work to support those systems. If a feature works on
/// a system tagged with "limited support" - fine; if it does not and it's easy to fix, I'll fix it, but if
/// it's difficult to fix, I probably won't fix it. Also I will test the control much less on those systems.
///
/// \section support_sec Support
///
/// Although there's no entitlement to support, you've good chances to get help if you either post
/// to the <a href="https://www.timosoft-software.de/forum/viewforum.php?f=28">forums</a> or
/// <a href="mailto:Timo@TimoSoft-Software.de">send me a mail</a>.\n
/// Bugs and feature requests should be entered into the <a href="https://bugtracker.timosoft-software.de">bug tracking system</a>.
///
/// \section lic_sec License
///
/// <pre>
///      MIT License
///
///      Copyright (c) 2005-2018 Timo Kunze
///
///      Permission is hereby granted, free of charge, to any person obtaining a copy
///      of this software and associated documentation files (the "Software"), to deal
///      in the Software without restriction, including without limitation the rights
///      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
///      copies of the Software, and to permit persons to whom the Software is
///      furnished to do so, subject to the following conditions:
///
///      The above copyright notice and this permission notice shall be included in all
///      copies or substantial portions of the Software.
///
///      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
///      SOFTWARE.
/// </pre>
///
/// \section acks_sec Acknowledgements
///
/// Thanks go to:
/// - <a href="https://www.winehq.com">Wine Headquarters</a>, because Wine helped me a lot on
///   understanding how Windows is working.
/// - Microsoft, for ATL, WTL and Visual Studio - great libraries and a great IDE
/// - <a href="https://www.geoffchappell.com">Geoff Chappell</a>, for his website about undocumented Win32
///   API stuff.
/// - Igor Tandetnik, for his great help on learning ATL and WTL
/// - Dimitri van Heesch, for Doxygen
/// - <a href="http://www.zabkat.com/">Nikos Bozinis</a>, for his awesome help with the Vista drag'n'drop
///   stuff.
/// - <a href="https://www.dateicommander.de">Christian LÃ¼tgens</a>, for his great work as beta-tester
///   and for his help when I needed a 2nd opinion on some decisions.
/// - All donators
/// - For great music: Heaven Shall Burn, Arch Enemy, Machine Head, Trivium, Deadlock, Draconian, Soulfly,
///   Delain, Lacuna Coil, Ensiferum, Epica, Sirenia, Tristania, Nightwish, Battlelore, Amon Amarth, Volbeat,
///   Guns N' Roses
///
/// \section faq_sec FAQ
///
/// <strong>1. Why is the \c Font property ignored?</strong>\n
/// It isn't. My controls have a property \c UseSystemFont which defaults to \c True. This property tells
/// the control to use the system font rather than the font set by the \c Font property.\n
/// Why is this property's default \c True? Well, if I set system wide settings (like fonts) I expect all
/// applications to follow them. Unfortunately ignoring system wide settings seems to be trendy, so see
/// my decision as an educational measure.
///
/// <strong>2. Why is event xyz not fired?</strong>\n
/// Firing an event is relative time-consuming, even if the event isn't handled by the application at all.
/// Therefore I implemented a \c DisabledEvents property which can be used to deactivate certain events.\n
/// By default many events are deactivated.
///
/// <strong>3. Why can't I compare \c %ListViewItem objects using VB's \c Is operator?</strong>\n
/// The \c Is operator compares the objects by there memory address. To keep memory usage low and to
/// ease internal item management, %ExplorerListView creates objects, that wrap items or item
/// collections, on the fly. Therefore you'll get different objects (with different addresses) for the
/// same item. Because of the different addresses the \c Is operator handles the items as different
/// ones.\n
/// To compare items, you should use the items' indexes or IDs.
///
/// <strong>4. The control doesn't seem to have full Unicode support if it is used in Visual Basic 6. Why?</strong>\n
/// The forms, that Visual Basic 6 is creating, are ANSI windows. Therefore they force the control's
/// underlying native listview window class to use ANSI messages when communicating with the form. This
/// breaks Unicode support in some situations. To work around this problem, the \c WM_NOTIFYFORMAT message
/// must be reflected back to the control.\n
/// In Visual Basic, you must subclass the control's container window and send \c WM_NOTIFYFORMAT back to
/// the window that it was sent for. In C++, message reflection works similar. The sample projects teach
/// you how to reflect the message.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// \namespace ExLVwLibU
/// \brief <em>Contains COM definitions for the control's public interface</em>
///
/// This is the Unicode version of the ExplorerListView COM library.
//////////////////////////////////////////////////////////////////////


#include "olectl.h"
#include "CompilerFlags.h"
#include "DispIDs.h"

#ifndef DOXYGEN_SHOULD_SKIP_THIS
	// interface is not automation marshaling conformant, requires Windows NT 4.0 SP4 or greater
	midl_pragma warning(disable: 2039)
	// identifier length exceeds 31 characters
	midl_pragma warning(disable: 2111)
	// too many methods in the interface, requires Windows NT 4.0 SP3 or greater
	midl_pragma warning(disable: 2362)
#endif

import "oaidl.idl";
import "ocidl.idl";


[
	uuid(9FC6639B-4237-4fb5-93B8-24049D39DF74),
	version(1.7),
	helpstring("TimoSoft ExplorerListView 1.7 (Unicode)")
]
library ExLVwLibU
{
	importlib("stdole2.tlb");

	interface IListViewItem;
	interface IListViewItems;


	/// \brief <em>Constants used with the \c Alignment properties</em>
	///
	/// \sa IListViewColumn::Alignment, IVirtualListViewColumn::Alignment,
	///     IListViewGroup::Alignment, IVirtualListViewGroup::Alignment,
	///     IExplorerListView::EmptyMarkupTextAlignment
	[helpstring("Constants used with the 'Alignment' properties.")]
	typedef enum AlignmentConstants {
		/// \brief The text is left-aligned
		[helpstring("The text is left-aligned.")]
		alLeft,
		/// \brief The text is centered
		[helpstring("The text is centered.")]
		alCenter,
		/// \brief The text is right-aligned
		[helpstring("The text is right-aligned.")]
		alRight
	} AlignmentConstants;

	/// \brief <em>Constants used with the \c Appearance property</em>
	///
	/// \sa IExplorerListView::Appearance
	[helpstring("Constants used with the 'Appearance' property.")]
	typedef enum AppearanceConstants {
		/// \brief The control is drawn with a flat border
		[helpstring("The control is drawn flat.")]
		a2D,
		/// \brief The control is drawn with a normal 3D border
		[helpstring("The control is drawn with a normal 3D border.")]
		a3D,
		/// \brief The control is drawn with a light 3D border
		[helpstring("The control is drawn with a light 3D border.")]
		a3DLight
	} AppearanceConstants;

	/// \brief <em>Constants used with the \c ArrangeItems method</em>
	///
	/// \sa IExplorerListView::ArrangeItems
	[helpstring("Constants used with the 'ArrangeItems' method.")]
	typedef enum ArrangementStyleConstants {
		/// \brief Aligns items according to the control's current alignment style
		///
		/// \sa IExplorerListView::ItemAlignment
		[helpstring("Aligns items according to the control's current alignment style.")]
		astDefault = 0x0 /*LVA_DEFAULT*/,
		/// \brief Left-aligns items
		///
		/// \remarks Current versions of Windows seem to handle this flag like \c astDefault.
		[helpstring("Left-aligns items. Current versions of Windows seem to handle this flag like 'astDefault'.")]
		astAlignLeft = 0x1 /*LVA_ALIGNLEFT*/,
		/// \brief Top-aligns items
		///
		/// \remarks Current versions of Windows seem to handle this flag like \c astDefault.
		[helpstring("Top-aligns items. Current versions of Windows seem to handle this flag like 'astDefault'.")]
		astAlignTop = 0x2 /*LVA_ALIGNTOP*/,
		#ifdef _DEBUG
			/// \brief Bottom-aligns items
			///
			/// \remarks Current versions of Windows seem to handle this flag like \c astDefault.
			[helpstring("Bottom-aligns items. Current versions of Windows seem to handle this flag like 'astDefault'.")]
			astAlignBottom = 0x3,
			/// \brief Right-aligns items
			///
			/// \remarks Current versions of Windows seem to handle this flag like \c astDefault.
			[helpstring("Right-aligns items. Current versions of Windows seem to handle this flag like 'astDefault'.")]
			astAlignRight = 0x4,
		#endif
		/// \brief Snaps all icons to the nearest grid position
		///
		/// \sa IExplorerListView::SnapToGrid
		[helpstring("Snaps all icons to the nearest grid position.")]
		astSnapToGrid = 0x5 /*LVA_SNAPTOGRID*/
	} ArrangementStyleConstants;

	/// \brief <em>Constants used with the \c AutoArrangeItems property</em>
	///
	/// \sa IExplorerListView::AutoArrangeItems
	[helpstring("Constants used with the 'AutoArrangeItems' property.")]
	typedef enum AutoArrangeItemsConstants {
		/// \brief Items do not get auto-arranged
		///
		/// \remarks This value cannot be used if groups are activated.
		///
		/// \sa IExplorerListView::ShowGroups
		[helpstring("Items do not get auto-arranged. This value cannot be used if groups are activated.")]
		aaiNone,
		/// \brief Items always get auto-arranged
		[helpstring("Items always get auto-arranged.")]
		aaiNormal,
		/// \brief Items get auto-arranged only if no item's position has been set explicitly
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("Items get auto-arranged only if no item's position has been set explicitly. Requires comctl32.dll version 6.10 or higher.")]
		aaiIntelligent
	} AutoArrangeItemsConstants;

	/// \brief <em>Constants used with the \c IListViewColumn::Width property</em>
	///
	/// \sa IListViewColumn::Width
	[helpstring("Constants used with the 'ListViewColumn.Width' property.")]
	typedef enum AutoSizeConstants {
		/// \brief The column's width is adjusted so that the column's content doesn't get truncated
		[helpstring("The column's width is adjusted so that the column's content doesn't get truncated.")]
		asContent = -1 /*LVSCW_AUTOSIZE*/,
		/// \brief The column's width is adjusted so that neither the column's caption nor its content get truncated
		///
		/// \remarks If you set the last column's width to \c asCaptionAndContent, its new size will be at
		///          least the remaining width of the control.
		[helpstring("The column's width is adjusted so that neither the column's caption nor its content get truncated.")]
		asCaptionAndContent = -2 /*LVSCW_AUTOSIZE_USEHEADER*/
	} AutoSizeConstants;

	/// \brief <em>Constants used with the \c BackgroundDrawMode property</em>
	///
	/// \sa IExplorerListView::BackgroundDrawMode
	[helpstring("Constants used with the 'BackgroundDrawMode' property.")]
	typedef enum BackgroundDrawModeConstants {
		/// \brief The control's background is painted by the control itself
		[helpstring("The control's background is painted by the control itself.")]
		bdmNormal,
		/// \brief The control's background is painted by the control's parent window
		///
		/// The control's background is painted by the control's parent window, which receives a
		/// \c WM_PRINTCLIENT message if the background must be drawn.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa bdmByParentWithShadowText,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms534913.aspx">WM_PRINTCLIENT</a>
		[helpstring("The control's background is painted by its parent window, which receives a 'WM_PRINTCLIENT' message if the background must be drawn. Requires comctl32.dll version 6.10 or higher.")]
		bdmByParent,
		/// \brief The control's background is painted by the control's parent window and text is drawn with a shadow
		///
		/// The control's background is painted by the control's parent window, which receives a
		/// \c WM_PRINTCLIENT message if the background must be drawn. In 'Icons' and 'Small Icons' view the
		/// items' text is drawn with a shadow.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa bdmByParent, 
		///     <a href="https://msdn.microsoft.com/en-us/library/ms534913.aspx">WM_PRINTCLIENT</a>
		[helpstring("The control's background is painted by its parent window, which receives a 'WM_PRINTCLIENT' message if the background must be drawn. In 'Icons' and 'Small Icons' view the items' text is drawn with a shadow. Requires comctl32.dll version 6.10 or higher.")]
		bdmByParentWithShadowText
	} BackgroundDrawModeConstants;

	/// \brief <em>Constants used with the \c BkImageStyle property</em>
	///
	/// \sa IExplorerListView::BkImageStyle
	[helpstring("Constants used with the 'BkImageStyle' property.")]
	typedef enum BkImageStyleConstants {
		/// \brief The background image is drawn at the specified position
		///
		/// The background image is drawn at the relative position specified by the \c BkImagePositionX and
		/// \c BkImagePositionY properties.
		///
		/// \sa IExplorerListView::BkImagePositionX, IExplorerListView::BkImagePositionY
		[helpstring("The background image is drawn at the position specified by the 'BkImagePositionX' and 'BkImagePositionY' properties.")]
		bisNormal,
		/// \brief The background image is drawn tiled
		///
		/// The background image is drawn tiled so it fills the control's whole client area.
		///
		/// \remarks Use the \c AbsoluteBkImagePosition property to customize this style.
		///
		/// \sa IExplorerListView::AbsoluteBkImagePosition
		[helpstring("The background image is drawn tiled so it fills the control's whole client area.")]
		bisTiled,
		/// \brief The background image is drawn as a watermark
		///
		/// The background image is drawn at the control's bottom-right corner and isn't scrolled with the
		/// control's content.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This value can't be used if the \c BkImage property is set to an URL.
		///
		/// \sa IExplorerListView::BkImage
		[helpstring("The background image is drawn at the control's bottom-right corner and isn't scrolled with the control's content. Requires comctl32.dll version 6.0 or higher.")]
		bisWatermark
	} BkImageStyleConstants;

	/// \brief <em>Constants used with the \c BorderStyle property</em>
	///
	/// \sa IExplorerListView::BorderStyle
	[helpstring("Constants used with the 'BorderStyle' property.")]
	typedef enum BorderStyleConstants {
		/// \brief The control is drawn without an inner border
		[helpstring("The control is drawn without an additional border.")]
		bsNone,
		/// \brief The control is drawn with an inner border
		[helpstring("The control is drawn with an additional border.")]
		bsFixedSingle
	} BorderStyleConstants;

	/// \brief <em>Flags used with the \c CallBackMask property</em>
	///
	/// \sa IExplorerListView::CallBackMask
	[helpstring("Flags used with the 'CallBackMask' property. They can be combined.")]
	typedef enum CallBackMaskConstants {
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::Caret property
		///
		/// \sa IListViewItem::Caret
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.Caret' property.")]
		cbmCaret = 0x0001/*LVIS_FOCUSED*/,
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::Selected property
		///
		/// \sa IListViewItem::Selected
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.Selected' property.")]
		cbmSelected = 0x0002/*LVIS_SELECTED*/,
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::Ghosted property
		///
		/// \sa IListViewItem::Ghosted, IListViewSubItem::Ghosted
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.Ghosted' and 'ListViewSubItem.Ghosted' properties.")]
		cbmGhosted = 0x0004/*LVIS_CUT*/,
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::DropHilited property
		///
		/// \sa IListViewItem::DropHilited
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.DropHilited' property.")]
		cbmDropHilited = 0x0008/*LVIS_DROPHILITED*/,
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::Glowing property
		///
		/// \sa IListViewItem::Glowing, IListViewSubItem::Glowing
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.Glowing' and 'ListViewSubItem.Glowing' properties.")]
		cbmGlowing = 0x0010/*LVIS_GLOW*/,
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::Activating property
		///
		/// \sa IListViewItem::Activating, IListViewSubItem::Activating
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.Activating' and 'ListViewSubItem.Activating' properties.")]
		cbmActivating = 0x0020/*LVIS_ACTIVATING*/,
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::OverlayIndex property
		///
		/// \sa IListViewItem::OverlayIndex, IListViewSubItem::OverlayIndex
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.OverlayIndex' and 'ListViewSubItem.OverlayIndex' properties.")]
		cbmOverlayIndex = 0x0F00/*LVIS_OVERLAYMASK*/,
		/// \brief The \c _IExplorerListViewEvents::ItemGetDisplayInfo event will be fired for the \c IListViewItem::StateImageIndex property
		///
		/// \sa IListViewItem::StateImageIndex, IListViewSubItem::StateImageIndex
		[helpstring("The 'ItemGetDisplayInfo' event will be fired for the 'ListViewItem.StateImageIndex' and 'ListViewSubItem.StateImageIndex' properties.")]
		cbmStateImageIndex = 0xF000/*LVIS_STATEIMAGEMASK*/
	} CallBackMaskConstants;

	/// \brief <em>Constants used with the \c ColumnHeaderVisibility property</em>
	///
	/// \sa IExplorerListView::ColumnHeaderVisibility
	[helpstring("Constants used with the 'ColumnHeaderVisibility' property.")]
	typedef enum ColumnHeaderVisibilityConstants {
		/// \brief The column headers are never displayed
		[helpstring("The column headers are never displayed.")]
		chvInvisible,
		/// \brief The column headers are displayed in 'Details' view only
		///
		/// \sa IExplorerListView::View
		[helpstring("The column headers are displayed in 'Details' view only.")]
		chvVisibleInDetailsView,
		/// \brief The column headers are displayed in all views
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IExplorerListView::View
		[helpstring("The column headers are displayed in all views. Requires comctl32.dll version 6.10 or higher.")]
		chvVisibleInAllViews
	} ColumnHeaderVisibilityConstants;

	/// \brief <em>Constants used to identify columns within an \c IListViewColumns collection</em>
	///
	/// \remarks These constants are also used to identify sub-items within an \c IListViewSubItems
	///          collection.
	///
	/// \sa IListViewColumns, IListViewSubItems
	[helpstring("Constants used to identify columns within a 'ListViewColumns' collection.")]
	typedef enum ColumnIdentifierTypeConstants {
		/// \brief The column is identified by a zero-based index
		///
		/// Reordering the columns won't change a column's index, but removing or adding new columns may
		/// do so.
		///
		/// \remarks This is the preferred and fastest method to identify a column.
		///
		/// \sa IListViewColumn::Index, IListViewSubItem::Index
		[helpstring("The column is identified by a zero-based index.")]
		citIndex,
		/// \brief The column is identified by a zero-based position index
		///
		/// The left-most column has position 0, the next one to the right has position 1 and so on.
		/// Reordering the columns will change a column's position index as well as removing columns or
		/// adding new ones.
		///
		/// \sa IListViewColumn::Position
		[helpstring("The column is identified by a zero-based index, which matches its current position.")]
		citPosition,
		/// \brief The column is identified by an unique ID
		///
		/// A column's ID will never change.
		///
		/// \sa IListViewColumn::ID
		[helpstring("The column is identified by an unique ID.")]
		citID
	} ColumnIdentifierTypeConstants;

	/// \brief <em>Constants used with the \c CompareGroups and \c CompareItems events</em>
	///
	/// \sa _IExplorerListViewEvents::CompareGroups, _IExplorerListViewEvents::CompareItems
	[helpstring("Constants used with the 'CompareGroups' and 'CompareItems' events.")]
	typedef enum CompareResultConstants {
		/// \brief The first group or item should precede the second
		[helpstring("The first group or item should precede the second.")]
		crFirstSecond = -1,
		/// \brief The two groups or items are equivalent
		[helpstring("The two groups or items are equivalent.")]
		crEqual = 0,
		/// \brief The first group or item should follow the second
		[helpstring("The first group or item should follow the second.")]
		crSecondFirst = 1
	} CompareResultConstants;

	/// \brief <em>Constants used to identify item states during custom draw</em>
	///
	/// \sa CustomDrawStageConstants, CustomDrawReturnValuesConstants,
	///     _IExplorerListViewEvents::CustomDraw, _IExplorerListViewEvents::GroupCustomDraw,
	///     _IExplorerListViewEvents::HeaderCustomDraw, OwnerDrawItemStateConstants
	[helpstring("Constants used to identify item states during custom draw.")]
	typedef enum CustomDrawItemStateConstants {
		/// \brief The item or column header is selected
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview groups.
		[helpstring("The item or column header is selected. Current versions of Windows probably do not use this flag for listview groups.")]
		cdisSelected = 0x1 /*CDIS_SELECTED*/,
		/// \brief The item is grayed
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview groups and
		///          header controls.
		[helpstring("The item is grayed. Current versions of Windows probably do not use this flag for listview groups and header controls.")]
		cdisGrayed = 0x2 /*CDIS_GRAYED*/,
		/// \brief The item is disabled
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview groups and
		///          header controls.
		[helpstring("The item is disabled. Current versions of Windows probably do not use this flag for listview groups and header controls.")]
		cdisDisabled = 0x4 /*CDIS_DISABLED*/,
		/// \brief The item is checked
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview and header
		///          controls.
		[helpstring("The item is checked. Current versions of Windows probably do not use this flag for listview and header controls.")]
		cdisChecked = 0x8 /*CDIS_CHECKED*/,
		/// \brief The item or group has the keyboard focus
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview groups and
		///          header controls.
		[helpstring("The item or group has the keyboard focus. Current versions of Windows probably do not use this flag for listview groups and header controls.")]
		cdisFocus = 0x10 /*CDIS_FOCUS*/,
		/// \brief The item is in its default state
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview groups and
		///          header controls.
		[helpstring("The item is in its default state. Current versions of Windows probably do not use this flag for listview groups and header controls.")]
		cdisDefault = 0x20 /*CDIS_DEFAULT*/,
		/// \brief The item is currently under the mouse cursor
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview groups and
		///          header controls.
		///
		/// \sa IExplorerListView::HotTracking
		[helpstring("The item is hot, i. e. it's currently under the mouse cursor. Current versions of Windows probably do not use this flag for listview groups and header controls.")]
		cdisHot = 0x40 /*CDIS_HOT*/,
		/// \brief The item is marked
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview groups and
		///          header controls.
		[helpstring("The item is marked. Current versions of Windows probably do not use this flag for listview groups and header controls.")]
		cdisMarked = 0x80 /*CDIS_MARKED*/,
		/// \brief The item is in an indeterminate state
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview and header
		///          controls.
		[helpstring("The item is in an indeterminate state. Current versions of Windows probably do not use this flag for listview and header controls.")]
		cdisIndeterminate = 0x100 /*CDIS_INDETERMINATE*/,
		/// \brief The item is a keyboard cue
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          Current versions of Windows probably do not use this flag for listview groups and
		///          header controls.
		[helpstring("The item is a keyboard cue. Requires comctl32.dll version 6.0 or higher. Current versions of Windows probably do not use this flag for listview groups and header controls.")]
		cdisShowKeyboardCues = 0x200 /*CDIS_SHOWKEYBOARDCUES*/
	} CustomDrawItemStateConstants;

	/// \brief <em>Flags used to control further custom draw processing</em>
	///
	/// \sa CustomDrawItemStateConstants, CustomDrawStageConstants, _IExplorerListViewEvents::CustomDraw,
	///     _IExplorerListViewEvents::GroupCustomDraw, _IExplorerListViewEvents::HeaderCustomDraw
	[helpstring("Flags used to control further custom draw processing. They can be combined.")]
	typedef enum CustomDrawReturnValuesConstants {
		/// \brief Don't use custom draw
		///
		/// Advises the control or contained header control to draw itself and to not raise any further custom
		/// draw events during the current paint cycle.
		///
		/// \usedin All custom draw samples
		[helpstring("Default processing will take place.")]
		cdrvDoDefault = 0x0 /*CDRF_DODEFAULT*/,
		/// \brief Use different font and colors
		///
		/// Advises the control or contained header control to draw the item, group or column header using
		/// the specified font and colors.
		///
		/// \usedin The "Fonts and Colors" sample
		///
		/// \remarks If you're customizing the text color of a group, you don't need to set this flag.\n
		///          This flag is valid if the custom draw stage equals \c cdsItemPrePaint.
		[helpstring("Default processing will take place using the specified font and colors.")]
		cdrvNewFont = 0x2 /*CDRF_NEWFONT*/,
		/// \brief Don't draw the item
		///
		/// Advises the control or contained header control to not draw the item, group or column header. Use
		/// this to draw the element entirely yourself.
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsItemPrePaint.
		[helpstring("The control or contained header control won't draw the item, group or column header.")]
		cdrvSkipDefault = 0x4 /*CDRF_SKIPDEFAULT*/,
		/// \brief Fire the custom draw event after drawing took place
		///
		/// Advises the control or contained header control to fire the custom draw event after drawing took
		/// place.
		///
		/// \usedin The "Progress Bars" sample
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.
		[helpstring("Fire the custom draw event after drawing took place.")]
		cdrvNotifyPostPaint = 0x10 /*CDRF_NOTIFYPOSTPAINT*/,
		/// \brief Fire the custom draw event for item or column header related drawing operations
		///
		/// \usedin The "Fonts and Colors" sample
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.\n
		///          This flag is not valid for listview groups.
		[helpstring("Fire the custom draw event for item or column header related drawing operations. This flag is not valid for listview groups.")]
		cdrvNotifyItemDraw = 0x20 /*CDRF_NOTIFYITEMDRAW*/,
		/// \brief Fire the custom draw event for sub-item related drawing operations
		///
		/// \usedin The "Fonts and Colors" sample
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsItemPrePaint.\n
		///          This flag is not valid for listview groups and header controls.
		[helpstring("Fire the custom draw event for sub-item related drawing operations. This flag is not valid for listview groups and header controls.")]
		cdrvNotifySubItemDraw = 0x20 /*CDRF_NOTIFYSUBITEMDRAW*/,
		/// \brief Fire the custom draw event after erasing took place
		///
		/// Advises the control or contained header control to fire the custom draw event after erasing took
		/// place.
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.\n
		///          This flag is not valid for listview groups.
		[helpstring("Fire the custom draw event after erasing took place. This flag is not valid for listview groups.")]
		cdrvNotifyPostErase = 0x40 /*CDRF_NOTIFYPOSTERASE*/,
		/// \brief Fire the custom draw event for item or column header related erasing operations
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.\n
		///          This flag is not valid for listview groups.
		[helpstring("Fire the custom draw event for item or column header related erasing operations. This flag is not valid for listview groups.")]
		cdrvNotifyItemErase = 0x80 /*CDRF_NOTIFYITEMERASE*/,
		/// \brief Don't draw the item's caption as selected in 'Tiles' and 'Extended Tiles' view
		///
		/// Advises the control to not draw the specified listview item's caption as selected if the control
		/// is in 'Tiles' and 'Extended Tiles' view.
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsItemPrePaint.\n
		///          Requires comctl32.dll version 6.0 or higher.
		[helpstring("Don't draw the item's caption as selected in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		cdrvNoSelection = 0x10000 /*LVCDRF_NOSELECT*/,
		/// \brief Don't draw the group's frame
		///
		/// Advises the control to not draw the specified listview group's frame. Usually, the group frame is
		/// drawn underneath the group's header text.
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.\n
		///          Requires comctl32.dll version 6.0 or higher.
		[helpstring("Don't draw the group's frame. Requires comctl32.dll version 6.0 or higher.")]
		cdrvNoGroupFrame = 0x20000 /*LVCDRF_NOGROUPFRAME*/
	} CustomDrawReturnValuesConstants;

	/// \brief <em>Constants used to identify custom draw stages</em>
	///
	/// \sa CustomDrawItemStateConstants, CustomDrawReturnValuesConstants,
	///     _IExplorerListViewEvents::CustomDraw, _IExplorerListViewEvents::GroupCustomDraw,
	///     _IExplorerListViewEvents::HeaderCustomDraw
	[helpstring("Constants used to identify custom draw stages.")]
	typedef enum CustomDrawStageConstants {
		/// \brief Before the painting cycle begins
		///
		/// \usedin The "Fonts and Colors" sample
		[helpstring("Before the painting cycle begins.")]
		cdsPrePaint = 0x1 /*CDDS_PREPAINT*/,
		/// \brief After the painting cycle is complete
		///
		/// \usedin The "Collapsible Groups" sample
		[helpstring("After the painting cycle is complete.")]
		cdsPostPaint = 0x2 /*CDDS_POSTPAINT*/,
		/// \brief Before the erasing cycle begins
		///
		/// \remarks This flag is not valid for listview groups.
		[helpstring("Before the erasing cycle begins. This flag is not valid for listview groups.")]
		cdsPreErase = 0x3 /*CDDS_PREERASE*/,
		/// \brief After the erasing cycle is complete
		///
		/// \remarks This flag is not valid for listview groups.
		[helpstring("After the erasing cycle is complete. This flag is not valid for listview groups.")]
		cdsPostErase = 0x4 /*CDDS_POSTERASE*/,
		/// \brief The event affects a single item or column header only and not the whole control or contained header control
		///
		/// \remarks This flag is not valid for listview groups.
		[helpstring("The event affects a single item or column header only and not the whole control or contained header control. This flag is not valid for listview groups.")]
		cdsItem = 0x10000 /*CDDS_ITEM*/,
		/// \brief Before an item or column header is drawn
		///
		/// \usedin The "Fonts and Colors" sample
		///
		/// \remarks This flag is not valid for listview groups.
		[helpstring("Before an item or column header is drawn. This flag is not valid for listview groups.")]
		cdsItemPrePaint = cdsItem | cdsPrePaint /*CDDS_ITEMPREPAINT*/,
		/// \brief After an item or column header has been drawn
		///
		/// \remarks This flag is not valid for listview groups.
		[helpstring("After an item or column header has been drawn. This flag is not valid for listview groups.")]
		cdsItemPostPaint = cdsItem | cdsPostPaint /*CDDS_ITEMPOSTPAINT*/,
		/// \brief Before an item or column header is erased
		///
		/// \remarks This flag is not valid for listview groups.
		[helpstring("Before an item or column header is erased. This flag is not valid for listview groups.")]
		cdsItemPreErase = cdsItem | cdsPreErase /*CDDS_ITEMPREERASE*/,
		/// \brief After an item or column header has been erased
		///
		/// \remarks This flag is not valid for listview groups.
		[helpstring("After an item or column header has been erased. This flag is not valid for listview groups.")]
		cdsItemPostErase = cdsItem | cdsPostErase /*CDDS_ITEMPOSTERASE*/,
		/// \brief The event affects a single sub-item only and not the whole item
		///
		/// \remarks This flag is not valid for listview groups and header controls.
		[helpstring("The event affects a single sub-item only and not the whole item. This flag is not valid for listview groups and header controls.")]
		cdsSubItem = 0x20000 /*CDDS_SUBITEM*/,
		/// \brief Before a sub-item is drawn
		///
		/// \usedin The "Fonts and Colors" sample
		///
		/// \remarks This flag is not valid for listview groups and header controls.
		[helpstring("Before a sub-item is drawn. This flag is not valid for listview groups and header controls.")]
		cdsSubItemPrePaint = cdsSubItem | cdsItemPrePaint /*CDDS_SUBITEM | CDDS_ITEMPREPAINT*/,
		/// \brief After a sub-item has been drawn
		///
		/// \usedin The "Progress Bars" sample
		///
		/// \remarks This flag is not valid for listview groups and header controls.
		[helpstring("After a sub-item has been drawn. This flag is not valid for listview groups and header controls.")]
		cdsSubItemPostPaint = cdsSubItem | cdsItemPostPaint /*CDDS_SUBITEM | CDDS_ITEMPOSTPAINT*/
	} CustomDrawStageConstants;

	/// \brief <em>Flags used with the \c DisabledEvents property</em>
	///
	/// \sa IExplorerListView::DisabledEvents
	[helpstring("Flags used with the 'DisabledEvents' property. They can be combined.")]
	typedef enum DisabledEventsConstants {
		/// \brief Mouse events concerning the control itself (not the contained edit or header control) won't be fired
		///
		/// The following events won't be fired: \c MouseDown, \c MouseUp, \c MClick, \c XClick, \c MouseEnter,
		/// \c MouseHover, \c MouseLeave, \c MouseMove, \c MouseWheel, \c ItemMouseEnter, \c ItemMouseLeave,
		/// \c SubItemMouseEnter, \c SubItemMouseLeave
		///
		/// \attention Because the MouseDown and MouseUp events are required to provide the MClick event,
		///            it won't be fired anymore, too.
		///
		/// \sa _IExplorerListViewEvents::MouseDown, _IExplorerListViewEvents::MouseUp,
		///     _IExplorerListViewEvents::MClick, _IExplorerListViewEvents::XClick,
		///     _IExplorerListViewEvents::MouseEnter, _IExplorerListViewEvents::MouseHover,
		///     _IExplorerListViewEvents::MouseLeave, _IExplorerListViewEvents::MouseMove,
		///     _IExplorerListViewEvents::MouseWheel, _IExplorerListViewEvents::ItemMouseEnter,
		///     _IExplorerListViewEvents::ItemMouseLeave, _IExplorerListViewEvents::SubItemMouseEnter,
		///     _IExplorerListViewEvents::SubItemMouseLeave
		[helpstring("Disables the following events: MouseDown, MouseUp, MClick, XClick, MouseEnter, MouseHover, MouseLeave, MouseMove, MouseWheel, ItemMouseEnter, ItemMouseLeave, SubItemMouseEnter, SubItemMouseLeave")]
		deListMouseEvents = 0x01,
		/// \brief Click events concerning the control itself (not the contained edit or header control) won't be fired
		///
		/// The following events won't be fired: \c Click, \c DblClick, \c MClick, \c MDblClick,
		/// \c RClick, \c RDblClick, \c XClick, \c XDblClick
		///
		/// \sa _IExplorerListViewEvents::Click, _IExplorerListViewEvents::DblClick,
		///     _IExplorerListViewEvents::MClick, _IExplorerListViewEvents::MDblClick,
		///     _IExplorerListViewEvents::RClick, _IExplorerListViewEvents::RDblClick,
		///     _IExplorerListViewEvents::XClick, _IExplorerListViewEvents::XDblClick
		[helpstring("Disables the following events: Click, DblClick, MClick, MDblClick, RClick, RDblClick, XClick, XDblClick")]
		deListClickEvents = 0x02,
		/// \brief Mouse events concerning the contained edit control won't be fired
		///
		/// The following events won't be fired: \c EditMouseDown, \c EditMouseUp, \c EditMouseEnter,
		/// \c EditMouseHover, \c EditMouseLeave, \c EditMouseMove, \c EditMouseWheel, \c EditClick,
		/// \c EditDblClick, \c EditMClick, \c EditMDblClick, \c EditRClick, \c EditRDblClick, \c EditXClick,
		/// \c EditXDblClick
		///
		/// \sa _IExplorerListViewEvents::EditMouseDown, _IExplorerListViewEvents::EditMouseUp,
		///     _IExplorerListViewEvents::EditMouseEnter, _IExplorerListViewEvents::EditMouseHover,
		///     _IExplorerListViewEvents::EditMouseLeave, _IExplorerListViewEvents::EditMouseMove,
		///     _IExplorerListViewEvents::EditMouseWheel,
		///     _IExplorerListViewEvents::EditClick, _IExplorerListViewEvents::EditDblClick,
		///     _IExplorerListViewEvents::EditMClick, _IExplorerListViewEvents::EditMDblClick,
		///     _IExplorerListViewEvents::EditRClick, _IExplorerListViewEvents::EditRDblClick,
		///     _IExplorerListViewEvents::EditXClick, _IExplorerListViewEvents::EditXDblClick
		[helpstring("Disables the following events: EditMouseDown, EditMouseUp, EditMouseEnter, EditMouseHover, EditMouseLeave, EditMouseMove, EditMouseWheel, EditClick, EditDblClick, EditMClick, EditMDblClick, EditRClick, EditRDblClick, EditXClick, EditXDblClick")]
		deEditMouseEvents = 0x04,
		/// \brief Keyboard events concerning the control itself (not the contained edit or header control) won't be fired
		///
		/// The following events won't be fired: \c KeyDown, \c KeyUp, \c KeyPress,
		/// \c IncrementalSearchStringChanging, \c IncrementalSearching
		///
		/// \sa _IExplorerListViewEvents::KeyDown, _IExplorerListViewEvents::KeyUp,
		///     _IExplorerListViewEvents::KeyPress,
		///     _IExplorerListViewEvents::IncrementalSearchStringChanging,
		///     _IExplorerListViewEvents::IncrementalSearching
		[helpstring("Disables the following events: KeyDown, KeyUp, KeyPress, IncrementalSearchStringChanging, IncrementalSearching")]
		deListKeyboardEvents = 0x08,
		/// \brief Keyboard events concerning the contained edit control won't be fired
		///
		/// The following events won't be fired: \c EditKeyDown, \c EditKeyUp, \c EditKeyPress
		///
		/// \sa _IExplorerListViewEvents::EditKeyDown, _IExplorerListViewEvents::EditKeyUp,
		///     _IExplorerListViewEvents::EditKeyPress
		[helpstring("Disables the following events: EditKeyDown, EditKeyUp, EditKeyPress")]
		deEditKeyboardEvents = 0x10,
		/// \brief Events concerning item-insertions won't be fired
		///
		/// The following events won't be fired: \c InsertingItem, \c InsertedItem
		///
		/// \sa _IExplorerListViewEvents::InsertingItem, _IExplorerListViewEvents::InsertedItem
		[helpstring("Disables the following events: InsertingItem, InsertedItem")]
		deItemInsertionEvents = 0x20,
		/// \brief Events concerning item-deletions won't be fired
		///
		/// The following events won't be fired: \c RemovingItem, \c RemovedItem
		///
		/// \sa _IExplorerListViewEvents::RemovingItem, _IExplorerListViewEvents::RemovedItem
		[helpstring("Disables the following events: RemovingItem, RemovedItem")]
		deItemDeletionEvents = 0x40,
		/// \brief The \c FreeItemData event won't be fired
		///
		/// The following event won't be fired: \c FreeItemData
		///
		/// \sa _IExplorerListViewEvents::FreeItemData
		[helpstring("Disables the following event: FreeItemData")]
		deFreeItemData = 0x80,
		/// \brief The \c CustomDraw and \c GroupCustomDraw events won't be fired
		///
		/// The following events won't be fired: \c CustomDraw, \c GroupCustomDraw
		///
		/// \sa _IExplorerListViewEvents::CustomDraw, _IExplorerListViewEvents::GroupCustomDraw
		[helpstring("Disables the following events: CustomDraw, GroupCustomDraw")]
		deCustomDraw = 0x100,
		/// \brief Mouse events concerning the contained header control won't be fired
		///
		/// The following events won't be fired: \c HeaderMouseDown, \c HeaderMouseUp, \c HeaderMouseEnter,
		/// \c HeaderMouseHover, \c HeaderMouseLeave, \c HeaderMouseMove, \c HeaderMouseWheel,
		/// \c ColumnMouseEnter, \c ColumnMouseLeave
		///
		/// \sa _IExplorerListViewEvents::HeaderMouseDown, _IExplorerListViewEvents::HeaderMouseUp,
		///     _IExplorerListViewEvents::HeaderMouseEnter, _IExplorerListViewEvents::HeaderMouseHover,
		///     _IExplorerListViewEvents::HeaderMouseLeave, _IExplorerListViewEvents::HeaderMouseMove,
		///     _IExplorerListViewEvents::HeaderMouseWheel, _IExplorerListViewEvents::ColumnMouseEnter,
		///     _IExplorerListViewEvents::ColumnMouseLeave,
		[helpstring("Disables the following events: HeaderMouseDown, HeaderMouseUp, HeaderMouseEnter, HeaderMouseHover, HeaderMouseLeave, HeaderMouseMove, HeaderMouseWheel, ColumnMouseEnter, ColumnMouseLeave")]
		deHeaderMouseEvents = 0x200,
		/// \brief Click events concerning the contained header control won't be fired
		///
		/// The following events won't be fired: \c HeaderClick, \c HeaderDblClick, \c HeaderMClick,
		/// \c HeaderMDblClick, \c HeaderRClick, \c HeaderRDblClick, \c HeaderXClick, \c HeaderXDblClick
		///
		/// \sa _IExplorerListViewEvents::HeaderClick, _IExplorerListViewEvents::HeaderDblClick,
		///     _IExplorerListViewEvents::HeaderMClick, _IExplorerListViewEvents::HeaderMDblClick,
		///     _IExplorerListViewEvents::HeaderRClick, _IExplorerListViewEvents::HeaderRDblClick
		[helpstring("Disables the following events: HeaderClick, HeaderDblClick, HeaderMClick, HeaderMDblClick, HeaderRClick, HeaderRDblClick, HeaderXClick, HeaderXDblClick")]
		deHeaderClickEvents = 0x400,
		/// \brief Events concerning column-insertions won't be fired
		///
		/// The following events won't be fired: \c InsertingColumn, \c InsertedColumn
		///
		/// \sa _IExplorerListViewEvents::InsertingColumn, _IExplorerListViewEvents::InsertedColumn
		[helpstring("Disables the following events: InsertingColumn, InsertedColumn")]
		deColumnInsertionEvents = 0x800,
		/// \brief Events concerning column-deletions won't be fired
		///
		/// The following events won't be fired: \c RemovingColumn, \c RemovedColumn
		///
		/// \sa _IExplorerListViewEvents::RemovingColumn, _IExplorerListViewEvents::RemovedColumn
		[helpstring("Disables the following events: RemovingColumn, RemovedColumn")]
		deColumnDeletionEvents = 0x1000,
		/// \brief The \c FreeColumnData event won't be fired
		///
		/// The following event won't be fired: \c FreeColumnData
		///
		/// \sa _IExplorerListViewEvents::FreeColumnData
		[helpstring("Disables the following event: FreeColumnData")]
		deFreeColumnData = 0x2000,
		/// \brief Events concerning group-insertions won't be fired
		///
		/// The following events won't be fired: \c InsertingGroup, \c InsertedGroup
		///
		/// \sa _IExplorerListViewEvents::InsertingGroup, _IExplorerListViewEvents::InsertedGroup
		[helpstring("Disables the following events: InsertingGroup, InsertedGroup")]
		deGroupInsertionEvents = 0x4000,
		/// \brief Events concerning group-deletions won't be fired
		///
		/// The following events won't be fired: \c RemovingGroup, \c RemovedGroup
		///
		/// \sa _IExplorerListViewEvents::RemovingGroup, _IExplorerListViewEvents::RemovedGroup
		[helpstring("Disables the following events: RemovingGroup, RemovedGroup")]
		deGroupDeletionEvents = 0x8000,
		/// \brief The \c HeaderCustomDraw event won't be fired
		///
		/// The following event won't be fired: \c HeaderCustomDraw
		///
		/// \sa _IExplorerListViewEvents::HeaderCustomDraw
		[helpstring("Disables the following event: HeaderCustomDraw")]
		deHeaderCustomDraw = 0x10000,
		/// \brief Events concerning hot item changes won't be fired
		///
		/// The following events won't be fired: \c HotItemChanging, \c HotItemChanged
		///
		/// \sa _IExplorerListViewEvents::HotItemChanging, _IExplorerListViewEvents::HotItemChanged
		[helpstring("Disables the following events: HotItemChanging, HotItemChanged")]
		deHotItemChangeEvents = 0x20000,
		/// \brief Keyboard events concerning the contained header control won't be fired
		///
		/// The following events won't be fired: \c HeaderKeyDown, \c HeaderKeyUp, \c HeaderKeyPress
		///
		/// \sa _IExplorerListViewEvents::HeaderKeyDown, _IExplorerListViewEvents::HeaderKeyUp,
		///     _IExplorerListViewEvents::HeaderKeyPress
		[helpstring("Disables the following events: HeaderKeyDown, HeaderKeyUp, HeaderKeyPress")]
		deHeaderKeyboardEvents = 0x40000,
		/// \brief The \c FreeFooterItemData event won't be fired
		///
		/// The following event won't be fired: \c FreeFooterItemData
		///
		/// \sa _IExplorerListViewEvents::FreeFooterItemData
		[helpstring("Disables the following event: FreeFooterItemData")]
		deFreeFooterItemData = 0x80000,
		/// \brief The \c GetSubItemControl event won't be fired
		///
		/// The following event won't be fired: \c GetSubItemControl
		///
		/// \sa _IExplorerListViewEvents::GetSubItemControl
		[helpstring("Disables the following event: GetSubItemControl")]
		deGetSubItemControl = 0x200000,
		/// \brief The \c ItemGetDisplayInfo event won't be fired
		///
		/// The following event won't be fired: \c ItemGetDisplayInfo. This is useful if the control is used in
		/// combination with the \c ShellListView control, because \c ShellListView will make this event being
		/// raised very often, decreasing performance of \c ExplorerListView.
		///
		/// \sa _IExplorerListViewEvents::ItemGetDisplayInfo
		[helpstring("Disables the following event: ItemGetDisplayInfo")]
		deItemGetDisplayInfo = 0x800000
	} DisabledEventsConstants;

	/// \brief <em>Constants used with the \c IOLEDataObject::GetDropDescription and IOLEDataObject::SetDropDescription methods</em>
	///
	/// \sa IOLEDataObject::GetDropDescription, IOLEDataObject::SetDropDescription
	[helpstring("Constants used with the 'OLEDataObject.GetDropDescription' and 'OLEDataObject.SetDropDescription' methods.")]
	typedef enum DropDescriptionIconConstants {
		/// \brief No drop description is displayed
		[helpstring("No drop description is displayed.")]
		ddiNone = -1/*DROPIMAGE_INVALID*/,     // should be 8 (DROPIMAGE_NOIMAGE)
		/// \brief The drop description icon that visualizes the \c odeNone drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeNone' drop effect is displayed.")]
		ddiNoDrop = 0/*DROPIMAGE_NONE*/,
		/// \brief The drop description icon that visualizes the \c odeCopy drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeCopy' drop effect is displayed.")]
		ddiCopy = 1/*DROPIMAGE_COPY*/,
		/// \brief The drop description icon that visualizes the \c odeMove drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeMove' drop effect is displayed.")]
		ddiMove = 2/*DROPIMAGE_MOVE*/,
		/// \brief The drop description icon that visualizes the \c odeLink drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeLink' drop effect is displayed.")]
		ddiLink = 4/*DROPIMAGE_LINK*/,
		/// \brief The drop description icon that visualizes a drop, which causes a metadata change, is displayed
		[helpstring("The drop description icon that visualizes a drop, which causes a metadata change, is displayed.")]
		ddiMetadataChange = 6/*DROPIMAGE_LABEL*/,
		/// \brief The drop description icon that visualizes a warning is displayed
		[helpstring("The drop description icon that visualizes a warning is displayed.")]
		ddiWarning = 7/*DROPIMAGE_WARNING*/,
		/// \brief The default drop description is displayed
		///
		/// \remarks Requires Windows 7 or newer.
		[helpstring("The default drop description is displayed. Requires Windows 7 or newer.")]
		ddiUseDefault = 8/*DROPIMAGE_NOIMAGE*/     // should be -1 (DROPIMAGE_INVALID)
	} DropDescriptionIconConstants;

	/// \brief <em>Constants used with the extended mouse button events</em>
	///
	/// \sa _IExplorerListViewEvents::MouseDown, _IExplorerListViewEvents::MouseEnter,
	///     _IExplorerListViewEvents::MouseHover, _IExplorerListViewEvents::MouseLeave,
	///     _IExplorerListViewEvents::MouseMove, _IExplorerListViewEvents::MouseUp,
	///     _IExplorerListViewEvents::ItemMouseEnter, _IExplorerListViewEvents::ItemMouseLeave,
	///     _IExplorerListViewEvents::SubItemMouseEnter, _IExplorerListViewEvents::SubItemMouseLeave,
	///     _IExplorerListViewEvents::XClick, _IExplorerListViewEvents::XDblClick,
	///     _IExplorerListViewEvents::EditMouseDown, _IExplorerListViewEvents::EditMouseEnter,
	///     _IExplorerListViewEvents::EditMouseHover, _IExplorerListViewEvents::EditMouseLeave,
	///     _IExplorerListViewEvents::EditMouseMove, _IExplorerListViewEvents::EditMouseUp,
	///     _IExplorerListViewEvents::EditXClick, _IExplorerListViewEvents::EditXDblClick,
	///     _IExplorerListViewEvents::HeaderMouseDown, _IExplorerListViewEvents::HeaderMouseEnter,
	///     _IExplorerListViewEvents::HeaderMouseHover, _IExplorerListViewEvents::HeaderMouseLeave,
	///     _IExplorerListViewEvents::HeaderMouseMove, _IExplorerListViewEvents::HeaderMouseUp,
	///     _IExplorerListViewEvents::ColumnMouseEnter, _IExplorerListViewEvents::ColumnMouseLeave,
	///     _IExplorerListViewEvents::HeaderXClick, _IExplorerListViewEvents::HeaderXDblClick
	[helpstring("Constants used with the extended mouse button events.")]
	typedef enum ExtendedMouseButtonConstants {
		/// \brief Identifies the first extended mouse button
		[helpstring("Identifies the first extended mouse button.")]
		embXButton1 = 0x20,
		/// \brief Identifies the second extended mouse button
		[helpstring("Identifies the second extended mouse button.")]
		embXButton2 = 0x40
	} ExtendedMouseButtonConstants;

	/// \brief <em>Constants used with the \c ItemAsynchronousDrawFailed and \c GroupAsynchronousDrawFailed events</em>
	///
	/// \sa _IExplorerListViewEvents::ItemAsynchronousDrawFailed,
	///     _IExplorerListViewEvents::GroupAsynchronousDrawFailed
	[helpstring("Constants used with the 'ItemAsynchronousDrawFailed' and 'GroupAsynchronousDrawFailed' events.")]
	typedef enum FailedAsyncDrawReturnValuesConstants {
		/// \brief Draw the same image with the same settings synchronously
		[helpstring("Draw the same image with the same settings synchronously.")]
		fadrvDrawImageSynchronously = 0x00000000/*ADRF_DRAWSYNC*/,
		/// \brief Don't draw an image
		[helpstring("Don't draw an image.")]
		fadrvDrawNoImage = 0x00000001/*ADRF_DRAWNOTHING*/,
		/// \brief Draw again asynchronously using the image specified by the \c newImageToDraw parameter of the event
		[helpstring("Draw again asynchronously using the image specified by the 'newImageToDraw' parameter of the event.")]
		fadrvDrawNewImageAsynchronously = 0x00000002/*ADRF_DRAWIMAGE*/
	} FailedAsyncDrawReturnValuesConstants;

	/// \brief <em>Flags used with the \c IListViewItems::Filter property</em>
	///
	/// \sa IListViewItems::Filter
	[helpstring("Flags used with the 'ListViewItems.Filter' property.")]
	typedef enum FilteredPropertyConstants {
		/// \brief Retrieve or set the filter that filters by the \c Activating property
		///
		/// \sa IListViewItem::Activating
		[helpstring("Retrieve or set the filter that filters by the 'Activating' property.")]
		fpActivating = 0,
		/// \brief Retrieve or set the filter that filters by the \c Ghosted property
		///
		/// \sa IListViewItem::Ghosted
		[helpstring("Retrieve or set the filter that filters by the 'Ghosted' property.")]
		fpGhosted = 1,
		/// \brief Retrieve or set the filter that filters by the \c Glowing property
		///
		/// \sa IListViewItem::Glowing
		[helpstring("Retrieve or set the filter that filters by the 'Glowing' property.")]
		fpGlowing = 2,
		/// \brief Retrieve or set the filter that filters by the \c Group property
		///
		/// \sa IListViewItem::Group
		[helpstring("Retrieve or set the filter that filters by the 'Group' property.")]
		fpGroup = 3,
		/// \brief Retrieve or set the filter that filters by the \c IconIndex property
		///
		/// \sa IListViewItem::IconIndex
		[helpstring("Retrieve or set the filter that filters by the 'IconIndex' property.")]
		fpIconIndex = 4,
		/// \brief Retrieve or set the filter that filters by the \c Indent property
		///
		/// \sa IListViewItem::Indent
		[helpstring("Retrieve or set the filter that filters by the 'Indent' property.")]
		fpIndent = 5,
		/// \brief Retrieve or set the filter that filters by the \c Index property
		///
		/// \sa IListViewItem::Index
		[helpstring("Retrieve or set the filter that filters by the 'Index' property.")]
		fpIndex = 6,
		/// \brief Retrieve or set the filter that filters by the \c ItemData property
		///
		/// \sa IListViewItem::ItemData
		[helpstring("Retrieve or set the filter that filters by the 'ItemData' property.")]
		fpItemData = 7,
		/// \brief Retrieve or set the filter that filters by the \c OverlayIndex property
		///
		/// \sa IListViewItem::OverlayIndex
		[helpstring("Retrieve or set the filter that filters by the 'OverlayIndex' property.")]
		fpOverlayIndex = 8,
		/// \brief Retrieve or set the filter that filters by the \c Selected property
		///
		/// \sa IListViewItem::Selected
		[helpstring("Retrieve or set the filter that filters by the 'Selected' property.")]
		fpSelected = 9,
		/// \brief Retrieve or set the filter that filters by the \c StateImageIndex property
		///
		/// \sa IListViewItem::StateImageIndex
		[helpstring("Retrieve or set the filter that filters by the 'StateImageIndex' property.")]
		fpStateImageIndex = 10,
		/// \brief Retrieve or set the filter that filters by the \c Text property
		///
		/// \sa IListViewItem::Text
		[helpstring("Retrieve or set the filter that filters by the 'Text' property.")]
		fpText = 11,
		/// \brief Retrieve or set the filter that filters by the \c TileViewColumns property
		///
		/// \sa IListViewItem::TileViewColumns
		[helpstring("Retrieve or set the filter that filters by the 'TileViewColumns' property.")]
		fpTileViewColumns = 12,
		/// \brief Retrieve or set the filter that filters by the \c WorkArea property
		///
		/// \sa IListViewItem::WorkArea
		[helpstring("Retrieve or set the filter that filters by the 'WorkArea' property.")]
		fpWorkArea = 13
	} FilteredPropertyConstants;

	/// \brief <em>Flags used with the \c IListViewItems::FilterType property</em>
	///
	/// \sa IListViewItems::FilterType
	[helpstring("Flags used with the 'ListViewItems.FilterType' property.")]
	typedef enum FilterTypeConstants {
		/// \brief The filter is deactivated
		[helpstring("The filter is deactivated.")]
		ftDeactivated,
		/// \brief An item must match this filter to be in the collection
		[helpstring("An item must match this filter to be in the collection.")]
		ftIncluding,
		/// \brief An item must not match this filter to be in the collection
		[helpstring("An item must not match this filter to be in the collection.")]
		ftExcluding
	} FilterTypeConstants;

	/// \brief <em>Constants used to identify footer items within an \c IListViewFooterItems collection</em>
	///
	/// \sa IListViewFooterItems
	[helpstring("Constants used to identify footer items within a 'ListViewFooterItems' collection.")]
	typedef enum FooterItemIdentifierTypeConstants {
		/// \brief The footer item is identified by a zero-based index
		///
		/// Removing or adding new footer items may change a footer item's index.
		///
		/// \sa IListViewFooterItem::Index
		[helpstring("The footer item is identified by a zero-based index.")]
		fiitIndex
	} FooterItemIdentifierTypeConstants;

	/// \brief <em>Constants used with the \c FullRowSelect property</em>
	///
	/// \sa IExplorerListView::FullRowSelect
	[helpstring("Constants used with the 'FullRowSelect' property.")]
	typedef enum FullRowSelectConstants {
		/// \brief Select the item text only
		[helpstring("Select the item text only.")]
		frsDisabled,
		/// \brief Select the item's entire row
		[helpstring("Select the item's entire row.")]
		frsNormalMode,
		/// \brief Select the item's entire row, but allow easy marquee selection
		///
		/// If this option is set, entire item rows are selected, but marquee (lasso) selection mode can be
		/// entered by clicking into the white space in a row.
		///
		/// \remarks This option doesn't work well with columns that display centered or right-aligned text,
		///          because the control assumes that column content always is left-aligned.\n
		///          Requires comctl32.dll version 6.10 or higher.
		[helpstring("Select the item's entire row, but allow easy marquee selection. Requires comctl32.dll version 6.10 or higher.")]
		frsExtendedMode
	} FullRowSelectConstants;

	/// \brief <em>Constants used to identify parts of a listview group</em>
	///
	/// \sa IListViewGroup::Alignment, IListViewGroup::Text
	[helpstring("Constants used to identify parts of a listview group.")]
	typedef enum GroupComponentConstants {
		/// \brief The group's header
		///
		/// Use this value to retrieve or set a property for the group's header.
		[helpstring("Retrieve or set the property for the group's header.")]
		gcHeader,
		/// \brief The group's footer
		///
		/// Use this value to retrieve or set a property for the group's footer.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("Retrieve or set the property for the group's footer. Requires comctl32.dll version 6.10 or higher.")]
		gcFooter
	} GroupComponentConstants;

	/// \brief <em>Constants used to identify groups within an \c IListViewGroups collection</em>
	///
	/// \sa IListViewGroups
	[helpstring("Constants used to identify groups within a 'ListViewGroups' collection.")]
	typedef enum GroupIdentifierTypeConstants {
		/// \brief The group is identified by an unique ID
		///
		/// A group's ID won't change except it is changed explicitly.
		///
		/// \sa IListViewGroup::ID
		[helpstring("The group is identified by an unique ID.")]
		gitID,
		/// \brief The group is identified by a zero-based position index
		///
		/// The top-most group has position 0, the next one to the bottom has position 1 and so on.
		/// Reordering the groups will change a group's position index as well as removing groups or
		/// adding new ones.
		///
		/// \sa IListViewGroup::Position
		[helpstring("The group is identified by a zero-based index, which matches its current position.")]
		gitPosition,
		/// \brief The group is identified by a zero-based index
		///
		/// Reordering the groups won't change a group's index, but removing or adding new groups may
		/// do so.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewGroup::Index
		[helpstring("The group is identified by a zero-based index. Requires comctl32.dll version 6.10 or higher.")]
		gitIndex
	} GroupIdentifierTypeConstants;

	/// \brief <em>Constants used with the \c IListViewGroup::GetRectangle method</em>
	///
	/// \sa IListViewGroup::GetRectangle
	[helpstring("Constants used with the 'ListViewGroup.GetRectangle' method.")]
	typedef enum GroupRectangleTypeConstants {
		/// \brief Retrieve the bounding rectangle of the entire (expanded) listview group
		[helpstring("Retrieve the bounding rectangle of the entire (expanded) listview group.")]
		grtEntireGroup = 0/*LVGGR_GROUP*/,
		/// \brief Retrieve the bounding rectangle of the (collapsed) listview group's header
		///
		/// \sa IListViewGroup::Collapsed
		[helpstring("Retrieve the bounding rectangle of the (collapsed) listview group's header.")]
		grtHeader = 1/*LVGGR_HEADER*/,
		/// \brief Retrieve the bounding rectangle of the listview group's label
		[helpstring("Retrieve the bounding rectangle of the listview group's label.")]
		grtLabel = 2/*LVGGR_LABEL*/,
		/// \brief Retrieve the bounding rectangle of the listview group's subset link
		[helpstring("Retrieve the bounding rectangle of the listview group's subset link.")]
		grtSubsetLink = 3/*LVGGR_SUBSETLINK*/
	} GroupRectangleTypeConstants;

	/// \brief <em>Constants used with the \c HeaderHitTest method</em>
	///
	/// \sa IExplorerListView::HeaderHitTest
	[helpstring("Flags used with the 'HeaderHitTest' method.")]
	typedef enum HeaderHitTestConstants {
		/// \brief Not over a column header
		///
		/// The specified point lies inside the header control's bounding rectangle, but is not over a column
		/// header.
		[helpstring("The specified point lies inside the header control's bounding rectangle, but is not over a column header.")]
		hhtNoItem = 0x0001 /*HHT_NOWHERE*/,
		/// \brief On the header control
		///
		/// The specified point lies inside the header control's bounding rectangle.
		[helpstring("The specified point lies inside the header control's bounding rectangle.")]
		hhtHeaderControl = 0x0002 /*HHT_ONHEADER*/,
		/// \brief On a divider
		///
		/// The specified point lies on the divider between two column headers.
		[helpstring("The specified point lies on the divider between two column headers.")]
		hhtDivider = 0x0004 /*HHT_ONDIVIDER*/,
		/// \brief On a hidden divider
		///
		/// The specified point lies on the divider between a column, whose width is 0, and another column.
		[helpstring("The specified point lies on the divider between a column, whose width is 0, and another column.")]
		hhtHiddenDivider = 0x0008 /*HHT_ONDIVOPEN*/,
		/// \brief On a column's filter area
		///
		/// The specified point lies on a column's filter area.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		[helpstring("The specified point lies on a column's filter area. Requires comctl32.dll version 5.80 or higher.")]
		hhtFilter = 0x0010 /*HHT_ONFILTER*/,
		/// \brief On a column's filter button
		///
		/// The specified point lies on a column's filter button.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		[helpstring("The specified point lies on a column's filter button. Requires comctl32.dll version 5.80 or higher.")]
		hhtFilterButton = 0x0020 /*HHT_ONFILTERBUTTON*/,
		/// \brief Above the header control's bounding rectangle
		///
		/// The specified point lies above the header control's bounding rectangle.
		[helpstring("The specified point lies above the header control's bounding rectangle.")]
		hhtAbove = 0x0100 /*HHT_ABOVE*/,
		/// \brief Below the header control's bounding rectangle
		///
		/// The specified point lies below the header control's bounding rectangle.
		[helpstring("The specified point lies below the header control's bounding rectangle.")]
		hhtBelow = 0x0200 /*HHT_BELOW*/,
		/// \brief To the right of the header control's bounding rectangle
		///
		/// The specified point lies to the right of the header control's bounding rectangle.
		[helpstring("The specified point lies to the right of the header control's bounding rectangle.")]
		hhtToRight = 0x0400 /*HHT_TORIGHT*/,
		/// \brief To the left of the header control's bounding rectangle
		///
		/// The specified point lies to the left of the header control's bounding rectangle.
		[helpstring("The specified point lies to the left of the header control's bounding rectangle.")]
		hhtToLeft = 0x0800 /*HHT_TOLEFT*/,
		/// \brief On a column header's state image
		///
		/// The specified point lies on a column header's state image.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IExplorerListView::ShowHeaderStateImages
		[helpstring("The specified point lies on a column header's state image. Requires comctl32.dll version 6.10 or higher.")]
		hhtItemStateImage = 0x1000 /*HHT_ONITEMSTATEICON*/,
		/// \brief On a column header's drop-down part
		///
		/// The specified point lies on a column header's drop-down part.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewColumn::ShowDropDownButton
		[helpstring("The specified point lies on a column header's drop-down part. Requires comctl32.dll version 6.10 or higher.")]
		hhtItemDropDownPart = 0x2000 /*HHT_ONDROPDOWN*/,
		/// \brief On the header control's chevron button
		///
		/// The specified point lies on the header control's chevron button.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IExplorerListView::ShowHeaderChevron
		[helpstring("The specified point lies on the header control's chevron button. Requires comctl32.dll version 6.10 or higher.")]
		hhtChevron = 0x4000 /*HHT_ONOVERFLOW*/
	} HeaderHitTestConstants;

	/// \brief <em>Constants used with the \c HitTest method</em>
	///
	/// \sa IExplorerListView::HitTest
	[helpstring("Flags used with the 'HitTest' method.")]
	typedef enum HitTestConstants {
		/// \brief Not over an item
		///
		/// The specified point lies inside the control's client area, but is not over an item.
		[helpstring("The specified point lies inside the control's client area, but is not over an item.")]
		htNotOverItem = 0x00000001 /*LVHT_NOWHERE*/,
		/// \brief On an item's icon
		///
		/// The specified point lies on an item's icon.
		[helpstring("The specified point lies on an item's icon.")]
		htItemIcon = 0x00000002 /*LVHT_ONITEMICON*/,
		/// \brief On an item's label
		///
		/// The specified point lies on an item's text label.
		[helpstring("The specified point lies on an item's text label.")]
		htItemLabel = 0x00000004 /*LVHT_ONITEMLABEL*/,
		/// \brief On an item
		///
		/// The specified point lies on an item's icon, state image or text label.
		[helpstring("The specified point lies on an item's icon, state image or text label.")]
		htItem = 0x00000046 /*LVHT_ONITEM*/,     // actually LVHT_ONITEM is 0x000E
		/// \brief On an item's state image
		///
		/// The specified point lies on an item's state image.
		[helpstring("The specified point lies on an item's state image.")]
		htItemStateImage = 0x00000040 /*LVHT_ONITEMSTATEICON*/,     // actually LVHT_ONITEMSTATEICON is 0x0008
		/// \brief Above the control's client area
		///
		/// The specified point lies above the control's client area.
		[helpstring("The specified point lies above the control's client area.")]
		htAbove = 0x00000100 /*LVHT_ABOVE*/,     // actually LVHT_ABOVE is 0x0008
		/// \brief Below the control's client area
		///
		/// The specified point lies below the control's client area.
		[helpstring("The specified point lies below the control's client area.")]
		htBelow = 0x00000200 /*LVHT_BELOW*/,     // actually LVHT_BELOW is 0x0010
		/// \brief To the right of the control's client area
		///
		/// The specified point lies to the right of the control's client area.
		[helpstring("The specified point lies to the right of the control's client area.")]
		htToRight = 0x00000400 /*LVHT_TORIGHT*/,     // actually LVHT_TORIGHT is 0x0020
		/// \brief To the left of the control's client area
		///
		/// The specified point lies to the left of the control's client area.
		[helpstring("The specified point lies to the left of the control's client area.")]
		htToLeft = 0x00000800 /*LVHT_TOLEFT*/,     // actually LVHT_TOLEFT is 0x0040
		/// \brief On a group's state image
		///
		/// The specified point lies on a group's state image.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies on a group's state image. Requires comctl32.dll version 6.10 or higher.")]
		htGroupStateImage = 0x01000000 /*LVHT_EX_GROUP_STATEICON*/,
		/// \brief On the link displayed below a subseted group
		///
		/// The specified point lies on the link displayed below a subseted group.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies on the link displayed below a subseted group. Requires comctl32.dll version 6.10 or higher.")]
		htGroupSubSetLink = 0x02000000 /*LVHT_EX_GROUP_SUBSETLINK*/,
		/// \brief On an item's content and not on the background
		///
		/// The specified point lies on an item's icon or text label and not on the background.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies on an item's icon or text label and not on the background. Requires comctl32.dll version 6.10 or higher.")]
		htContent = 0x04000000 /*LVHT_EX_ONCONTENTS*/,
		/// \brief Over the footer area
		///
		/// The specified point lies over the control's footer area.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies over the control's footer area. Requires comctl32.dll version 6.10 or higher.")]
		htFooter = 0x08000000 /*LVHT_EX_FOOTER*/,
		/// \brief On a group's header
		///
		/// The specified point lies on a group's header.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies on a group's header. Requires comctl32.dll version 6.10 or higher.")]
		htGroupHeader = 0x10000000 /*LVHT_EX_GROUP_HEADER*/,
		/// \brief On a group's footer
		///
		/// The specified point lies on a group's footer.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies on a group's footer. Requires comctl32.dll version 6.10 or higher.")]
		htGroupFooter = 0x20000000 /*LVHT_EX_GROUP_FOOTER*/,
		/// \brief On a group's expando button
		///
		/// The specified point lies on a group's expando button.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies on a group's expando button. Requires comctl32.dll version 6.10 or higher.")]
		htGroupExpando = 0x40000000 /*LVHT_EX_GROUP_COLLAPSE*/,
		/// \brief Within a group's item area
		///
		/// The specified point lies in the area of a group where items are displayed.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies in the area of a group where items are displayed. Requires comctl32.dll version 6.10 or higher.")]
		htGroupBackground = 0x80000000 /*LVHT_EX_GROUP_BACKGROUND*/,
		/// \brief Within a group
		///
		/// The specified point lies within a group. This flag is a combination of \c htGroupStateImage,
		/// \c htGroupSubSetLink, \c htGroupHeader, \c htGroupFooter, \c htGroupExpando and
		/// \c htGroupBackground.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies within a group. Requires comctl32.dll version 6.10 or higher.")]
		htGroup = 0xF3000000 /*LVHT_EX_GROUP*/
	} HitTestConstants;

	/// \brief <em>Flags used with the \c FAILEDIMAGEDETAILS type</em>
	///
	/// \sa FAILEDIMAGEDETAILS
	[helpstring("Flags used with the 'FAILEDIMAGEDETAILS' type. Some of them may be combined.")]
	typedef enum ImageDrawingEffectsConstants {
		/// \brief The image state is not modified
		[helpstring("The image state is not modified.")]
		ideNormal = 0x00000000/*ILS_NORMAL*/,
		/// \brief Not supported; defined for completeness
		///
		/// \sa FAILEDIMAGEDETAILS::EffectColor
		[helpstring("Not supported; defined for completeness.")]
		ideGlow = 0x00000001/*ILS_GLOW*/,
		/// \brief Not supported; defined for completeness
		///
		/// \sa FAILEDIMAGEDETAILS::EffectColor
		[helpstring("Not supported; defined for completeness.")]
		ideShadow = 0x00000002/*ILS_SHADOW*/,
		/// \brief Reduces the color saturation of the icon to grayscale (affects 32bpp images only)
		[helpstring("Reduces the color saturation of the icon to grayscale (affects 32bpp images only).")]
		ideGrayscale = 0x00000004/*ILS_SATURATE*/,
		/// \brief Alpha blends the image
		///
		/// \sa FAILEDIMAGEDETAILS::AlphaChannel
		[helpstring("Alpha blends the image.")]
		ideAlphaBlending = 0x00000008/*ILS_ALPHA*/
	} ImageDrawingEffectsConstants;

	/// \brief <em>Constants used with the \c ItemAsynchronousDrawFailed and \c GroupAsynchronousDrawFailed events</em>
	///
	/// \sa _IExplorerListViewEvents::ItemAsynchronousDrawFailed,
	///     _IExplorerListViewEvents::GroupAsynchronousDrawFailed
	[helpstring("Constants used with the 'ItemAsynchronousDrawFailed' and 'GroupAsynchronousDrawFailed' events.")]
	typedef enum ImageDrawingFailureReasonConstants {
		/// \brief The image has too low quality
		[helpstring("The image has too low quality.")]
		idfrImageHasLowQuality = 0x00000001/*ILDRF_IMAGELOWQUALITY*/,
		/// \brief The overlay image has too low quality
		[helpstring("The overlay image has too low quality.")]
		idfrOverlayHasLowQuality = 0x00000010/*ILDRF_OVERLAYLOWQUALITY*/,
		/// \brief The image is not present and needs to be extracted
		[helpstring("The image is not present and needs to be extracted.")]
		idfrImageNotPresent = 0x8000000A/*E_PENDING*/,
		/// \brief The image is present, but not at the required image quality
		[helpstring("The image is present, but not at the required image quality.")]
		idfrQualityMismatch = 0x00000000/*S_OK*/
	} ImageDrawingFailureReasonConstants;

	/// \brief <em>Flags used with the \c FAILEDIMAGEDETAILS type</em>
	///
	/// \sa FAILEDIMAGEDETAILS
	[helpstring("Flags used with the 'FAILEDIMAGEDETAILS' type. Some of them may be combined.")]
	typedef enum ImageDrawingStyleConstants {
		/// \brief The image is drawn normal using the specified background color
		///
		/// Draws the image using the background color for the image list. If the background color is -1, the
		/// image is drawn transparently using the mask.
		[helpstring("The image is drawn normal using the specified background color.")]
		idsNormal = 0x00000000/*ILD_NORMAL*/,
		/// \brief The image is drawn transparently using the mask
		///
		/// Draws the image transparently using the mask, regardless of the background color. This value has no
		/// effect if the image list does not contain a mask.
		[helpstring("The image is drawn transparently using the mask.")]
		idsTransparent = 0x00000001/*ILD_TRANSPARENT*/,
		/// \brief The image is drawn blended 25 percent with the blend color
		///
		/// Draws the image, blending 25 percent with the blend color specified by
		/// \c FAILEDIMAGEDETAILS::ForeColor. This value has no effect if the image list does not contain a
		/// mask.
		///
		/// \sa FAILEDIMAGEDETAILS::ForeColor
		[helpstring("The image is drawn blended 25 percent with the blend color.")]
		idsBlend25 = 0x00000002/*ILD_BLEND25*/,
		/// \brief The image is drawn blended 50 percent with the blend color
		///
		/// Draws the image, blending 50 percent with the blend color specified by
		/// \c FAILEDIMAGEDETAILS::ForeColor. This value has no effect if the image list does not contain a
		/// mask.
		///
		/// \sa FAILEDIMAGEDETAILS::ForeColor
		[helpstring("The image is drawn blended 50 percent with the blend color.")]
		idsBlend50 = 0x00000004/*ILD_BLEND50*/,
		/// \brief Draws the image's mask
		[helpstring("Draws the image's mask.")]
		idsMask = 0x00000010/*ILD_MASK*/,
		/// \brief Use this flag if the overlay image does not require a mask to be drawn
		///
		/// \sa FAILEDIMAGEDETAILS::OverlayIndex
		[helpstring("Use this flag if the overlay image does not require a mask to be drawn.")]
		idsImage = 0x00000020/*ILD_IMAGE*/,
		/// \brief Draws the image using the raster operation code specified by \c FAILEDIMAGEDETAILS::RasterOperationCode
		///
		/// \sa FAILEDIMAGEDETAILS::RasterOperationCode
		[helpstring("Draws the image using the raster operation code specified by 'FAILEDIMAGEDETAILS.RasterOperationCode'.")]
		idsUseRasterOperationCode = 0x00000040/*ILD_ROP*/,
		/// \brief Preserves the alpha channel in the destination device context
		///
		/// \sa FAILEDIMAGEDETAILS::hDC
		[helpstring("Preserves the alpha channel in the destination device context.")]
		idsPreserveAlphaChannel = 0x00001000/*ILD_PRESERVEALPHA*/,
		/// \brief Causes the image to be scaled to \c FAILEDIMAGEDETAILS::SectionToDrawWidth, \c FAILEDIMAGEDETAILS::SectionToDrawHeight instead of being clipped
		///
		/// \sa FAILEDIMAGEDETAILS::SectionToDrawWidth, FAILEDIMAGEDETAILS::SectionToDrawHeight
		[helpstring("Causes the image to be scaled to 'FAILEDIMAGEDETAILS.SectionToDrawWidth', 'FAILEDIMAGEDETAILS.SectionToDrawHeight' instead of being clipped.")]
		idsScale = 0x00002000/*ILD_SCALE*/,
		/// \brief Scales the image to the current dots per inch (dpi) of the display
		[helpstring("Scales the image to the current dots per inch (dpi) of the display.")]
		idsDPIScale = 0x00004000/*ILD_DPISCALE*/,
		/// \brief Draws the image if it is available in the cache only
		[helpstring("Draws the image if it is available in the cache only.")]
		idsDrawAsynchronously = 0x00008000/*ILD_ASYNC*/
	} ImageDrawingStyleConstants;

	/// \brief <em>Constants used with the \c IExplorerListView::hImageList property</em>
	///
	/// \sa IExplorerListView::hImageList
	[helpstring("Constants used with the 'ExplorerListView.hImageList' property.")]
	typedef enum ImageListConstants {
		/// \brief Identifies the imagelist containing the items' icons used in the currently active view
		///
		/// Identifies the imagelist containing the items' icons used in the view currently active. If this
		/// imagelist is set to 0, no icons are drawn in the current view and maybe others that use the same
		/// imagelist.
		///
		/// \sa ilSmall, ilLarge, ilExtraLarge, IListViewItem::IconIndex,
		///     IExplorerListView::DrawImagesAsynchronously
		[helpstring("Identifies the imagelist containing the items' icons used in the currently active view.")]
		ilCurrentView,
		/// \brief Identifies the imagelist containing the items' icons used in 'Small Icons', 'List' and 'Details' view
		///
		/// Identifies the imagelist containing the items' icons used in 'Small Icons', 'List' and 'Details'
		/// view. If this imagelist is set to 0, no icons are drawn in these views.
		///
		/// \sa ilLarge, ilExtraLarge, IListViewItem::IconIndex, IExplorerListView::ShowSubItemImages,
		///     IExplorerListView::DrawImagesAsynchronously
		[helpstring("Identifies the imagelist containing the items' icons used in 'Small Icons', 'List' and 'Details' view.")]
		ilSmall,
		/// \brief Identifies the imagelist containing the items' icons used in 'Icons' view
		///
		/// Identifies the imagelist containing the items' icons used in 'Icons' view. If this imagelist is set
		/// to 0, no icons are drawn in this view.
		///
		/// \sa ilSmall, ilExtraLarge, IListViewItem::IconIndex, IExplorerListView::DrawImagesAsynchronously
		[helpstring("Identifies the imagelist containing the items' icons used in 'Icons' view.")]
		ilLarge,
		/// \brief Identifies the imagelist containing the items' icons used in 'Tiles' and 'Extended Tiles' view
		///
		/// Identifies the imagelist containing the items' icons used in 'Tiles' and 'Extended Tiles' view. If
		/// this imagelist is set to 0, no icons are drawn in these views.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa ilSmall, ilLarge, IListViewItem::IconIndex, IExplorerListView::DrawImagesAsynchronously
		[helpstring("Identifies the imagelist containing the items' icons used in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		ilExtraLarge,
		/// \brief Identifies the imagelist containing the items' icons used for Aero OLE drag images
		///
		/// Identifies the imagelist containing the items' icons used when icons with a high resolution are
		/// required. Currently the only usage of this imagelist is the creation of Aero OLE drag images.\n
		/// If this imagelist is set to 0, the \c ilExtraLarge imagelist is used.
		///
		/// \sa ilExtraLarge, ilHeaderHighResolution, IListViewItem::IconIndex,
		///     IExplorerListView::SupportOLEDragImages, IExplorerListView::OLEDrag
		[helpstring("Identifies the imagelist containing the items' icons used for Aero OLE drag images.")]
		ilHighResolution,
		/// \brief Identifies the imagelist containing the icons used for the control's group headers
		///
		/// Identifies the imagelist containing the icons used for the control's group headers. If this
		/// imagelist is set to 0, no icons are drawn in group headers.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewGroup::IconIndex
		[helpstring("Identifies the imagelist containing the icons used for the control's group headers. Requires comctl32.dll version 6.10 or higher.")]
		ilGroups,
		/// \brief Identifies the imagelist containing the items' state images
		///
		/// \sa ilHeaderState, IExplorerListView::ShowStateImages, IListViewItem::StateImageIndex
		[helpstring("Identifies the imagelist containing the items' state images.")]
		ilState,
		/// \brief Identifies the imagelist containing the column headers' icons
		///
		/// Identifies the imagelist containing the column headers' icons. If this imagelist is set to 0,
		/// the header control won't contain any icons.
		///
		/// \sa IListViewColumn::IconIndex
		[helpstring("Identifies the imagelist containing the column headers' icons.")]
		ilHeader,
		/// \brief Identifies the imagelist containing the column headers' icons used for Aero OLE drag images
		///
		/// Identifies the imagelist containing the column headers' icons used when icons with a high
		/// resolution are required. Currently the only usage of this imagelist is the creation of Aero OLE
		/// drag images.\n
		/// If this imagelist is set to 0, the \c ilHeader imagelist is used.
		///
		/// \sa ilHeader, IListViewColumn::IconIndex, IExplorerListView::SupportOLEDragImages,
		///     IExplorerListView::HeaderOLEDrag
		[helpstring("Identifies the imagelist containing the column headers' icons used for Aero OLE drag images.")]
		ilHeaderHighResolution,
		/// \brief Identifies the imagelist containing the column headers' state images
		///
		/// \remarks Current versions of Windows support only two different state images\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ilState, IExplorerListView::ShowHeaderStateImages, IListViewColumn::StateImageIndex
		[helpstring("Identifies the imagelist containing the column headers' state images. Requires comctl32.dll version 6.10 or higher.")]
		ilHeaderState,
		/// \brief Identifies the imagelist containing the icons used for the control's footer items
		///
		/// Identifies the imagelist containing the icons used for the control's footer items. If this
		/// imagelist is set to 0, no icons are drawn in footer items.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewFooterItem::IconIndex
		[helpstring("Identifies the imagelist containing the icons used for the control's footer items. Requires comctl32.dll version 6.10 or higher.")]
		ilFooterItems
	} ImageListConstants;

	/// \brief <em>Constants used with the \c IMEMode property</em>
	///
	/// \sa IExplorerListView::IMEMode, IExplorerListView::EditIMEMode
	[helpstring("Constants used with the 'IMEMode' property.")]
	typedef enum IMEModeConstants {
		/// \brief Use the same IME settings as the control's parent
		[helpstring("Inherit the IME status from the control's parent.")]
		imeInherit = -1,
		/// \brief Don't change anything on the control's default IME settings
		[helpstring("Leaves the control's IME status untouched.")]
		imeNoControl = 0,
		/// \brief Set the control's IME status to "on"
		[helpstring("Sets the control's IME status to \"on\".")]
		imeOn = 1,
		/// \brief Set the control's IME status to "off"
		[helpstring("Sets the control's IME status to \"off\".")]
		imeOff = 2,
		/// \brief Don't use IME
		[helpstring("Disables IME for the control.")]
		imeDisable = 3,
		/// \brief Set the control's IME status to "Hiragana Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Hiragana Double-Byte Characters\" (Japanese IME only).")]
		imeHiragana = 4,
		/// \brief Set the control's IME status to "Hiragana Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Katakana Double-Byte Characters\" (Japanese IME only).")]
		imeKatakana = 5,
		/// \brief Set the control's IME status to "Katakana Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Katakana Single-Byte Characters\" (Japanese IME only).")]
		imeKatakanaHalf = 6,
		/// \brief Set the control's IME status to "Alphanumeric Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean or Japanese.
		[helpstring("Sets the control's IME status to \"Alphanumeric Double-Byte Characters\" (Korean and Japanese IME only).")]
		imeAlphaFull = 7,
		/// \brief Set the control's IME status to "Alphanumeric Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean or Japanese.
		[helpstring("Sets the control's IME status to \"Alphanumeric Single-Byte Characters\" (Korean and Japanese IME only).")]
		imeAlpha = 8,
		/// \brief Set the control's IME status to "Hangul Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean.
		[helpstring("Sets the control's IME status to \"Hangul Single-Byte Characters\" (Korean IME only).")]
		imeHangulFull = 9,
		/// \brief Set the control's IME status to "Hangul Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean.
		[helpstring("Sets the control's IME status to \"Hangul Double-Byte Characters\" (Korean IME only).")]
		imeHangul = 10
	} IMEModeConstants;

	/// \brief <em>Constants that may be used with the \c SetInsertMarkPosition and \c GetInsertMarkPosition methods</em>
	///
	/// Constants that may be used for the \c relativePosition parameter of the \c SetInsertMarkPosition
	/// and \c GetInsertMarkPosition methods.
	///
	/// \sa IExplorerListView::SetInsertMarkPosition, IExplorerListView::GetInsertMarkPosition
	[helpstring("Constants that may be used for the 'relativePosition' parameter of the 'SetInsertMarkPosition' and 'GetInsertMarkPosition' methods.")]
	typedef enum InsertMarkPositionConstants {
		/// \brief The insertion mark is or will be removed
		[helpstring("The insertion mark is or will be removed.")]
		impNowhere = 0,
		/// \brief The insertion mark is or will be placed before the item
		[helpstring("The insertion mark is or will be placed before the item.")]
		impBefore = 1,
		/// \brief The insertion mark is or will be placed after the item
		[helpstring("The insertion mark is or will be placed after the item.")]
		impAfter = 2,
		/// \brief The insertion mark won't be (re-)moved
		[helpstring("The insertion mark won't be (re-)moved.")]
		impDontChange = 3
	} InsertMarkPositionConstants;

	/// \brief <em>Constants used with the \c ItemActivationMode property</em>
	///
	/// \sa IExplorerListView::ItemActivationMode, _IExplorerListViewEvents::ItemActivate
	[helpstring("Constants used with the 'ItemActivationMode' property.")]
	typedef enum ItemActivationModeConstants {
		/// \brief The \c ItemActivate event is fired if the user single-clicks an item
		///
		/// \sa IExplorerListView::HotItem
		[helpstring("The 'ItemActivate' event is fired if the user single-clicks an item.")]
		iamOneSingleClick,
		/// \brief The \c ItemActivate event is fired if the user single-clicks an already selected item
		///
		/// \sa IExplorerListView::HotItem
		[helpstring("The 'ItemActivate' event is fired if the user single-clicks an already selected item.")]
		iamTwoSingleClicks,
		/// \brief The \c ItemActivate event is fired if the user double-clicks an item
		[helpstring("The 'ItemActivate' event is fired if the user double-clicks an item.")]
		iamOneDoubleClick
	} ItemActivationModeConstants;

	/// \brief <em>Constants used with the \c ItemAlignment property</em>
	///
	/// \sa IExplorerListView::ItemAlignment
	[helpstring("Constants used with the 'ItemAlignment' property.")]
	typedef enum ItemAlignmentConstants {
		/// \brief The control top-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view
		[helpstring("The control top-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
		iaTop,
		/// \brief The control left-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view
		[helpstring("The control left-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
		iaLeft,
		#ifdef ALLOWBOTTOMRIGHTALIGNMENT
			/// \brief The control bottom-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view
			[helpstring("The control bottom-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
			iaBottom,
			/// \brief The control right-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view
			[helpstring("The control right-aligns its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
			iaRight
		#endif
	} ItemAlignmentConstants;

	/// \brief <em>Flags used with the \c ItemBoundingBoxDefinition property</em>
	///
	/// \sa IExplorerListView::ItemBoundingBoxDefinition
	[helpstring("Flags used with the 'ItemBoundingBoxDefinition' property. They can be combined.")]
	typedef enum ItemBoundingBoxDefinitionConstants {
		/// \brief An item's icon is treated as part of the item
		[helpstring("An item's icon is treated as part of the item.")]
		ibbdItemIcon = htItemIcon,
		/// \brief An item's text label is treated as part of the item
		[helpstring("An item's text label is treated as part of the item.")]
		ibbdItemLabel = htItemLabel,
		/// \brief An item's state image is treated as part of the item
		[helpstring("An item's state image is treated as part of the item.")]
		ibbdItemStateImage = htItemStateImage
	} ItemBoundingBoxDefinitionConstants;

	/// \brief <em>Constants used to identify items within an \c IListViewItems collection</em>
	///
	/// \sa IListViewItems
	[helpstring("Constants used to identify items within a 'ListViewItems' collection.")]
	typedef enum ItemIdentifierTypeConstants {
		/// \brief The item is identified by an unique ID
		///
		/// An item's ID will never change.
		///
		/// \sa IListViewItem::ID
		[helpstring("The item is identified by an unique ID.")]
		iitID,
		/// \brief The item is identified by a zero-based index
		///
		/// Reordering the items won't change an item's index, but removing or adding new items may
		/// do so.
		///
		/// \remarks This is the preferred and fastest method to identify an item.
		///
		/// \sa IListViewItem::Index
		[helpstring("The item is identified by a zero-based index.")]
		iitIndex
	} ItemIdentifierTypeConstants;

	/// \brief <em>Constants used with the \c IListViewItem::GetRectangle and \c IListViewSubItem::GetRectangle methods</em>
	///
	/// \sa IListViewItem::GetRectangle, IListViewSubItem::GetRectangle
	[helpstring("Constants used with the 'ListViewItem.GetRectangle' and 'ListViewSubItem.GetRectangle' methods.")]
	typedef enum ItemRectangleTypeConstants {
		/// \brief The rectangle surrounds the entire item
		///
		/// The rectangle is the bounding rectangle around the entire item, including sub-items in 'Details'
		/// view.
		[helpstring("The rectangle is the bounding rectangle around the entire item, including sub-items in 'Details' view.")]
		irtEntireItem = 0 /*LVIR_BOUNDS*/,
		/// \brief The rectangle surrounds the item's icon only
		///
		/// The rectangle is the bounding rectangle around the item's icon.
		[helpstring("The rectangle is the bounding rectangle around the item's icon.")]
		irtIconOnly = 1 /*LVIR_ICON*/,
		/// \brief The rectangle surrounds the item's text only
		///
		/// The rectangle is the bounding rectangle around the item's text.
		[helpstring("The rectangle is the bounding rectangle around the item's text.")]
		irtLabelOnly = 2 /*LVIR_LABEL*/,
		/// \brief The rectangle surrounds the item's selected parts
		///
		/// The rectangle is the rectangle that is highlighted when the item is selected.
		///
		/// \remarks This value is valid for \c IListViewItem::GetRectangle only.
		[helpstring("The rectangle is the rectangle that is highlighted when the item is selected.")]
		irtSelection = 3 /*LVIR_SELECTBOUNDS*/
	} ItemRectangleTypeConstants;

	/// \brief <em>Flags used with the \c _IExplorerListViewEvents::ItemGetDisplayInfo event</em>
	///
	/// \sa _IExplorerListViewEvents::ItemGetDisplayInfo
	[helpstring("Flags used with the 'ItemGetDisplayInfo' event. They can be combined.")]
	typedef enum ItemStateConstants {
		/// \brief The item's \c Caret property is equal to \c True
		///
		/// \sa IListViewItem::Caret
		[helpstring("The item's 'Caret' property is equal to 'True'.")]
		isCaret = 0x0001/*LVIS_FOCUSED*/,
		/// \brief The item's \c Selected property is equal to \c True
		///
		/// \sa IListViewItem::Selected
		[helpstring("The item's 'Selected' property is equal to 'True'.")]
		isSelected = 0x0002/*LVIS_SELECTED*/,
		/// \brief The item's or sub-item's \c Ghosted property is equal to \c True
		///
		/// \sa IListViewItem::Ghosted, IListViewSubItem::Ghosted
		[helpstring("The item's or sub-item's 'Ghosted' property is equal to 'True'.")]
		isGhosted = 0x0004/*LVIS_CUT*/,
		/// \brief The item's \c DropHilited property is equal to \c True
		///
		/// \sa IListViewItem::DropHilited
		[helpstring("The item's 'DropHilited' property is equal to 'True'.")]
		isDropHilited = 0x0008/*LVIS_DROPHILITED*/,
		/// \brief The item's or sub-item's \c Glowing property is equal to \c True
		///
		/// \sa IListViewItem::Glowing, IListViewSubItem::Glowing
		[helpstring("The item's or sub-item's 'Glowing' property is equal to 'True'.")]
		isGlowing = 0x0010/*LVIS_GLOW*/,
		/// \brief The item's or sub-item's \c Activating property is equal to \c True
		///
		/// \sa IListViewItem::Activating, IListViewSubItem::Activating
		[helpstring("The item's or sub-item's 'Activating' property is equal to 'True'.")]
		isActivating = 0x0020/*LVIS_ACTIVATING*/
	} ItemStateConstants;

	/// \brief <em>Constants used with the \c MousePointer property</em>
	///
	/// \sa IExplorerListView::MousePointer
	[helpstring("Constants used with the 'MousePointer' property.")]
	typedef enum MousePointerConstants {
		/// \brief The default mouse cursor is used
		[helpstring("The default mouse cursor is used.")]
		mpDefault,
		/// \brief The default arrow is used as mouse cursor
		[helpstring("The default arrow is used as mouse cursor.")]
		mpArrow,
		/// \brief A cross is used as mouse cursor
		[helpstring("A cross is used as mouse cursor.")]
		mpCross,
		/// \brief A vertical beam (like in textboxes) is used as mouse cursor
		[helpstring("A vertical beam (like in textboxes) is used as mouse cursor.")]
		mpIBeam,
		/// \brief An icon is used as mouse cursor
		[helpstring("An icon is used as mouse cursor.")]
		mpIcon,
		/// \brief A mouse cursor indicating window sizing is used
		[helpstring("A mouse cursor indicating window sizing is used.")]
		mpSize,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-right or lower-left corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-right or lower-left corner is used.")]
		mpSizeNESW,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its upper or
		/// lower border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper or lower border is used.")]
		mpSizeNS,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-left or lower-right corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-left or lower-right corner is used.")]
		mpSizeNWSE,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its left or
		/// right border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's left or right border is used.")]
		mpSizeEW,
		/// \brief An arrow pointing upwardly is used as mouse cursor
		[helpstring("An arrow pointing upwardly is used as mouse cursor.")]
		mpUpArrow,
		/// \brief An hourglass is used as mouse cursor
		[helpstring("An hourglass is used as mouse cursor.")]
		mpHourglass,
		/// \brief An mouse cursor indicating that the control can't be a drop target is used
		[helpstring("An mouse cursor indicating that the control can't be a drop target is used.")]
		mpNoDrop,
		/// \brief The default arrow with a small hourglass is used as mouse cursor
		[helpstring("The default arrow with a small hourglass is used as mouse cursor.")]
		mpArrowHourglass,
		/// \brief The default arrow with a small question mark is used as mouse cursor
		[helpstring("The default arrow with a small question mark is used as mouse cursor.")]
		mpArrowQuestion,
		/// \brief A mouse cursor indicating window sizing to all directions is used
		[helpstring("A mouse cursor indicating window sizing to all directions is used.")]
		mpSizeAll,
		/// \brief A hand typically used for hyperlinks is used as mouse cursor
		[helpstring("A hand typically used for hyperlinks is used as mouse cursor.")]
		mpHand,
		/// \brief A mouse cursor indicating that the program waits for some media is used
		[helpstring("A mouse cursor indicating that the program waits for some media is used.")]
		mpInsertMedia,
		/// \brief A mouse cursor indicating scrolling to all directions is used
		[helpstring("A mouse cursor indicating scrolling to all directions is used.")]
		mpScrollAll,
		/// \brief A mouse cursor indicating scrolling upwardly is used
		[helpstring("A mouse cursor indicating scrolling upwardly is used.")]
		mpScrollN,
		/// \brief A mouse cursor indicating scrolling to the window's upper-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-right corner is used.")]
		mpScrollNE,
		/// \brief A mouse cursor indicating scrolling to the window's right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's right border is used.")]
		mpScrollE,
		/// \brief A mouse cursor indicating scrolling to the window's lower-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-right corner is used.")]
		mpScrollSE,
		/// \brief A mouse cursor indicating scrolling downwards is used
		[helpstring("A mouse cursor indicating scrolling downwards is used.")]
		mpScrollS,
		/// \brief A mouse cursor indicating scrolling to the window's lower-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-left corner is used.")]
		mpScrollSW,
		/// \brief A mouse cursor indicating scrolling to the window's left border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left border is used.")]
		mpScrollW,
		/// \brief A mouse cursor indicating scrolling to the window's upper-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-left corner is used.")]
		mpScrollNW,
		/// \brief A mouse cursor indicating scrolling upwardly or downwards is used
		[helpstring("A mouse cursor indicating scrolling upwardly or downwards is used.")]
		mpScrollNS,
		/// \brief A mouse cursor indicating scrolling to the window's left or right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left or right border is used.")]
		mpScrollEW,
		/// \brief The custom mouse cursor defined by the \c MouseIcon property is used
		[helpstring("The custom mouse cursor defined by the MouseIcon property is used.")]
		mpCustom = 0x63
	} MousePointerConstants;

	/// \brief <em>Constants used with the \c *OLEQueryContinueDrag events</em>
	///
	/// \sa _IExplorerListViewEvents::OLEQueryContinueDrag,
	///     _IExplorerListViewEvents::HeaderOLEQueryContinueDrag, _IExplorerListViewEvents::OLEGiveFeedback,
	///     _IExplorerListViewEvents::HeaderOLEGiveFeedback, IExplorerListView::OLEDrag,
	///     IExplorerListView::HeaderOLEDrag
	[helpstring("Constants used with the *OLEQueryContinueDrag events.")]
	typedef enum OLEActionToContinueWithConstants {
		/// \brief Continue the drag'n'drop operation
		[helpstring("Continue the drag'n'drop operation.")]
		oatcwContinue = 0x0 /*S_OK*/,
		/// \brief Cancel the drag'n'drop operation
		[helpstring("Cancel the drag'n'drop operation.")]
		oatcwCancel = 0x40101 /*DRAGDROP_S_CANCEL*/,
		/// \brief Complete the drag'n'drop operation
		[helpstring("Complete the drag'n'drop operation.")]
		oatcwDrop = 0x40100 /*DRAGDROP_S_DROP*/
	} OLEActionToContinueWithConstants;

	/// \brief <em>Constants used with the \c *OLEDragImageStyle properties</em>
	///
	/// \sa IExplorerListView::HeaderOLEDragImageStyle, IExplorerListView::OLEDragImageStyle
	[helpstring("Constants used with the '*OLEDragImageStyle' properties.")]
	typedef enum OLEDragImageStyleConstants {
		/// \brief OLE drag images will be generated in classic style
		[helpstring("OLE drag images will be generated in classic style.")]
		odistClassic,
		/// \brief OLE drag images will be generated in Aero (Vista) style on systems supporting it and in classic style on other systems
		///
		/// \remarks Aero style is supported by Windows Vista and newer systems.\n
		///          The icons for Aero style drag images are taken from the \c ilHighResolution
		///          (\c ilHeaderHighResolution), \c ilExtraLarge (\c ilHeader), \c ilLarge or \c ilSmall image
		///          list (in this order).
		///
		/// \sa IExplorerListView::hImageList
		[helpstring("OLE drag images will be generated in Aero (Vista) style on systems supporting it and in classic style on other systems. Aero style is supported by Windows Vista and newer systems.")]
		odistAeroIfAvailable
	} OLEDragImageStyleConstants;

	/// \brief <em>Constants used with OLE drag'n'drop</em>
	///
	/// \sa _IExplorerListViewEvents::OLEDragEnter, _IExplorerListViewEvents::HeaderOLEDragEnter,
	///     _IExplorerListViewEvents::OLEDragMouseMove, _IExplorerListViewEvents::HeaderOLEDragMouseMove,
	///     _IExplorerListViewEvents::OLEDragDrop, _IExplorerListViewEvents::HeaderOLEDragDrop,
	///     IExplorerListView::OLEDrag, IExplorerListView::HeaderOLEDrag
	[helpstring("Constants used with the *OLEDrag* events.")]
	typedef enum OLEDropEffectConstants {
		/// \brief No OLE drag and drop operation has occurred or will occur
		[helpstring("No OLE drag and drop operation has occurred or will occur.")]
		odeNone = 0 /*DROPEFFECT_NONE*/,
		/// \brief A copy has occured or will occur
		[helpstring("A copy has occured or will occur.")]
		odeCopy = 1 /*DROPEFFECT_COPY*/,
		/// \brief A move has occured or will occur
		[helpstring("A move has occured or will occur.")]
		odeMove = 2 /*DROPEFFECT_MOVE*/,
		/// \brief A link has occured or will occur
		[helpstring("A link has occured or will occur.")]
		odeLink = 4 /*DROPEFFECT_LINK*/,
		/// \brief Combination of \c odeCopy and \c odeMove
		[helpstring("Combination of 'odeCopy' and 'odeMove'.")]
		odeCopyOrMove = odeCopy | odeMove,
		/// \brief The drop target window has scrolled or will scroll
		[helpstring("The drop target window has scrolled or will scroll.")]
		odeScroll = 0x80000000 /*DROPEFFECT_SCROLL*/
	} OLEDropEffectConstants;

	/// \brief <em>Constants used to identify item states during owner-drawing</em>
	///
	/// \sa CustomDrawItemStateConstants, _IExplorerListViewEvents::HeaderOwnerDrawItem,
	///     _IExplorerListViewEvents::OwnerDrawItem
	[helpstring("Constants used to identify item states during owner-drawing.")]
	typedef enum OwnerDrawItemStateConstants {
		/// \brief The item is selected
		[helpstring("The item is selected.")]
		odisSelected = 0x1 /*ODS_SELECTED*/,
		/// \brief The item has the keyboard focus
		///
		/// \remarks Current versions of Windows do not use this flag for header controls.
		[helpstring("The item has the keyboard focus. Current versions of Windows do not use this flag for header controls.")]
		odisFocus = 0x10 /*ODS_FOCUS*/,
		/// \brief The item is being hot-tracked, that is, the item will be highlighted when the mouse is on the item
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview and header
		///          controls.
		///
		/// \sa IExplorerListView::HotTracking
		[helpstring("The item is being hot-tracked, that is, the item will be highlighted when the mouse is on the item. Current versions of Windows probably do not use this flag for listview and header controls.")]
		odisHot = 0x40 /*ODS_HOTLIGHT*/,
		/// \brief The control is drawn without the keyboard accelerator cues
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview and header
		///          controls.
		[helpstring("The control is drawn without the keyboard accelerator cues. Current versions of Windows probably do not use this flag for listview and header controls.")]
		odisNoAccelerator = 0x100 /*ODS_NOACCEL*/,
		/// \brief The control is drawn without focus indicator cues
		///
		/// \remarks Current versions of Windows probably do not use this flag for listview and header
		///          controls.
		[helpstring("The control is drawn without focus indicator cues. Current versions of Windows probably do not use this flag for listview and header controls.")]
		odisNoFocusRectangle = 0x200 /*ODS_NOFOCUSRECT*/
	} OwnerDrawItemStateConstants;

	/// \brief <em>Constants used with the \c ItemGetDisplayInfo and \c HeaderItemGetDisplayInfo events</em>
	///
	/// \sa _IExplorerListViewEvents::ItemGetDisplayInfo, _IExplorerListViewEvents::HeaderItemGetDisplayInfo
	[helpstring("Constants used with the 'ItemGetDisplayInfo' event.")]
	typedef enum RequestedInfoConstants {
		/// \brief The event was fired to retrieve the item's or sub-item's text or the column header's caption
		///
		/// \sa IListViewItem::Text, IListViewSubItem::Text, IListViewColumn::Caption
		[helpstring("The control requires the item's or sub-item's text or the column header's caption.")]
		riItemText = 0x0001,
		/// \brief The event was fired to retrieve the index of the item's, sub-item's or column header's icon
		///
		/// \sa IListViewItem::IconIndex, IListViewSubItem::IconIndex, IListViewColumn::IconIndex
		[helpstring("The control requires the index of the item's, sub-item's or column header's icon.")]
		riIconIndex = 0x0002,
		/// \brief The event was fired to retrieve the index of the item's or sub-item's overlay icon
		///
		/// \sa IListViewItem::OverlayIndex, IListViewSubItem::OverlayIndex
		[helpstring("The control requires the index of the item's or sub-item's overlay icon.")]
		riOverlayIndex = 0x0010,
		/// \brief The event was fired to retrieve the index of the item's or sub-item's state image
		///
		/// \sa IListViewItem::StateImageIndex, IListViewSubItem::StateImageIndex
		[helpstring("The control requires the index of the item's or sub-item's state image.")]
		riStateImageIndex = 0x0020,
		/// \brief The event was fired to retrieve the item's indentation
		///
		/// The event was fired to retrieve the item's indentation in 'Details' view in image widths. If set
		/// to 1, the item's indentation will be 1 image width; if set to 2, it will be 2 image widths and so
		/// on.
		///
		/// \sa IListViewItem::Indent
		[helpstring("The control requires the item's indentation.")]
		riIndent = 0x0040,
		/// \brief The event was fired to retrieve the value of the item's \c TileViewColumns property
		///
		/// \sa IListViewItem::TileViewColumns
		[helpstring("The control requires the value of the item's 'TileViewColumns' property.")]
		riTileViewColumns = 0x0100,
		/// \brief The event was fired to retrieve the value of the item's or sub-item's \c Activating property
		///
		/// \sa IListViewItem::Activating, IListViewSubItem::Activating
		[helpstring("The control requires the value of the item's or sub-item's 'Activating' property.")]
		riActivating = 0x0200,
		/// \brief The event was fired to retrieve the value of the item's \c Caret property
		///
		/// \sa IListViewItem::Caret
		[helpstring("The control requires the value of the item's 'Caret' property.")]
		riCaret = 0x0400,
		/// \brief The event was fired to retrieve the value of the item's \c DropHilited property
		///
		/// \sa IListViewItem::DropHilited
		[helpstring("The control requires the value of the item's 'DropHilited' property.")]
		riDropHilited = 0x0800,
		/// \brief The event was fired to retrieve the value of the item's or sub-item's \c Ghosted property
		///
		/// \sa IListViewItem::Ghosted, IListViewSubItem::Ghosted
		[helpstring("The control requires the value of the item's or sub-item's 'Ghosted' property.")]
		riGhosted = 0x1000,
		/// \brief The event was fired to retrieve the value of the item's or sub-item's \c Glowing property
		///
		/// \sa IListViewItem::Glowing, IListViewSubItem::Glowing
		[helpstring("The control requires the value of the item's or sub-item's 'Glowing' property.")]
		riGlowing = 0x2000,
		/// \brief The event was fired to retrieve the value of the item's \c Selected property
		///
		/// \sa IListViewItem::Selected
		[helpstring("The control requires the value of the item's 'Selected' property.")]
		riSelected = 0x4000,
		/// \brief The event was fired to retrieve the value of the item's \c Group property
		///
		/// \sa IListViewItem::Group
		[helpstring("The control requires the value of the item's 'Group' property.")]
		riGroupID = 0x8000
	} RequestedInfoConstants;

	/// \brief <em>Flags used with the \c RightToLeft property</em>
	///
	/// \sa IExplorerListView::RightToLeft
	[helpstring("Flags used with the 'RightToLeft' property. They can be combined.")]
	typedef enum RightToLeftConstants {
		/// \brief Read text from right to left
		///
		/// The items' text is read from right to left, but the general layout is left to right.
		[helpstring("The items' text is read from right to left, but the general layout is left to right.")]
		rtlText = 1,
		/// \brief Use a right to left layout
		///
		/// The general layout is right to left.
		[helpstring("The general layout is right to left.")]
		rtlLayout = 2
	} RightToLeftConstants;

	/// \brief <em>Constants used with the \c MouseWheel events</em>
	///
	/// \sa _IExplorerListViewEvents::MouseWheel, _IExplorerListViewEvents::EditMouseWheel,
	///     _IExplorerListViewEvents::HeaderMouseWheel
	[helpstring("Constants used with the 'MouseWheel' events.")]
	typedef enum ScrollAxisConstants {
		/// \brief Scroll vertically
		[helpstring("The control will scroll vertically.")]
		saVertical = 1,
		/// \brief Scroll horizontally
		[helpstring("The control will scroll horizontally.")]
		saHorizontal = 2
	} ScrollAxisConstants;

	/// \brief <em>Constants used with the \c ScrollBars property</em>
	///
	/// \sa IExplorerListView::ScrollBars
	[helpstring("Constants used with the 'ScrollBars' property.")]
	typedef enum ScrollBarsConstants {
		/// \brief Don't display any scrollbars
		[helpstring("The control doesn't display any scrollbars.")]
		sbNone,
		/// \brief Display scrollbars as needed
		[helpstring("The control displays vertical and horizontal scrollbars as needed.")]
		sbNormal,
		/// \brief Display flat scrollbars as needed
		[helpstring("The control displays vertical and horizontal flat scrollbars as needed.")]
		sbFlat
	} ScrollBarsConstants;

	/// \brief <em>Constants used with the \c FindItem and \c IListViewItem::FindNextItem methods</em>
	///
	/// \sa IExplorerListView::FindItem, IListViewItem::FindNextItem
	[helpstring("Constants used with the 'FindItem' and 'ListViewItem.FindNextItem' methods.")]
	typedef enum SearchDirectionConstants {
		/// \brief Search items without any specific direction
		[helpstring("Search items without any specific direction.")]
		sdNoneSpecific = 0,
		/// \brief Search items to the left of the base item
		[helpstring("Search items to the left of the base item.")]
		sdLeft = 0x25/*VK_LEFT*/,
		/// \brief Search items to the right of the base item
		[helpstring("Search items to the right of the base item.")]
		sdRight = 0x27/*VK_RIGHT*/,
		/// \brief Search items above the base item
		[helpstring("Search items above the base item.")]
		sdUp = 0x26/*VK_UP*/,
		/// \brief Search items below the base item
		[helpstring("Search items below the base item.")]
		sdDown = 0x28/*VK_DOWN*/,
		/// \brief Search items in the direction of the top row's leftmost item
		[helpstring("Search items in the direction of the top row's leftmost item.")]
		sdHome = 0x24/*VK_HOME*/,
		/// \brief Search items in the direction of the last row's rightmost item
		[helpstring("Search items in the direction of the last row's rightmost item")]
		sdEnd = 0x23/*VK_END*/,
		/// \brief Search items before the base item (pagewise steps)
		[helpstring("Search items before the base item (pagewise steps).")]
		sdPrior = 0x21/*VK_PRIOR*/,
		/// \brief Search items after the base item (pagewise steps)
		[helpstring("Search items after the base item (pagewise steps).")]
		sdNext = 0x22/*VK_NEXT*/
	} SearchDirectionConstants;

	/// \brief <em>Constants used with the \c FindItem and \c IListViewItem::FindNextItem methods</em>
	///
	/// \sa IExplorerListView::FindItem, IListViewItem::FindNextItem
	[helpstring("Constants used with the 'FindItem' and 'ListViewItem.FindNextItem' methods.")]
	typedef enum SearchModeConstants {
		/// \brief Search for an item whose \c ItemData property matches the value specified by the \c searchFor parameter
		///
		/// \sa IListViewItem::ItemData
		[helpstring("Search for an item whose 'ItemData' property matches the value specified by the 'searchFor' parameter.")]
		smItemData,
		/// \brief Search for an item whose \c Text property matches the string specified by the \c searchFor parameter
		///
		/// \sa IListViewItem::Text
		[helpstring("Search for an item whose 'Text' property matches the string specified by the 'searchFor' parameter.")]
		smText,
		/// \brief Search for an item whose \c Text property begins with the string specified by the \c searchFor parameter
		///
		/// \sa IListViewItem::Text
		[helpstring("Search for an item whose 'Text' property begins with the string specified by the 'searchFor' parameter.")]
		smPartialText,
		/// \brief Find the item nearest to the position specified by the \c searchFor parameter
		///
		/// \remarks This search mode is valid for 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view
		///          only.
		///
		/// \sa IListViewItem::GetPosition
		[helpstring("Find the item nearest to the position specified by the 'searchFor' parameter.")]
		smNearestPosition
	} SearchModeConstants;

	/// \brief <em>Constants used with the \c IListViewColumn::SortArrow property</em>
	///
	/// \sa IListViewColumn::SortArrow
	[helpstring("Constants used with the 'ListViewColumn.SortArrow' property.")]
	typedef enum SortArrowConstants {
		/// \brief Don't display any sort arrow
		[helpstring("The column caption won't contain any sort arrow.")]
		saNone,
		/// \brief Display an arrow pointing downwards
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This setting can't be used if the \c BitmapHandle property is set to a value other
		///          than 0 or if the \c IconIndex property is set to a value other than -2.
		///
		/// \sa IListViewColumn::BitmapHandle, IVirtualListViewColumn::BitmapHandle,
		///     IListViewColumn::IconIndex, IVirtualListViewColumn::IconIndex
		[helpstring("The column caption will contain an arrow pointing downwards. Requires comctl32.dll version 6.0 or higher.")]
		saDown,
		/// \brief Display an arrow pointing upwardly
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This setting can't be used if the \c BitmapHandle property is set to a value other
		///          than 0 or if the \c IconIndex property is set to a value other than -2.
		///
		/// \sa IListViewColumn::BitmapHandle, IVirtualListViewColumn::BitmapHandle,
		///     IListViewColumn::IconIndex, IVirtualListViewColumn::IconIndex
		[helpstring("The column caption will contain an arrow pointing upwardly. Requires comctl32.dll version 6.0 or higher.")]
		saUp
	} SortArrowConstants;

	/// \brief <em>Constants used with the \c SortGroups and \c SortItems methods</em>
	///
	/// \sa IExplorerListView::SortGroups, IExplorerListView::SortItems,
	///     _IExplorerListViewEvents::CompareGroups, _IExplorerListViewEvents::CompareItems
	[helpstring("Constants used with the 'SortGroups' and 'SortItems' methods.")]
	typedef enum SortByConstants {
		/// \brief The groups or items don't get sorted
		[helpstring("The groups or items don't get sorted.")]
		sobNone = -1,
		/// \brief The groups or items get sorted through \c ShellListView by the Windows Shell
		///
		/// \remarks This sort criterion is ignored if no \c ShellListView control is attached.
		[helpstring("The groups or items get sorted through ShellListView by the Windows Shell. This sort criterion is ignored if no ShellListView control is attached.")]
		sobShell = 0,
		/// \brief The groups or items get sorted by their text
		///
		/// \sa IListViewColumn::Locale, IListViewColumn::TextParsingFlags, IExplorerListView::GroupLocale,
		///     IExplorerListView::GroupTextParsingFlags
		[helpstring("The groups or items get sorted by their text.")]
		sobText,
		/// \brief The items get sorted by their selection state (selected stand first)
		///
		/// \remarks This flag can be used with the \c SortItems method only.
		[helpstring("The items get sorted by their selection state (selected stand first). Can be used with the 'SortItems' method only.")]
		sobSelectionState,
		/// \brief The items get sorted by their state image index (higher stands first)
		///
		/// \remarks This flag can be used with the \c SortItems method only.
		[helpstring("The items get sorted by their state image index (higher stands first). Can be used with the 'SortItems' method only.")]
		sobStateImageIndex,
		/// \brief The \c CompareGroups or \c CompareItems event is fired to sort groups or items
		[helpstring("The 'CompareGroups' or 'CompareItems' event is fired to sort groups or items.")]
		sobCustom,
		/// \brief The groups or items get sorted by their text and the text is interpreted as integer number
		///
		/// \sa IListViewColumn::Locale, IListViewColumn::TextParsingFlags, IExplorerListView::GroupLocale,
		///     IExplorerListView::GroupTextParsingFlags
		[helpstring("The groups or items get sorted by their text and the text is interpreted as integer number.")]
		sobNumericIntText,
		/// \brief The groups or items get sorted by their text and the text is interpreted as floating point number
		///
		/// \sa IListViewColumn::Locale, IListViewColumn::TextParsingFlags, IExplorerListView::GroupLocale,
		///     IExplorerListView::GroupTextParsingFlags
		[helpstring("The groups or items get sorted by their text and the text is interpreted as floating point number.")]
		sobNumericFloatText,
		/// \brief The groups or items get sorted by their text and the text is interpreted as currency number
		///
		/// \sa IListViewColumn::Locale, IListViewColumn::TextParsingFlags, IExplorerListView::GroupLocale,
		///     IExplorerListView::GroupTextParsingFlags
		[helpstring("The groups or items get sorted by their text and the text is interpreted as currency number.")]
		sobCurrencyText,
		/// \brief The groups or items get sorted by their text and the text is interpreted as date-time value
		///
		/// \sa IListViewColumn::Locale, IListViewColumn::TextParsingFlags, IExplorerListView::GroupLocale,
		///     IExplorerListView::GroupTextParsingFlags
		[helpstring("The groups or items get sorted by their text and the text is interpreted as date-time value.")]
		sobDateTimeText
	} SortByConstants;

	/// \brief <em>Constants used with the \c GroupSortOrder and \c SortOrder properties</em>
	///
	/// \sa IExplorerListView::GroupSortOrder, IExplorerListView::SortOrder
	[helpstring("Constants used with the 'GroupSortOrder' and 'SortOrder' properties.")]
	typedef enum SortOrderConstants {
		/// \brief The groups or items get sorted in ascending order
		[helpstring("The groups or items get sorted in ascending order.")]
		soAscending,
		/// \brief The groups or items get sorted in descending order
		[helpstring("The groups or items get sorted in descending order.")]
		soDescending
	} SortOrderConstants;

	/// \brief <em>Constants used with the \c ItemStateImageChanging, \c ItemStateImageChanged, \c ColumnStateImageChanging and \c ColumnStateImageChanged events</em>
	///
	/// \sa _IExplorerListViewEvents::ColumnStateImageChanging,
	///     _IExplorerListViewEvents::ColumnStateImageChanged,
	///     _IExplorerListViewEvents::ItemStateImageChanging,
	///     _IExplorerListViewEvents::ItemStateImageChanged
	[helpstring("Constants used with the 'ItemStateImageChanging', 'ItemStateImageChanged', 'ColumnStateImageChanging' and 'ColumnStateImageChanged' events.")]
	typedef enum StateImageChangeCausedByConstants {
		/// \brief The state image change was caused by mouse input
		[helpstring("The state image change was caused by mouse input.")]
		siccbMouse,
		/// \brief The state image change was caused by keyboard input
		///
		/// \remarks This value is valid for the \c ItemStateImageChanging and \c ItemStateImageChanged events
		///          only.
		[helpstring("The state image change was caused by keyboard input. This value is valid for the 'ItemStateImageChanging' and 'ItemStateImageChanged' events only.")]
		siccbKeyboard
	} StateImageChangeCausedByConstants;

	/// \brief <em>Constants used to identify the sub-item control to use for the specified sub-item</em>
	///
	/// \sa _IExplorerListViewEvents::GetSubItemControl
	// NOTE: Values are synchronized with https://msdn.microsoft.com/en-us/library/bb773866
	[helpstring("Constants used to identify the sub-item control to use for the specified sub-item.")]
	typedef enum SubItemControlConstants {
		/// \brief The control won't use a sub-item control
		///
		/// The control won't use a sub-item control for the specified sub-item. The sub-item will be drawn by
		/// the native list view control and won't have in-place editing capabilities.
		[helpstring("The control won't use a sub-item control for the specified sub-item. The sub-item will be drawn by the native list view control and won't have in-place editing capabilities.")]
		sicNoSubItemControl = -2,
		// \brief The control will use an internal, event-based implementation of a sub-item control
		//
		// The control will use an internal implementation of a sub-item control that can be customized
		// through events.
		//
		// \sa TODO: _IExplorerListViewEvents::
		//[helpstring("The control will use an internal implementation of a sub-item control that can be customized through events.")]
		//sicUseEvents = -1,
		/// \brief A pre-defined sub-item control will be used to provide a multi-line text box for in-place editing
		///
		/// The control will use a pre-defined sub-item control that provides a multi-line text box for
		/// in-place editing.
		[helpstring("The control will use a pre-defined sub-item control that provides a multi-line text box for in-place editing.")]
		sicMultiLineText = 1,
		// \brief A pre-defined sub-item control will be used to provide a text box for in-place editing of lists
		//
		// The control will use a pre-defined sub-item control that provides a single-line text box for
		// in-place editing. The text box auto-separates words with a semicolon.
		//[helpstring("The control will use a pre-defined sub-item control that provides a single-line text box for in-place editing. The text box auto-separates words with a semicolon.")]
		//sicMultiValueText = 2,
		/// \brief A pre-defined sub-item control will be used to draw the sub-item as a percent bar
		///
		/// The control will use a pre-defined sub-item control that draws the sub-item as a percent bar.
		/// Windows Explorer uses this sub-item control to display the percentage of used space on a drive.
		///
		/// \remarks This sub-item control can only be used for visual representation of a sub-item.
		///
		// \sa sicProgressBar
		[helpstring("The control will use a pre-defined sub-item control that draws it as a percent bar. Windows Explorer uses this control to display the percentage of used space on a drive. This sub-item control can only be used for visual representation of a sub-item.")]
		sicPercentBar = 3,
		// \brief A pre-defined sub-item control will be used to draw the sub-item as a progress bar
		//
		// The control will use a pre-defined sub-item control that draws the sub-item as a progress bar.
		//
		// \remarks This sub-item control can only be used for visual representation of a sub-item.
		//
		// \sa sicPercentBar
		//[helpstring("The control will use a pre-defined sub-item control that draws the sub-item as a progress bar. This sub-item control can only be used for visual representation of a sub-item.")]
		//sicProgressBar = 4,
		/// \brief A pre-defined sub-item control will be used to draw the sub-item as stars for rating
		///
		/// The control will use a pre-defined sub-item control that draws the sub-item as stars for rating.
		/// Windows Explorer uses this sub-item control to display user ratings for media files.
		[helpstring("The control will use a pre-defined sub-item control that draws the sub-item as stars for rating. Windows Explorer uses this sub-item control to display user ratings for media files.")]
		sicRating = 5,
		/// \brief A pre-defined sub-item control will be used to draw the sub-item as normal text
		///
		/// The control will use a pre-defined sub-item control that draws the sub-item as normal, single-line
		/// text. For in-place editing, a single-line text box will be used.
		[helpstring("The control will use a pre-defined sub-item control that draws the sub-item as normal, single-line text. For in-place editing, a single-line text box will be used.")]
		sicText = 6,
		// \brief TODO
		//
		// TODO
		//[helpstring("TODO")]
		//sicIconList = 7,
		/// \brief A pre-defined sub-item control will be used to draw the sub-item as a boolean value
		///
		/// The control will use a pre-defined sub-item control that draws the sub-item as a boolean value,
		/// for instance "Yes" or "No". For in-place editing, a drop-down list will be used.
		///
		/// \remarks Windows does not seem to make a difference between \c sicBooleanCheckMark and
		///          \c sicCheckboxDropList.
		[helpstring("The control will use a pre-defined sub-item control that draws the sub-item as a boolean value, e.g. 'Yes' and 'No'. For in-place editing, a drop-down list will be used. Windows does not seem to handle 'sicCheckboxDropList' differently.")]
		sicBooleanCheckMark = 8,
		/// \brief A pre-defined sub-item control will be used to provide a date-time picker for in-place editing
		///
		/// The control will use a pre-defined sub-item control that provides a date-time picker for in-place
		/// editing.
		///
		/// \remarks This sub-item control can only be used for in-place editing a sub-item.
		[helpstring("The control will use a pre-defined sub-item control that provides a date-time picker for in-place editing. This sub-item control can only be used for in-place editing a sub-item.")]
		sicCalendar = 9,
		/// \brief A pre-defined sub-item control will be used to draw the sub-item as a boolean value
		///
		/// The control will use a pre-defined sub-item control that draws the sub-item as a boolean value,
		/// for instance "Yes" or "No". For in-place editing, a drop-down list will be used.
		///
		/// \remarks Windows does not seem to make a difference between \c sicBooleanCheckMark and
		///          \c sicCheckboxDropList.
		[helpstring("The control will use a pre-defined sub-item control that draws the sub-item as a boolean value, e.g. 'Yes' and 'No'. For in-place editing, a drop-down list will be used. Windows does not seem to handle 'sicBooleanCheckMark' differently.")]
		sicCheckboxDropList = 10,
		/// \brief A pre-defined sub-item control will be used to provide a drop-down combo box for in-place editing
		///
		/// The control will use a pre-defined sub-item control that provides a drop-down combo box for
		/// in-place editing.
		///
		/// \remarks This sub-item control can only be used for in-place editing a sub-item.
		[helpstring("The control will use a pre-defined sub-item control that provides a drop-down combo box for in-place editing. This sub-item control can only be used for in-place editing a sub-item.")]
		sicDropList = 11,
		/// \brief A pre-defined sub-item control will be used to represent the sub-item as a hyperlink
		///
		/// The control will use a pre-defined sub-item control that parses the sub-item and displays it as a
		/// hyperlink. The sub-item value should have the following form:\n
		/// <i>Some text</i> &lt;a id=&quot;<i>verb</i>&quot;&gt;<i>link text</i>&lt;/a&gt;\n
		/// The specified verb will be passed to the \c InvokeVerbFromSubItemControl event.
		///
		/// \remarks This sub-item control can only be used for visual representation of a sub-item.
		///
		/// \sa _IExplorerListViewEvents::InvokeVerbFromSubItemControl
		[helpstring("The control will use a pre-defined sub-item control that parses the sub-item and displays it as a hyperlink. This sub-item control can only be used for visual representation of a sub-item.")]
		sicHyperlink = 12
	} SubItemControlConstants;

	/// \brief <em>Constants used to specify the type of sub-item control requested</em>
	///
	/// \sa _IExplorerListViewEvents::GetSubItemControl, _IExplorerListViewEvents::ConfigureSubItemControl
	[helpstring("Constants used to specify the type of sub-item control requested.")]
	typedef enum SubItemControlKindConstants {
		/// \brief The control requests a visual representation of the sub-item
		///
		/// The event has been raised to request a sub-item control that provides a visual representation of
		/// the sub-item.
		[helpstring("The event has been raised to request a sub-item control that provides a visual representation of the sub-item.")]
		sickVisualRepresentation,
		/// \brief The control requests in-place editing functionality for the sub-item
		///
		/// The event has been raised to request a sub-item control that provides in-place editing
		/// functionality for the sub-item.
		[helpstring("The event has been raised to request a sub-item control that provides in-place editing functionality for the sub-item.")]
		sickInPlaceEditing
	} SubItemControlKindConstants;
	
	/// \brief <em>Constants used to specify how edit-mode for a sub-item has been entered</em>
	///
	/// \sa _IExplorerListViewEvents::GetSubItemControl, _IExplorerListViewEvents::ConfigureSubItemControl,
	///     _IExplorerListViewEvents::EndSubItemEdit, _IExplorerListViewEvents::CancelSubItemEdit
	[helpstring("Constants used to specify how edit-mode for a sub-item has been entered.")]
	typedef enum SubItemEditModeConstants {
		/// \brief Edit mode is not being entered
		///
		/// Label-edit mode is not being entered, the event's \c controlKind parameter is set to
		/// \c sickVisualRepresentation.
		[helpstring("Label-edit mode is not being entered, the event's 'controlKind' parameter is set to 'sickVisualRepresentation'.")]
		siemNotSpecified = -2,
		/// \brief Edit mode has been entered by moving the mouse cursor over the sub-item
		///
		/// Label-edit mode has been entered (or is being entered) because the user moved the mouse cursor over
		/// the sub-item.
		[helpstring("Label-edit mode has been entered (or is being entered) because the user moved the mouse cursor over the sub-item.")]
		siemMouseHover = 0,
		/// \brief Edit mode has been entered by clicking the sub-item
		///
		/// Label-edit mode has been entered (or is being entered) because the user clicked the sub-item.
		[helpstring("Label-edit mode has been entered (or is being entered) because the user clicked the sub-item.")]
		siemClick = 1
	} SubItemEditModeConstants;

	/// \brief <em>Constants used with the \c TextParsingFlags properties</em>
	///
	/// \sa IExplorerListView::GroupTextParsingFlags, IListViewColumn::TextParsingFlags
	[helpstring("Constants used with the 'TextParsingFlags' properties.")]
	typedef enum TextParsingFunctionConstants {
		/// \brief Retrieve or set the options for the \c CompareString function
		///
		/// Retrieve or set the options that are applied when calling the \c CompareString function. This
		/// function is called if sorting by the \c sobText criterion and a locale identifier has been
		/// specified.
		///
		/// \remarks See the documentation of \c CompareString for valid options. The specified options are
		///          passed to the \c dwCmpFlags parameter of \c CompareString.
		///
		/// \sa <a href="https://msdn.microsoft.com/en-us/library/dd317759.aspx">CompareString</a>,
		///     SortByConstants
		[helpstring("Retrieve or set the options that are applied when calling the 'CompareString' function. This function is called if sorting by the 'sobText' criterion and a locale identifier has been specified.")]
		tpfCompareString,
		/// \brief Retrieve or set the options for the \c VarI8FromStr, \c VarR8FromStr, \c VarDateFromStr and \c VarCyFromStr functions
		///
		/// Retrieve or set the options that are applied when calling the \c VarI8FromStr, \c VarR8FromStr,
		/// \c VarDateFromStr and \c VarCyFromStr functions. These functions are called if sorting by the
		/// \c sobNumericIntText, \c sobNumericFloatText, \c sobDateTimeText or \c sobCurrencyText criterion:
		/// - \c sobNumericIntText: \c VarI8FromStr is used to parse the text into an integer value.
		/// - \c sobNumericFloatText: \c VarR8FromStr is used to parse the text into a floating point value.
		/// - \c sobDateTimeText: \c VarDateFromStr is used to parse the text into a date-time value.
		/// - \c sobCurrencyText: \c VarCyFromStr is used to parse the text into a currency value.
		///
		/// \remarks See the documentation of \c VarI8FromStr, \c VarR8FromStr, \c VarDateFromStr and
		///          \c VarCyFromStr for valid options. The specified options are passed to the \c dwFlags
		///          parameters of the functions.
		///
		/// \sa <a href="https://msdn.microsoft.com/en-us/library/ms644510.aspx">VarI8FromStr</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms221331.aspx">VarR8FromStr</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms221395.aspx">VarDateFromStr</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms221582.aspx">VarCyFromStr</a>,
		///     SortByConstants
		[helpstring("Retrieve or set the options that are applied when calling the 'VarI8FromStr', 'VarR8FromStr', 'VarDateFromStr' and 'VarCyFromStr' functions. These functions are called if sorting by 'sobNumeric*Text', 'sobDateTimeText' or 'sobCurrencyText'.")]
		tpfVarFromStr
	} TextParsingFunctionConstants;

	/// \brief <em>Constants used with the \c ToolTips property</em>
	///
	/// \sa IExplorerListView::ToolTips
	[helpstring("Constants used with the 'ToolTips' property. They can be combined.")]
	typedef enum ToolTipsConstants {
		/// \brief Display label tips in 'Icons' and 'Tiles' view only
		///
		/// \remarks With comctl32.dll version 6.10 label tips don't work in 'Tiles' and 'Extended Tiles' view.
		///
		/// \sa IExplorerListView::View
		[helpstring("The control displays tooltips for partially hidden item labels in 'Icons' and 'Tiles' view only. With comctl32.dll version 6.10 label tips don't work in 'Tiles' and 'Extended Tiles' view.")]
		ttLabelTipsIconsAndTilesOnly = 0,
		/// \brief Display label tips in any view
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.\n
		///          With comctl32.dll version 6.10 label tips don't work in 'Tiles' and 'Extended Tiles' view.
		///
		/// \sa IExplorerListView::View
		[helpstring("The control displays tooltips for partially hidden (sub-)item labels in any view. Requires comctl32.dll version 5.80 or higher. With comctl32.dll version 6.10 label tips don't work in 'Tiles' and 'Extended Tiles' view.")]
		ttLabelTipsAlways = 1,
		/// \brief Display per-item tooltips (so-called info tips) and fire the \c ItemGetInfoTipText event
		///
		/// \sa _IExplorerListViewEvents::ItemGetInfoTipText
		[helpstring("The control displays per-item tooltips (so-called info tips) and fires the 'ItemGetInfoTipText' event.")]
		ttInfoTips = 2
	} ToolTipsConstants;

	/// \brief <em>Flags used with the \c UnderlinedItems property</em>
	///
	/// \sa IExplorerListView::UnderlinedItems
	[helpstring("Flags used with the 'UnderlinedItems' property. They can be combined.")]
	typedef enum UnderlinedItemsConstants {
		/// \brief Hot items, that may be activated, will be underlined
		///
		/// \remarks You should set the \c ItemActivationMode property to \c iamOneSingleClick or
		///          \c iamTwoSingleClicks, if you want to set this flag.
		///
		/// \sa IExplorerListView::HotItem, IExplorerListView::ItemActivationMode, ItemActivationModeConstants
		[helpstring("Hot items, that may be activated, will be underlined. 'ItemActivationMode' should be set to 'iamOneSingleClick' or 'iamTwoSingleClicks'.")]
		uiHot = 1,
		/// \brief Non-hot items, that may be activated, will be underlined
		///
		/// \remarks You should set the \c ItemActivationMode property to \c iamTwoSingleClicks, if you
		///          want to set this flag.
		///
		/// \sa IExplorerListView::ItemActivationMode, ItemActivationModeConstants
		[helpstring("Non-hot items, that may be activated, will be underlined. 'ItemActivationMode' should be set to 'iamTwoSingleClicks'.")]
		uiCold = 2
	} UnderlinedItemsConstants;

	/// \brief <em>Constants used with the \c View property</em>
	///
	/// \sa IExplorerListView::View
	[helpstring("Constants used with the 'View' property.")]
	typedef enum ViewConstants {
		/// \brief Items are displayed with large icons
		[helpstring("Items are displayed with large icons.")]
		vIcons,
		/// \brief Items are displayed with small icons
		[helpstring("Items are displayed with small icons.")]
		vSmallIcons,
		/// \brief Items are displayed with small icons as a list
		[helpstring("Items are displayed with small icons as a list.")]
		vList,
		/// \brief Items are displayed with small icons in a table that can consist of multiple columns containing more details
		[helpstring("Items are displayed with small icons in a table that can consist of multiple columns containing more details.")]
		vDetails,
		/// \brief Items are displayed with extra large icons and some details
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa vExtendedTiles, IListViewItem::TileViewColumns
		[helpstring("Items are displayed with extra large icons and some details. Requires comctl32.dll version 6.0 or higher.")]
		vTiles,
		/// \brief Items are displayed with large icons and some details
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa vTiles, IListViewItem::TileViewColumns
		[helpstring("Items are displayed with large icons and some details. Requires comctl32.dll version 6.10 or higher.")]
		vExtendedTiles
	} ViewConstants;


	/// \brief <em>Describes an image that failed to draw</em>
	///
	/// \sa _IExplorerListViewEvents::ItemAsynchronousDrawFailed,
	///     _IExplorerListViewEvents::GroupAsynchronousDrawFailed
	// NOTE: If we change the UUID, we also need to update _IExplorerListViewEvents.h!
	[helpstring("Describes an image that failed to draw."), uuid(2A0B5154-15A3-4bc1-8B39-1A6774C74CE3)]
	typedef struct FAILEDIMAGEDETAILS
	{
		/// \brief <em>Specifies the handle of the imagelist that contains the image</em>
		[helpstring("Specifies the handle of the imagelist that contains the image.")]
		OLE_HANDLE hImageList;
		/// \brief <em>Specifies the zero-based index of the image within the imagelist specified by \c hImageList</em>
		///
		/// \sa hImageList, OverlayIndex
		[helpstring("Specifies the zero-based index of the image within the imagelist specified by 'hImageList'.")]
		LONG IconIndex;
		/// \brief <em>Specifies the handle of the device context that the image should be drawn to</em>
		[helpstring("Specifies the handle of the device context that the image should be drawn to.")]
		OLE_HANDLE hDC;
		/// \brief <em>Specifies the x-coordinate (in pixels) of the position in the device context specified by \c hDC at which the image should have been drawn</em>
		///
		/// \sa hDC
		[helpstring("Specifies the x-coordinate (in pixels) of the position in the device context specified by 'hDC' at which the image should have been drawn.")]
		OLE_XPOS_PIXELS TargetPositionX;
		/// \brief <em>Specifies the y-coordinate (in pixels) of the position in the device context specified by \c hDC at which the image should have been drawn</em>
		///
		/// \sa hDC
		[helpstring("Specifies the y-coordinate (in pixels) of the position in the device context specified by 'hDC' at which the image should have been drawn.")]
		OLE_YPOS_PIXELS TargetPositionY;
		/// \brief <em>Specifies the x-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself</em>
		///
		/// \sa SectionToDrawTop, SectionToDrawWidth, SectionToDrawHeight
		[helpstring("Specifies the x-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself.")]
		OLE_XPOS_PIXELS SectionToDrawLeft;
		/// \brief <em>Specifies the y-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself</em>
		///
		/// \sa SectionToDrawLeft, SectionToDrawWidth, SectionToDrawHeight
		[helpstring("Specifies the y-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself.")]
		OLE_YPOS_PIXELS SectionToDrawTop;
		/// \brief <em>Specifies the width (in pixels) of the image section to draw</em>
		///
		/// \remarks If \c SectionToDrawLeft and \c SectionToDrawTop are both zero, then the entire remaining
		///          section of the image is drawn.
		///
		/// \sa SectionToDrawLeft, SectionToDrawTop, SectionToDrawHeight
		[helpstring("Specifies the width (in pixels) of the image section to draw.")]
		OLE_XSIZE_PIXELS SectionToDrawWidth;
		/// \brief <em>Specifies the height (in pixels) of the image section to draw</em>
		///
		/// \remarks If \c SectionToDrawLeft and \c SectionToDrawTop are both zero, then the entire remaining
		///          section of the image is drawn.
		///
		/// \sa SectionToDrawLeft, SectionToDrawTop, SectionToDrawWidth
		[helpstring("Specifies the height (in pixels) of the image section to draw.")]
		OLE_YSIZE_PIXELS SectionToDrawHeight;
		/// \brief <em>Specifies the background color of the image to draw</em>
		///
		/// Specifies the background color of the image to draw. The value is a RGB color. If set to -1, the
		/// image is drawn transparently. If set to \c 0xFF000000, the image is drawn using the imagelist
		/// background color.
		///
		/// \sa ForeColor, EffectColor
		[helpstring("Specifies the background color of the image to draw.")]
		LONG BackColor;
		/// \brief <em>Specifies the foreground color of the image to draw</em>
		///
		/// Specifies the foreground color, i. e. the color that the image is blended with, of the image to
		/// draw. The value is a RGB color. If set to -1, the image is blended with the color of the
		/// destination device context (specified by \c hDC). If set to \c 0xFF000000, the is blended with the
		/// system highlight color.
		///
		/// \remarks This value is used only if the \c DrawingStyle member includes \c dsBlend25 or
		///          \c dsBlend50.
		///
		/// \sa BackColor, hDC, EffectColor
		[helpstring("Specifies the foreground color of the image to draw.")]
		LONG ForeColor;
		/// \brief <em>Specifies the drawing style to use</em>
		///
		/// Specifies the drawing style to use. Any of the values defined by the \c ImageDrawingStyleConstants
		/// enumeration is valid.
		///
		/// \sa DrawingEffects, ImageDrawingStyleConstants
		[helpstring("Specifies the drawing style to use.")]
		ImageDrawingStyleConstants DrawingStyle;
		/// \brief <em>Specifies the one-based index of the overlay image to draw</em>
		///
		/// Specifies the one-based index of the overlay image within the imagelist specified by \c hImageList
		/// that is drawn over the image specified by \c IconIndex. An index of 0 means that no overlay is
		/// drawn.
		///
		/// \sa hImageList, IconIndex
		[helpstring("Specifies the one-based index of the overlay image to draw.")]
		LONG OverlayIndex;
		/// \brief <em>Specifies the raster operation code to use</em>
		///
		/// Specifies the raster operation code to use in the drawing operation, if the \c DrawingStyle member
		/// includes \c idsUseRasterOperationCode.\n
		/// The raster operation code defines how the color data for the source rectangle will be combined with
		/// the color data for the destination rectangle to achieve the final color.
		///
		/// \sa hImageList, IconIndex
		[helpstring("Specifies the raster operation code to use.")]
		LONG RasterOperationCode;
		/// \brief <em>Specifies the drawing effects to apply</em>
		///
		/// Specifies the drawing effects to apply. Any of the values defined by the
		/// \c ImageDrawingEffectsConstants enumeration is valid.
		///
		/// \sa DrawingStyle, ImageDrawingEffectsConstants
		[helpstring("Specifies the drawing effects to apply.")]
		ImageDrawingEffectsConstants DrawingEffects;
		/// \brief <em>Specifies the value of the alpha channel to use with the \c ideAlphaBlending effect</em>
		///
		/// Specifies the value of the alpha channel to use with the \c ideAlphaBlending effect. This value can
		/// be from 0 to 255, with 0 being completely transparent, and 255 being completely opaque.
		///
		/// \sa DrawingEffects
		[helpstring("Specifies the value of the alpha channel to use with the 'ideAlphaBlending' effect.")]
		BYTE AlphaChannel;
		/// \brief <em>Specifies the color that is used with the \c ideGlow and \c ideShadow effects</em>
		///
		/// Specifies the color that is used with the \c ideGlow and \c ideShadow effects. The value is a RGB
		/// color.
		///
		/// \sa DrawingEffects, BackColor, ForeColor
		[helpstring("Specifies the color that is used with the 'ideGlow' and 'ideShadow' effects.")]
		LONG EffectColor;
	} FAILEDIMAGEDETAILS;

	/// \brief <em>Holds the coordinates of a rectangle's opposing corners</em>
	///
	/// \sa _IExplorerListViewEvents::CustomDraw, _IExplorerListViewEvents::GroupCustomDraw,
	///     _IExplorerListViewEvents::HeaderCustomDraw, _IExplorerListViewEvents::OwnerDrawItem
	// NOTE: If we change the UUID, we also need to update _IExplorerListViewEvents_CP.h!
	[helpstring("Holds a rectangle's position and size."), uuid(4C7D8A62-0F3A-41a7-BD58-FF25497D8451)]
	typedef struct RECTANGLE
	{
		/// \brief <em>Holds the position of the rectangle's left border in pixels</em>
		[helpstring("Holds the position of the rectangle's left border in pixels.")]
		OLE_XPOS_PIXELS Left;
		/// \brief <em>Holds the position of the rectangle's upper border in pixels</em>
		[helpstring("Holds the position of the rectangle's upper border in pixels.")]
		OLE_YPOS_PIXELS Top;
		/// \brief <em>Holds the position of the rectangle's right border in pixels</em>
		[helpstring("Holds the position of the rectangle's right border in pixels.")]
		OLE_XPOS_PIXELS Right;
		/// \brief <em>Holds the position of the rectangle's lower border in pixels</em>
		[helpstring("Holds the position of the rectangle's lower border in pixels.")]
		OLE_YPOS_PIXELS Bottom;
	} RECTANGLE;

	/// \brief <em>Holds the properties of a sub-item in 'Tiles' and 'Extended Tiles' view mode</em>
	///
	/// \sa IListViewItem::TileViewColumns, IExplorerListView::View,
	///     _IExplorerListViewEvents::ItemGetDisplayInfo
	// NOTE: If we change the UUID, we also need to update _IExplorerListViewEvents_CP.h!
	[helpstring("Holds the properties of a sub-item in 'Tiles' and 'Extended Tiles' view mode."), uuid(F8919B15-0236-4d2c-BDCA-3F0C832ACD8A)]
	typedef struct TILEVIEWSUBITEM
	{
		/// \brief <em>Holds the zero-based index of the column containing the sub-item's text</em>
		///
		/// In normal, non-virtual mode, 'Tiles' view is based on columns and works pretty much like 'Details'
		/// view mode. The sub-items in 'Tiles' view mode are simply mapped to listview columns. \c ColumnIndex
		/// specifies the zero-based index of the column to which the sub-item shall be mapped.\n
		/// In virtual mode, 'Tiles' view works independently of columns. \c ColumnIndex just identifies the
		/// sub-item then.
		///
		/// \sa IExplorerListView::View, _IExplorerListViewEvents::ItemGetDisplayInfo
		[helpstring("Holds the one-based index of the column containing the sub-item's text.")]
		LONG ColumnIndex;
		/// \brief <em>If \c True, the sub-item is displayed in a new column of details in 'Extended Tiles' view mode</em>
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("If 'True', the sub-item is displayed in a new column of details in 'Extended Tiles' view mode. Requires comctl32.dll version 6.10 or higher.")]
		VARIANT_BOOL BeginNewColumn;
		/// \brief <em>If \c True, the sub-item is displayed in multiple lines if necessary</em>
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("If 'True', the sub-item is displayed in multiple lines if necessary. Requires comctl32.dll version 6.10 or higher.")]
		VARIANT_BOOL WrapToMultipleLines;
		/// \brief <em>If \c True, the sub-item may fill the remainder of the tile area in 'Extended Tiles' view mode</em>
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("If 'True', the sub-item may fill the remainder of the tile area in 'Extended Tiles' view mode. Requires comctl32.dll version 6.10 or higher.")]
		VARIANT_BOOL FillRemainder;
		/// \brief <em>If \c True, the sub-item will be displayed without title in 'Extended Tiles' view mode</em>
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("If 'True', the sub-item will be displayed without title in 'Extended Tiles' view mode. Requires comctl32.dll version 6.10 or higher.")]
		VARIANT_BOOL NoTitle;
	} TILEVIEWSUBITEM;


	/// \interface IVirtualListViewWorkArea
	/// \brief <em>Wraps a not existing working area</em>
	///
	/// This interface is a wrapper around a working area that does not yet exist within the control.
	///
	/// \sa _IVirtualListViewWorkAreaEvents, IListViewWorkArea, _IExplorerListViewEvents
	[
		object,
		uuid(828181CC-295C-4503-AC53-FB40A7E9D925),
		dual,
		nonextensible,
		helpstring("IVirtualListViewWorkArea interface"),
		pointer_default(unique)
	]
	interface IVirtualListViewWorkArea : IDispatch
	{
		/// \brief <em>Retrieves the working area's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this working area.
		///
		/// \remarks This is the default property of the \c IVirtualListViewWorkArea interface.\n
		///          This property is read-only.
		[propget, id(DISPID_VLVWA_INDEX), helpstring("Retrieves the working area's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);

		/// \brief <em>Retrieves the working area's rectangle</em>
		///
		/// Retrieves the working area's bounding rectangle (in pixels) within the control's client area.
		///
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		[id(DISPID_VLVWA_GETRECTANGLE), helpstring("Retrieves the working area's bounding rectangle (in pixels) within the control's client area.")]
		HRESULT GetRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
	}


	/// \interface IVirtualListViewWorkAreas
	/// \brief <em>Manages a collection of \c VirtualListViewWorkArea objects</em>
	///
	/// This interface provides easy access to collections of \c VirtualListViewWorkArea objects. A
	/// \c VirtualListViewWorkAreas object is used to group working areas that do not yet exist within
	/// the control.
	///
	/// \sa _IVirtualListViewWorkAreasEvents, IVirtualListViewWorkArea, IExplorerListView
	[
		object,
		uuid(423D5E8A-933B-4716-B700-6A535204472E),
		dual,
		nonextensible,
		helpstring("IVirtualListViewWorkAreas interface"),
		pointer_default(unique)
	]
	interface IVirtualListViewWorkAreas : IDispatch
	{
		/// \brief <em>Retrieves a \c VirtualListViewWorkArea object from the collection</em>
		///
		/// Retrieves a \c VirtualListViewWorkArea object from the collection that wraps the working area
		/// identified by \c workAreaIndex.
		///
		/// \param[in] workAreaIndex A value that identifies the listview working area to be retrieved.
		///
		/// \remarks This is the default property of the \c IVirtualListViewWorkAreas interface.\n
		///          This property is read-only.
		///
		/// \sa IVirtualListViewWorkArea
		[propget, id(DISPID_VLVWAS_ITEM), helpstring("Retrieves a 'VirtualListViewWorkArea' object from the collection that wraps the working area identified by 'workAreaIndex'."), nonbrowsable]
		HRESULT Item([in] LONG workAreaIndex, [out, retval] IVirtualListViewWorkArea** ppWorkArea);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c VirtualListViewWorkArea
		///   objects managed by this collection object. This iterator is used by Visual Basic's
		///   \c For...Each construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_VLVWAS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Counts the working areas in the collection</em>
		///
		/// Retrieves the number of \c VirtualListViewWorkArea objects in the collection.
		///
		/// \return The number of elements in the collection.
		[id(DISPID_VLVWAS_COUNT), helpstring("Retrieves the number of 'VirtualListViewWorkArea' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
	}


	/// \interface IListViewWorkArea
	/// \brief <em>Wraps an existing working area</em>
	///
	/// This interface is a wrapper around a working area that - unlike a working area wrapped by
	/// \c IVirtualListViewWorkArea - really exists within the control.
	///
	/// \sa _IListViewWorkAreaEvents, IVirtualListViewWorkArea, IListViewWorkAreas, IExplorerListView,
	///     _IExplorerListViewEvents
	[
		object,
		uuid(19E1F119-28D5-4d88-91CC-6F936814B19F),
		dual,
		nonextensible,
		helpstring("IListViewWorkArea interface"),
		pointer_default(unique)
	]
	interface IListViewWorkArea : IDispatch
	{
		/// \brief <em>Retrieves the working area's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this working area.
		///
		/// \remarks Adding or removing working areas changes other working areas' indexes.\n
		///          This is the default property of the \c IListViewWorkArea interface.\n
		///          This property is read-only.
		[propget, id(DISPID_LVWA_INDEX), helpstring("Retrieves the working area's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the working area's items</em>
		///
		/// Retrieves a collection object wrapping the listview items in the working area.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IListViewItems
		[propget, id(DISPID_LVWA_LISTITEMS), helpstring("Retrieves a collection object wrapping the listview items in the working area."), nonbrowsable]
		HRESULT ListItems([out, retval] IListViewItems** ppItems);

		/// \brief <em>Retrieves the working area's rectangle</em>
		///
		/// Retrieves the working area's bounding rectangle (in pixels) within the control's client area.
		///
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \sa SetRectangle
		[id(DISPID_LVWA_GETRECTANGLE), helpstring("Retrieves the working area's bounding rectangle (in pixels) within the control's client area.")]
		HRESULT GetRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
		/// \brief <em>Sets the working area's rectangle</em>
		///
		/// Sets the working area's bounding rectangle (in pixels) within the control's client area.
		///
		/// \param[in] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///            relative to the control's upper-left corner.
		/// \param[in] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///            relative to the control's upper-left corner.
		/// \param[in] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///            relative to the control's upper-left corner.
		/// \param[in] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///            relative to the control's upper-left corner.
		///
		/// \sa GetRectangle
		[id(DISPID_LVWA_SETRECTANGLE), helpstring("Sets the working area's bounding rectangle (in pixels) within the control's client area.")]
		HRESULT SetRectangle([in] OLE_XPOS_PIXELS xLeft, [in] OLE_YPOS_PIXELS yTop, [in] OLE_XPOS_PIXELS xRight, [in] OLE_YPOS_PIXELS yBottom);
	}


	/// \interface IListViewWorkAreas
	/// \brief <em>Manages a collection of \c ListViewWorkArea objects</em>
	///
	/// This interface provides easy access to collections of \c ListViewWorkArea objects. A
	/// \c ListViewWorkAreas object is used to group the control's working areas.
	///
	/// \sa _IListViewWorkAreasEvents, IListViewWorkArea, IExplorerListView
	[
		object,
		uuid(D1F4094E-331E-49c4-9B66-8CF4DB44069B),
		dual,
		nonextensible,
		helpstring("IListViewWorkAreas interface"),
		pointer_default(unique)
	]
	interface IListViewWorkAreas : IDispatch
	{
		/// \brief <em>Retrieves a \c ListViewWorkArea object from the collection</em>
		///
		/// Retrieves a \c ListViewWorkArea object from the collection that wraps the working area identified
		/// by \c workAreaIndex.
		///
		/// \param[in] workAreaIndex A value that identifies the listview working area to be retrieved.
		///
		/// \remarks This is the default property of the \c IListViewWorkAreas interface.\n
		///          This property is read-only.
		///
		/// \sa IListViewWorkArea, Add, Remove
		[propget, id(DISPID_LVWAS_ITEM), helpstring("Retrieves a 'ListViewWorkArea' object from the collection that wraps the working area identified by 'workAreaIndex'."), nonbrowsable]
		HRESULT Item([in] LONG workAreaIndex, [out, retval] IListViewWorkArea** ppWorkArea);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ListViewWorkArea objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_LVWAS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a working area to the listview</em>
		///
		/// Adds a working area with the specified properties at the specified position in the control
		/// and returns a \c ListViewWorkArea object wrapping the inserted working area.
		///
		/// \param[in] xLeft The x-coordinate (in pixels) of the left border of the new working area's
		///            bounding rectangle relative to the control's upper-left corner.
		/// \param[in] yTop The y-coordinate (in pixels) of the top border of the new working area's
		///            bounding rectangle relative to the control's upper-left corner.
		/// \param[in] xRight The x-coordinate (in pixels) of the right border of the new working area's
		///            bounding rectangle relative to the control's upper-left corner.
		/// \param[in] yBottom The y-coordinate (in pixels) of the bottom border of the new working area's
		///            bounding rectangle relative to the control's upper-left corner.
		/// \param[in] insertAt The new working area's zero-based index. If set to -1, the working area
		///            will be inserted as the last working area.
		///
		/// \return The inserted working area.
		///
		/// \remarks The maximum number of working areas is 16.
		///
		/// \sa Count, Remove, RemoveAll, IListViewWorkArea::SetRectangle
		[id(DISPID_LVWAS_ADD), helpstring("Adds a new working area with the specified properties.")]
		HRESULT Add([in] OLE_XPOS_PIXELS xLeft, [in] OLE_YPOS_PIXELS yTop, [in] OLE_XPOS_PIXELS xRight, [in] OLE_YPOS_PIXELS yBottom, [in, defaultvalue(-1)] LONG insertAt, [out, retval] IListViewWorkArea** ppAddedWorkArea);
		/// \brief <em>Counts the working areas in the collection</em>
		///
		/// Retrieves the number of \c ListViewWorkArea objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_LVWAS_COUNT), helpstring("Retrieves the number of 'ListViewWorkArea' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified working area in the collection from the listview</em>
		///
		/// \param[in] workAreaIndex A value that identifies the listview working area to be removed.
		///
		/// \sa Add, Count, RemoveAll
		[id(DISPID_LVWAS_REMOVE), helpstring("Removes the specified working area in the collection from the control.")]
		HRESULT Remove([in] LONG workAreaIndex);
		/// \brief <em>Removes all working areas in the collection from the listview</em>
		///
		/// \sa Add, Count, Remove
		[id(DISPID_LVWAS_REMOVEALL), helpstring("Removes all working areas in the collection from the control.")]
		HRESULT RemoveAll(void);
	}


	/// \interface IVirtualListViewColumn
	/// \brief <em>Wraps a not existing column</em>
	///
	/// This interface is a wrapper around a column that does not yet or not anymore exist within the
	/// control.
	///
	/// \sa _IVirtualListViewColumnEvents, IListViewColumn, _IExplorerListViewEvents
	[
		object,
		uuid(DDF929ED-077B-45c8-A780-3EA44C75459A),
		dual,
		nonextensible,
		helpstring("IVirtualListViewColumn interface"),
		pointer_default(unique)
	]
	interface IVirtualListViewColumn : IDispatch
	{
		/// \brief <em>Retrieves the column's alignment</em>
		///
		/// Retrieves the alignment of the column's caption and content. Any of the values defined by
		/// the \c AlignmentConstants enumeration is valid.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Caption, AlignmentConstants
		[propget, id(DISPID_VLVC_ALIGNMENT), helpstring("Retrieves the alignment of the column's caption and content.")]
		HRESULT Alignment([out, retval] AlignmentConstants* pValue);
		/// \brief <em>Retrieves the column caption's bitmap</em>
		///
		/// Retrieves the handle of the column's bitmap. If set to 0, the column's caption doesn't
		/// contain a bitmap.
		///
		/// \remarks The bitmap does NOT get destroyed automatically by the control.\n
		///          The \c SortArrow property must be set to \c saNone if you want to display a bitmap.\n
		///          This property is read-only.
		///
		/// \sa IconIndex, SortArrow, ImageOnRight
		[propget, id(DISPID_VLVC_BITMAPHANDLE), helpstring("Retrieves the handle of the column's bitmap."), nonbrowsable]
		HRESULT BitmapHandle([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the column's caption</em>
		///
		/// Retrieves the column's caption. The maximum number of characters in this text is 260. If set to
		/// \c vbNullString, the control will fire the \c HeaderItemGetDisplayInfo event each time this
		/// property's value is required.
		///
		/// \remarks This is the default property of the \c IVirtualListViewColumn interface.\n
		///          This property is read-only.
		///
		/// \sa _IExplorerListViewEvents::HeaderItemGetDisplayInfo
		[propget, id(DISPID_VLVC_CAPTION), helpstring("Retrieves the column's caption.")]
		HRESULT Caption([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves whether the column header is the control's caret column header</em>
		///
		/// Retrieves whether the column header will be or was the control's caret column header, i. e. it will
		/// have or had the focus. If it will be or was the caret column header, this property is set to
		/// \c True; otherwise it's set to \c False.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::CaretColumn
		[propget, id(DISPID_VLVC_CARET), helpstring("Retrieves whether the column header will be or was the current caret column header, i. e. it will have or had the focus. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the column's associated data</em>
		///
		/// Retrieves the \c Long value that will be or was associated with the column.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _IExplorerListViewEvents::FreeColumnData
		[propget, id(DISPID_VLVC_COLUMNDATA), helpstring("Retrieves the Long value associated with the column.")]
		HRESULT ColumnData([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the column's default width</em>
		///
		/// Retrieves the column's default width in pixels. This value is used when auto-sizing the column.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa MinimumWidth, Width, Resizable, IExplorerListView::ResizableColumns
		[propget, id(DISPID_VLVC_DEFAULTWIDTH), helpstring("Retrieves the column's default width in pixels. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DefaultWidth([out, retval] OLE_XSIZE_PIXELS* pValue);
		/// \brief <em>Retrieves the column's filter</em>
		///
		/// Retrieves the column's filter, which is displayed in the filterbar below the header control.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::ShowFilterBar
		[propget, id(DISPID_VLVC_FILTER), helpstring("Retrieves the column's filter, which is displayed in the filterbar below the header control. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT Filter([out, retval] VARIANT* pValue);
		/// \brief <em>Retrieves the column caption's icon</em>
		///
		/// Retrieves the zero-based index of the column's icon in the control's \c ilHeader imagelist. If set
		/// to -1, the control will fire the \c HeaderItemGetDisplayInfo event each time this property's value
		/// is required. If set to -2, the column's caption doesn't contain an icon.
		///
		/// \remarks The \c SortArrow property must be set to \c saNone if you want to display an icon.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::hImageList, BitmapHandle, ImageOnRight,
		///     _IExplorerListViewEvents::HeaderItemGetDisplayInfo, StateImageIndex, ImageListConstants
		[propget, id(DISPID_VLVC_ICONINDEX), helpstring("Retrieves the zero-based index of the column's icon in the control's 'ilHeader' imagelist."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the position of the column caption's image relative to the text</em>
		///
		/// Retrieves whether the column header's image is displayed to the right of the text. If this
		/// property is set to \c True, the image is displayed to the right, otherwise to the left of the
		/// column's caption text.
		///
		/// \remarks If the column's caption contains a bitmap as well as an icon, the bitmap always is
		///          displayed to the right of the text.\n
		///          This property is read-only.
		///
		/// \sa BitmapHandle, IconIndex, Caption
		[propget, id(DISPID_VLVC_IMAGEONRIGHT), helpstring("Retrieves whether the column header's image is displayed to the right of the text. If the column's caption contains a bitmap as well as an icon, the bitmap always is displayed to the right of the text.")]
		HRESULT ImageOnRight([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the column's minimum width</em>
		///
		/// Retrieves the column's minimum width in pixels.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa DefaultWidth, Width, Resizable, IExplorerListView::ResizableColumns,
		///     IExplorerListView::UseMinColumnWidths
		[propget, id(DISPID_VLVC_MINIMUMWIDTH), helpstring("Retrieves the column's minimum width in pixels. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT MinimumWidth([out, retval] OLE_XSIZE_PIXELS* pValue);
		/// \brief <em>Retrieves whether the column caption is drawn by the application instead of the control</em>
		///
		/// Retrieves whether your application draws this column header itself. If set to \c True, the control
		/// will fire the \c HeaderOwnerDrawItem event each time this column header must be drawn. If set to
		/// \c False, the control will draw this column header itself. In this case drawing can still be
		/// customized using the \c HeaderCustomDraw event.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::OwnerDrawn, _IExplorerListViewEvents::HeaderOwnerDrawItem,
		///     _IExplorerListViewEvents::HeaderCustomDraw
		[propget, id(DISPID_VLVC_OWNERDRAWN), helpstring("Retrieves whether your application draws this column header itself.")]
		HRESULT OwnerDrawn([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the column's zero-based position index</em>
		///
		/// Retrieves the column's current position as a zero-based index. The left-most column has position
		/// 0, the next one to the right has position 1 and so on.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IListViewColumns::Positions, ColumnIdentifierTypeConstants
		[propget, id(DISPID_VLVC_POSITION), helpstring("Retrieves the column's current position as a zero-based index.")]
		HRESULT Position([out, retval] LONG* pValue);
		/// \brief <em>Retrieves whether the column's width can be changed by the user</em>
		///
		/// Retrieves whether the column's width can be changed by the user. If set to \c True, the column's
		/// width can be changed; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Width, IExplorerListView::ResizableColumns
		[propget, id(DISPID_VLVC_RESIZABLE), helpstring("Retrieves whether the column's width can be changed by the user. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Resizable([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the column header contains a drop-down area</em>
		///
		/// Retrieves whether the column header contains a drop-down area. If the user clicks this drop-down
		/// area, you may display a popup window which lets the user configure the column.\n
		/// If set to \c True, a drop-down button is displayed in the column header; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa _IExplorerListViewEvents::ColumnDropDown, SortArrow
		[propget, id(DISPID_VLVC_SHOWDROPDOWNBUTTON), helpstring("Retrieves whether the column header contains a drop-down area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowDropDownButton([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the sort arrow displayed in the column's caption</em>
		///
		/// Retrieves the kind of sort arrow that is displayed next to the column's caption text. Any of the
		/// values defined by the \c SortArrowConstants enumeration is valid.
		///
		/// \remarks This property is read-only.
		///
		/// \sa BitmapHandle, IconIndex, Caption, ShowDropDownButton,
		///     IExplorerListView::ClickableColumnHeaders, IExplorerListView::SelectedColumn,
		///     SortArrowConstants
		[propget, id(DISPID_VLVC_SORTARROW), helpstring("Retrieves the kind of sort arrow that is displayed next to the column's caption text.")]
		HRESULT SortArrow([out, retval] SortArrowConstants* pValue);
		/// \brief <em>Retrieves the column header's state image</em>
		///
		/// Retrieves the one-based index of the column header's state image in the control's \c ilHeaderState
		/// imagelist. The state image is drawn next to the column header and usually a checkbox.\n
		/// If set to 0, the column's caption doesn't contain a state image.
		///
		/// \remarks Current versions of Windows support only two different state images.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::hImageList, IconIndex, ImageListConstants
		[propget, id(DISPID_VLVC_STATEIMAGEINDEX), helpstring("Retrieves the one-based index of the column header's state image in the control's 'ilHeaderState' imagelist. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT StateImageIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the column's current width</em>
		///
		/// Retrieves the column's width in pixels.
		///
		/// \remarks This property is read-only.
		///
		/// \sa MinimumWidth, DefaultWidth, Resizable, IExplorerListView::ResizableColumns,
		///     IExplorerListView::ShowHeaderChevron
		[propget, id(DISPID_VLVC_WIDTH), helpstring("Retrieves the column's width in pixels.")]
		HRESULT Width([out, retval] OLE_XSIZE_PIXELS* pValue);
	}


	/// \interface IListViewColumn
	/// \brief <em>Wraps an existing column</em>
	///
	/// This interface is a wrapper around a column that - unlike a column wrapped by
	/// \c IVirtualListViewColumn - really exists within the control.
	///
	/// \sa _IListViewColumnEvents, IVirtualListViewColumn, IListViewColumns, IExplorerListView,
	///     _IExplorerListViewEvents
	[
		object,
		uuid(26384898-00DF-4aa4-ADFC-C06619C1550C),
		dual,
		nonextensible,
		helpstring("IListViewColumn interface"),
		pointer_default(unique)
	]
	interface IListViewColumn : IDispatch
	{
		/// \brief <em>Specifies the column's alignment</em>
		///
		/// Retrieves or sets the alignment of the column's caption and content. Any of the values defined by
		/// the \c AlignmentConstants enumeration is valid.
		///
		/// \sa Caption, AlignmentConstants
		[propget, id(DISPID_LVC_ALIGNMENT), helpstring("Retrieves or sets the alignment of the column's caption and content.")]
		HRESULT Alignment([out, retval] AlignmentConstants* pValue);
		[propput, id(DISPID_LVC_ALIGNMENT), helpstring("Retrieves or sets the alignment of the column's caption and content.")]
		HRESULT Alignment([in] AlignmentConstants newValue);
		/// \brief <em>Specifies the column caption's bitmap</em>
		///
		/// Retrieves or sets the handle of the column's bitmap. If set to 0, the column's caption doesn't
		/// contain a bitmap. If set to -1 (-2), Windows' default down-arrow (up-arrow) is used.
		///
		/// \remarks The bitmap does NOT get destroyed automatically by the control. This also applies for the
		///          bitmaps that the control will load if this property is set to -1 or -2.\n
		///          The \c SortArrow property must be set to \c saNone if you want to display a bitmap.
		///
		/// \sa IconIndex, SortArrow, ImageOnRight
		[propget, id(DISPID_LVC_BITMAPHANDLE), helpstring("Retrieves or sets the handle of the column's bitmap."), nonbrowsable]
		HRESULT BitmapHandle([out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_LVC_BITMAPHANDLE), helpstring("Retrieves or sets the handle of the column's bitmap."), nonbrowsable]
		HRESULT BitmapHandle([in] OLE_HANDLE newValue);
		/// \brief <em>Specifies the column's caption</em>
		///
		/// Retrieves or sets the column's caption. The maximum number of characters in this text is 260. If
		/// set to \c vbNullString, the control will fire the \c HeaderItemGetDisplayInfo event each time this
		/// property's value is required.
		///
		/// \remarks This is the default property of the \c IListViewColumn interface.
		///
		/// \attention Due to a bug in Windows' \c SysHeader32 implementation, you should set the \c ColumnData
		///            property to a unique value if you want to set the \c Caption property to \c vbNullString
		///            or the \c IconIndex property to -1.
		///
		/// \sa _IExplorerListViewEvents::HeaderItemGetDisplayInfo, ColumnData, IconIndex
		[propget, id(DISPID_LVC_CAPTION), helpstring("Retrieves or sets the column's caption.")]
		HRESULT Caption([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVC_CAPTION), helpstring("Retrieves or sets the column's caption.")]
		HRESULT Caption([in] BSTR newValue);
		/// \brief <em>Retrieves whether the column header is the control's caret column header</em>
		///
		/// Retrieves whether the column header is the control's caret column header, i. e. it has the focus.
		/// If it is the caret column header, this property is set to \c True; otherwise it's set to \c False.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Selected, IExplorerListView::CaretColumn
		[propget, id(DISPID_LVC_CARET), helpstring("Retrieves whether the column header is the current caret column header, i. e. it has the focus. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies the column's associated data</em>
		///
		/// Retrieves or sets the \c Long value associated with the column. Use this property to associate
		/// any data with the column.
		///
		/// \attention Due to a bug in Windows' \c SysHeader32 implementation, you should set the \c ColumnData
		///            property to a unique value if you want to set the \c Caption property to \c vbNullString
		///            or the \c IconIndex property to -1.
		///
		/// \sa _IExplorerListViewEvents::FreeColumnData, Caption, IconIndex
		[propget, id(DISPID_LVC_COLUMNDATA), helpstring("Retrieves or sets the Long value associated with the column.")]
		HRESULT ColumnData([out, retval] LONG* pValue);
		[propput, id(DISPID_LVC_COLUMNDATA), helpstring("Retrieves or sets the Long value associated with the column.")]
		HRESULT ColumnData([in] LONG newValue);
		/// \brief <em>Specifies the column's default width</em>
		///
		/// Retrieves or sets the column's default width in pixels. This value is used when auto-sizing the
		/// column.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa MinimumWidth, IdealWidth, Width, Resizable, IExplorerListView::ResizableColumns
		[propget, id(DISPID_LVC_DEFAULTWIDTH), helpstring("Retrieves or sets the column's default width in pixels. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DefaultWidth([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_LVC_DEFAULTWIDTH), helpstring("Retrieves or sets the column's default width in pixels. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DefaultWidth([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Specifies the column's filter</em>
		///
		/// Retrieves or sets the column's filter, which is displayed in the filterbar below the header
		/// control. If set to \c Empty, the filter is cleared. If set to an integer value, the filter edit
		/// control displays an error if the user tries to enter a non-integer value. On Windows Vista, if set
		/// to a date value, the filter edit control is specialized to accept date values only.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa IListViewColumns::ClearAllFilters, IExplorerListView::ShowFilterBar
		[propget, id(DISPID_LVC_FILTER), helpstring("Retrieves or sets the column's filter, which is displayed in the filterbar below the header control. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT Filter([out, retval] VARIANT* pValue);
		[propput, id(DISPID_LVC_FILTER), helpstring("Retrieves or sets the column's filter, which is displayed in the filterbar below the header control. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT Filter([in] VARIANT newValue);
		/// \brief <em>Retrieves the column header's height</em>
		///
		/// Retrieves the column header's height in pixels.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Width, Left, Top, GetDropDownRectangle
		[propget, id(DISPID_LVC_HEIGHT), helpstring("Retrieves the column header's height in pixels.")]
		HRESULT Height([out, retval] OLE_YSIZE_PIXELS* pValue);
		/// \brief <em>Specifies the column caption's icon</em>
		///
		/// Retrieves or sets the zero-based index of the column's icon in the control's \c ilHeader imagelist.
		/// If set to -1, the control will fire the \c HeaderItemGetDisplayInfo event each time this property's
		/// value is required. If set to -2, the column's caption doesn't contain an icon.
		///
		/// \remarks The \c SortArrow property must be set to \c saNone if you want to display an icon.
		///
		/// \attention Due to a bug in Windows' \c SysHeader32 implementation, you should set the \c ColumnData
		///            property to a unique value if you want to set the \c Caption property to \c vbNullString
		///            or the \c IconIndex property to -1.
		///
		/// \sa IExplorerListView::hImageList, BitmapHandle, SortArrow, ImageOnRight,
		///     _IExplorerListViewEvents::HeaderItemGetDisplayInfo, ColumnData, Caption, StateImageIndex,
		///     ImageListConstants
		[propget, id(DISPID_LVC_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the column's icon in the control's 'ilHeader' imagelist."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVC_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the column's icon in the control's 'ilHeader' imagelist."), nonbrowsable]
		HRESULT IconIndex([in] LONG newValue);
		/// \brief <em>Retrieves the column's ID</em>
		///
		/// Retrieves an unique ID identifying this column.
		///
		/// \remarks A column's ID will never change.\n
		///          This property is read-only.
		///
		/// \sa Index, Position, ColumnIdentifierTypeConstants
		[propget, id(DISPID_LVC_ID), helpstring("Retrieves the column's unique ID.")]
		HRESULT ID([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the column's ideal width</em>
		///
		/// Retrieves the column's ideal width in pixels. The ideal width is the width, to which the column
		/// would be resized if it was auto-sized.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa DefaultWidth, MinimumWidth, Width, Resizable, IExplorerListView::ResizableColumns
		[propget, id(DISPID_LVC_IDEALWIDTH), helpstring("Retrieves the column's ideal width in pixels. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT IdealWidth([out, retval] OLE_XSIZE_PIXELS* pValue);
		/// \brief <em>Specifies the position of the column caption's image relative to the text</em>
		///
		/// Retrieves or sets whether the column header's image is displayed to the right of the text. If this
		/// property is set to \c True, the image is displayed to the right, otherwise to the left of the
		/// column's caption text.
		///
		/// \remarks If the column's caption contains a bitmap as well as an icon, the bitmap always is
		///          displayed to the right of the text.
		///
		/// \sa BitmapHandle, IconIndex, Caption
		[propget, id(DISPID_LVC_IMAGEONRIGHT), helpstring("Retrieves or sets whether the column header's image is displayed to the right of the text. If the column's caption contains a bitmap as well as an icon, the bitmap always is displayed to the right of the text."), nonbrowsable]
		HRESULT ImageOnRight([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVC_IMAGEONRIGHT), helpstring("Retrieves or sets whether the column header's image is displayed to the right of the text. If the column's caption contains a bitmap as well as an icon, the bitmap always is displayed to the right of the text."), nonbrowsable]
		HRESULT ImageOnRight([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the column's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this column.
		///
		/// \remarks Although adding or removing columns changes other columns' indexes, the index is the best
		///          (and fastest) option to identify a column.\n
		///          This property is read-only.
		///
		/// \sa ID, Position, ColumnIdentifierTypeConstants
		[propget, id(DISPID_LVC_INDEX), helpstring("Retrieves the column's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the column header's x-coordinate</em>
		///
		/// Retrieves the distance between the header control's left border and the column's left border
		/// in pixels.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Position, Top, Width, Height, GetDropDownRectangle
		[propget, id(DISPID_LVC_LEFT), helpstring("Retrieves the distance between the header control's left border and the column's left border in pixels.")]
		HRESULT Left([out, retval] OLE_XPOS_PIXELS* pValue);
		/// \brief <em>Specifies the column's minimum width</em>
		///
		/// Retrieves or sets the column's minimum width in pixels.
		///
		/// \remarks The native list view control doesn't seem to allow a minimum width smaller than 30
		///          pixels.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa DefaultWidth, IdealWidth, Width, Resizable, IExplorerListView::ResizableColumns,
		///     IExplorerListView::UseMinColumnWidths
		[propget, id(DISPID_LVC_MINIMUMWIDTH), helpstring("Retrieves or sets the column's minimum width in pixels. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT MinimumWidth([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_LVC_MINIMUMWIDTH), helpstring("Retrieves or sets the column's minimum width in pixels. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT MinimumWidth([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Specifies whether the column caption is drawn by the application instead of the control</em>
		///
		/// Retrieves or sets whether your application draws this column header itself. If set to \c True,
		/// the control will fire the \c HeaderOwnerDrawItem event each time this column header must be drawn.
		/// If set to \c False, the control will draw this column header itself. In this case drawing can
		/// still be customized using the \c HeaderCustomDraw event.
		///
		/// \sa IExplorerListView::OwnerDrawn, _IExplorerListViewEvents::HeaderOwnerDrawItem,
		///     _IExplorerListViewEvents::HeaderCustomDraw
		[propget, id(DISPID_LVC_OWNERDRAWN), helpstring("Retrieves or sets whether your application draws this column header itself.")]
		HRESULT OwnerDrawn([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVC_OWNERDRAWN), helpstring("Retrieves or sets whether your application draws this column header itself.")]
		HRESULT OwnerDrawn([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the column's zero-based position index</em>
		///
		/// Retrieves or sets the column's current position as a zero-based index. The left-most column has
		/// position 0, the next one to the right has position 1 and so on.
		///
		/// \sa ID, Index, IListViewColumns::Positions, ColumnIdentifierTypeConstants
		[propget, id(DISPID_LVC_POSITION), helpstring("Retrieves or sets the column's current position as a zero-based index.")]
		HRESULT Position([out, retval] LONG* pValue);
		[propput, id(DISPID_LVC_POSITION), helpstring("Retrieves or sets the column's current position as a zero-based index.")]
		HRESULT Position([in] LONG newValue);
		/// \brief <em>Specifies whether the column's width can be changed by the user</em>
		///
		/// Retrieves or sets whether the column's width can be changed by the user. If set to \c True, the
		/// column's width can be changed; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Width, IExplorerListView::ResizableColumns
		[propget, id(DISPID_LVC_RESIZABLE), helpstring("Retrieves or sets whether the column's width can be changed by the user. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Resizable([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVC_RESIZABLE), helpstring("Retrieves or sets whether your application draws this column header itself.")]
		HRESULT Resizable([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves whether the column is the control's selected column</em>
		///
		/// Retrieves whether the column is the control's selected column. The selected column is highlighted.
		/// If this property is set to \c True, the column is the selected one; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This property is read-only.
		///
		/// \sa Caret, IExplorerListView::SelectedColumn, SortArrow
		[propget, id(DISPID_LVC_SELECTED), helpstring("Retrieves whether the column is the control's selected column. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT Selected([out, retval] VARIANT_BOOL* pValue);
		#ifdef INCLUDESHELLBROWSERINTERFACE
			/// \brief <em>Retrieves the listview column's corresponding \c ShellListViewColumn object</em>
			///
			/// Retrieves the \c ShellListViewColumn object of this listview column from the attached
			/// \c ShellListView control.
			///
			/// \remarks This property is read-only.
			[propget, id(DISPID_LVC_SHELLLISTVIEWCOLUMNOBJECT), helpstring("Retrieves the listview column's corresponding 'ShellListViewColumn' object."), nonbrowsable]
			HRESULT ShellListViewColumnObject([out, retval] IDispatch** ppItem);
		#endif
		/// \brief <em>Specifies whether the column header contains a drop-down area</em>
		///
		/// Retrieves or sets whether the column header contains a drop-down area. If the user clicks this
		/// drop-down area, you may display a popup window which lets the user configure the column.\n
		/// If set to \c True, a drop-down button is displayed in the column header; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa _IExplorerListViewEvents::ColumnDropDown, SortArrow, GetDropDownRectangle
		[propget, id(DISPID_LVC_SHOWDROPDOWNBUTTON), helpstring("Retrieves or sets whether the column header contains a drop-down area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowDropDownButton([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVC_SHOWDROPDOWNBUTTON), helpstring("Retrieves or sets whether the column header contains a drop-down area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowDropDownButton([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the sort arrow displayed in the column's caption</em>
		///
		/// Retrieves or sets the kind of sort arrow that is displayed next to the column's caption text.
		/// Any of the values defined by the \c SortArrowConstants enumeration is valid.
		///
		/// \sa BitmapHandle, IconIndex, Caption, ShowDropDownButton,
		///     IExplorerListView::ClickableColumnHeaders, IExplorerListView::SelectedColumn,
		///     SortArrowConstants
		[propget, id(DISPID_LVC_SORTARROW), helpstring("Retrieves or sets the kind of sort arrow that is displayed next to the column's caption text.")]
		HRESULT SortArrow([out, retval] SortArrowConstants* pValue);
		[propput, id(DISPID_LVC_SORTARROW), helpstring("Retrieves or sets the kind of sort arrow that is displayed next to the column's caption text.")]
		HRESULT SortArrow([in] SortArrowConstants newValue);
		/// \brief <em>Specifies the column header's state image</em>
		///
		/// Retrieves or sets the one-based index of the column header's state image in the control's
		/// \c ilHeaderState imagelist. The state image is drawn next to the column header and usually a
		/// checkbox.\n
		/// If set to 0, the column's caption doesn't contain a state image.
		///
		/// \remarks Current versions of Windows support only two different state images\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IExplorerListView::hImageList, IconIndex, ImageListConstants
		[propget, id(DISPID_LVC_STATEIMAGEINDEX), helpstring("Retrieves or sets the one-based index of the column header's state image in the control's 'ilHeaderState' imagelist. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT StateImageIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVC_STATEIMAGEINDEX), helpstring("Retrieves or sets the one-based index of the column header's state image in the control's 'ilHeaderState' imagelist. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT StateImageIndex([in] LONG newValue);
		/// \brief <em>Retrieves the column header's y-coordinate</em>
		///
		/// Retrieves the distance between the header control's top border and the column's top border
		/// in pixels.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Left, Height, Width, GetDropDownRectangle
		[propget, id(DISPID_LVC_TOP), helpstring("Retrieves the distance between the header control's left border and the column's left border in pixels.")]
		HRESULT Top([out, retval] OLE_YPOS_PIXELS* pValue);
		/// \brief <em>Specifies the column's current width</em>
		///
		/// Retrieves or sets the column's width in pixels.
		///
		/// \remarks You may also set this property to any of the values defined by the \c AutoSizeConstants
		///          enumeration.
		///
		/// \sa AutoSizeConstants, MinimumWidth, DefaultWidth, IdealWidth, Left, Height, Top,
		///     GetDropDownRectangle, IExplorerListView::GetStringWidth, IExplorerListView::ColumnWidth,
		///     Resizable, IExplorerListView::ResizableColumns, IExplorerListView::ShowHeaderChevron,
		///     _IExplorerListViewEvents::BeginColumnResizing, _IExplorerListViewEvents::ResizingColumn,
		///     _IExplorerListViewEvents::EndColumnResizing
		[propget, id(DISPID_LVC_WIDTH), helpstring("Retrieves or sets the column's width in pixels.")]
		HRESULT Width([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_LVC_WIDTH), helpstring("Retrieves or sets the column's width in pixels.")]
		HRESULT Width([in] OLE_XSIZE_PIXELS newValue);

		/// \brief <em>Retrieves an imagelist containing the column header's drag image</em>
		///
		/// Retrieves the handle to an imagelist containing a bitmap that can be used to visualize
		/// dragging of this column's header.
		///
		/// \param[out] xUpperLeft The x-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the header control's upper-left corner.
		/// \param[out] yUpperLeft The y-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the header control's upper-left corner.
		///
		/// \return The handle to the imagelist containing the bitmap.
		///
		/// \remarks The caller is responsible for destroying the imagelist.
		[id(DISPID_LVC_CREATEDRAGIMAGE), helpstring("Retrieves the handle to an imagelist containing a bitmap that can be used to visualize dragging of this column's header.")]
		HRESULT CreateDragImage([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xUpperLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yUpperLeft, [out, retval] OLE_HANDLE* phImageList);
		/// \brief <em>Retrieves the bounding rectangle of the column header's drop-down area</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the header control's upper-left corner) of
		/// the column header's drop-down area.
		///
		/// \param[in,out] left The x-coordinate (in pixels) of the upper-left corner of the drop-down area's
		///                bounding rectangle relative to the header control's upper-left corner.
		/// \param[in,out] top The y-coordinate (in pixels) of the upper-left corner of the drop-down area's
		///                bounding rectangle relative to the header control's upper-left corner.
		/// \param[in,out] right The x-coordinate (in pixels) of the lower-right corner of the drop-down area's
		///                bounding rectangle relative to the header control's upper-left corner.
		/// \param[in,out] bottom The y-coordinate (in pixels) of the lower-right corner of the drop-down
		///                area's bounding rectangle relative to the header control's upper-left corner.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ShowDropDownButton, Left, Top, Height, Width
		[id(DISPID_LVC_GETDROPDOWNRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the header control's client area) of the column header's drop-down area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetDropDownRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Left, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Top, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Right, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Bottom);
		/// \brief <em>Starts editing the column's filter</em>
		///
		/// \param[in] applyCurrentFilter Specifies whether to apply the edit control's content as new
		///            filter if the user is editing a column's filter when this method is called. If
		///            \c True, the filter is applied; otherwise it is discarded.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa Filter, IExplorerListView::ShowFilterBar
		[id(DISPID_LVC_STARTFILTEREDITING), helpstring("Starts editing the column's filter. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT StartFilterEditing([in, defaultvalue(-1)] VARIANT_BOOL applyCurrentFilter);

		/// \brief <em>Specifies which locale to use when sorting by this column</em>
		///
		/// Retrieves or sets the unique ID of the locale to use when sorting by this column.
		///
		/// \remarks The locale is used when sorting using the \c sobNumericIntText, \c sobNumericFloatText,
		///          \c sobCurrencyText or \c sobDateTimeText sorting criterion.
		///
		/// \sa TextParsingFlags, IExplorerListView::SortItems, SortByConstants
		[propget, id(DISPID_LVC_LOCALE), helpstring("Retrieves or sets the unique ID of the locale to use when sorting by this column.")]
		HRESULT Locale([out, retval] LONG* pValue);
		[propput, id(DISPID_LVC_LOCALE), helpstring("Retrieves or sets the unique ID of the locale to use when sorting by this column.")]
		HRESULT Locale([in] LONG newValue);
		/// \brief <em>Controls how text is parsed when sorting by this column</em>
		///
		/// Retrieves or sets the options to apply when parsing the text contained in this column into a
		/// numerical or date value. The parsing results may be used when sorting by this column.
		///
		/// \param[in] parsingFunction Specifies the parsing function for which to retrieve or set the options.
		///            Any of the values defined by the \c TextParsingFunctionConstants enumeration is valid.
		///
		/// \remarks The parsing options are used when sorting using the \c sobNumericIntText,
		///          \c sobNumericFloatText, \c sobCurrencyText or \c sobDateTimeText sorting criterion.\n
		///          They are also used when sorting using the \c sobText criterion if a specific locale
		///          identifier has been set for this column.
		///
		/// \sa Locale, IExplorerListView::SortItems, SortByConstants, TextParsingFunctionConstants
		[propget, id(DISPID_LVC_TEXTPARSINGFLAGS), helpstring("Retrieves or sets the options to apply when parsing the text contained in this column into a numerical or date value. The parsing results may be used when sorting by this column.")]
		HRESULT TextParsingFlags([in] TextParsingFunctionConstants parsingFunction, [out, retval] LONG* pValue);
		[propput, id(DISPID_LVC_TEXTPARSINGFLAGS), helpstring("Retrieves or sets the options to apply when parsing the text contained in this column into a numerical or date value. The parsing results may be used when sorting by this column.")]
		HRESULT TextParsingFlags([in] TextParsingFunctionConstants parsingFunction, [in] LONG newValue);
	}


	/// \interface IListViewColumns
	/// \brief <em>Manages a collection of \c ListViewColumn objects</em>
	///
	/// This interface provides easy access to collections of \c ListViewColumn objects. A
	/// \c ListViewColumns object is used to group the control's columns.
	///
	/// \sa _IListViewColumnsEvents, IListViewColumn, IExplorerListView
	[
		object,
		uuid(53547319-8F1D-41ff-BE08-26A3AF0795B9),
		dual,
		nonextensible,
		helpstring("IListViewColumns interface"),
		pointer_default(unique)
	]
	interface IListViewColumns : IDispatch
	{
		/// \brief <em>Retrieves a \c ListViewColumn object from the collection</em>
		///
		/// Retrieves a \c ListViewColumn object from the collection that wraps the column identified by
		/// \c columnIdentifier.
		///
		/// \param[in] columnIdentifier A value that identifies the listview column to be retrieved.
		/// \param[in] columnIdentifierType A value specifying the meaning of \c columnIdentifier. Any of the
		///            values defined by the \c ColumnIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IListViewColumns interface.\n
		///          This property is read-only.
		///
		/// \sa IListViewColumn, ColumnIdentifierTypeConstants, Add, Remove
		[propget, id(DISPID_LVCS_ITEM), helpstring("Retrieves a 'ListViewColumn' object from the collection that wraps the column identified by 'columnIdentifier'."), nonbrowsable]
		HRESULT Item([in] LONG columnIdentifier, [in, defaultvalue(citIndex)] ColumnIdentifierTypeConstants columnIdentifierType, [out, retval] IListViewColumn** ppColumn);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ListViewColumn objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_LVCS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);
		/// \brief <em>Specifies the columns' positions</em>
		///
		/// Retrieves or sets the columns' positions. The sub-type of this property is an array of \c Longs.
		/// Each element of this array contains the index of the corresponding column, e. g. if the value
		/// of the 1st element is 2, the column, whose index is 2, is the first column in the control. The 2nd
		/// element represents the 2nd column and so on.
		///
		/// \sa PositionsString, IListViewColumn::Position, IListViewColumn::Index
		[propget, id(DISPID_LVCS_POSITIONS), helpstring("Retrieves or sets the columns' positions.")]
		HRESULT Positions([out, retval] VARIANT* pValue);
		[propput, id(DISPID_LVCS_POSITIONS), helpstring("Retrieves or sets the columns' positions.")]
		HRESULT Positions([in] VARIANT newValue);

		/// \brief <em>Adds a column to the listview</em>
		///
		/// Adds a column with the specified properties at the specified position in the control and returns a
		/// \c ListViewColumn object wrapping the inserted column.
		///
		/// \param[in] columnCaption The new column's caption. The maximum number of characters in this text
		///            is 260. If set to \c vbNullString, the control will fire the \c HeaderItemGetDisplayInfo
		///            event each time this property's value is required.
		/// \param[in] insertAt The new column's zero-based index. If set to -1, the column will be inserted
		///            as the last column.
		/// \param[in] columnWidth The new column's width in pixels.
		/// \param[in] minimumWidth The new column's minimum width in pixels.
		/// \param[in] alignment The alignment of the new column's caption and content. Any of the values
		///            defined by the \c AlignmentConstants enumeration is valid.
		/// \param[in] columnData A \c Long value that will be associated with the column.
		/// \param[in] stateImageIndex The one-based index of the new column header's state image in the
		///            control's \c ilHeaderState imagelist. The state image is drawn next to the column header
		///            and usually a checkbox.\n
		///            If set to 0, the new column's caption doesn't contain a state image.
		/// \param[in] resizable If \c False, the new column's width cannot be changed by the user.
		/// \param[in] showDropDownButton If \c True, the new column's header contains a drop-down area.
		/// \param[in] ownerDrawn If \c True, the new column's header will be owner-drawn, i. e. it will be
		///            drawn by your application instead of the header control.
		///
		/// \return The inserted column.
		///
		/// \attention Due to a bug in Windows' \c SysHeader32 implementation, you should set the \c columnData
		///            parameter to a unique value if you want to set the \c columnCaption parameter to
		///            \c vbNullString or the inserted column's \c IconIndex property to -1.
		///
		/// \remarks The \c minimumWidth, \c stateImageIndex, \c resizable and \c showDropDownButton parameters
		///          are ignored if comctl32.dll is used in a version older than 6.10.
		///
		/// \sa Count, Remove, RemoveAll, IListViewColumn::Caption, IListViewColumn::Index,
		///     IListViewColumn::Width, IListViewColumn::MinimumWidth, IListViewColumn::Alignment,
		///     IListViewColumn::ColumnData, IListViewColumn::StateImageIndex, IExplorerListView::hImageList,
		///     IListViewColumn::Resizable, IListViewColumn::ShowDropDownButton, IListViewColumn::OwnerDrawn,
		///     _IExplorerListViewEvents::HeaderItemGetDisplayInfo, AlignmentConstants,
		///     IListViewColumn::IconIndex, ImageListConstants
		[id(DISPID_LVCS_ADD), helpstring("Adds a new column with the specified properties.")]
		HRESULT Add([in] BSTR columnCaption, [in, defaultvalue(-1)] LONG insertAt, [in, defaultvalue(120)] LONG ColumnWidth, [in, defaultvalue(0)] LONG MinimumWidth, [in, defaultvalue(alLeft)] AlignmentConstants alignment, [in, defaultvalue(0)] LONG ColumnData, [in, defaultvalue(1)] LONG StateImageIndex, [in, defaultvalue(-1)] VARIANT_BOOL Resizable, [in, defaultvalue(0)] VARIANT_BOOL ShowDropDownButton, [in, defaultvalue(0)] VARIANT_BOOL OwnerDrawn, [out, retval] IListViewColumn** ppAddedColumn);
		/// \brief <em>Clears all columns' filters</em>
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa IListViewColumn::Filter, IExplorerListView::ShowFilterBar
		[id(DISPID_LVCS_CLEARALLFILTERS), helpstring("Clears all columns' filters. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT ClearAllFilters(void);
		/// \brief <em>Counts the columns in the collection</em>
		///
		/// Retrieves the number of \c ListViewColumn objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_LVCS_COUNT), helpstring("Retrieves the number of 'ListViewColumn' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified column in the collection from the listview</em>
		///
		/// \param[in] columnIdentifier A value that identifies the listview column to be removed.
		/// \param[in] columnIdentifierType A value specifying the meaning of \c columnIdentifier. Any of the
		///            values defined by the \c ColumnIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks Removing the column with the index 0 requires comctl32.dll version 5.0 or higher.
		///
		/// \sa Add, Count, RemoveAll, ColumnIdentifierTypeConstants
		[id(DISPID_LVCS_REMOVE), helpstring("Removes the specified column in the collection from the control. Removing the column with the index 0 requires comctl32.dll version 5.0 or higher.")]
		HRESULT Remove([in] LONG columnIdentifier, [in, defaultvalue(citIndex)] ColumnIdentifierTypeConstants columnIdentifierType);
		/// \brief <em>Removes all columns in the collection from the listview</em>
		///
		/// \sa Add, Count, Remove
		[id(DISPID_LVCS_REMOVEALL), helpstring("Removes all columns in the collection from the control.")]
		HRESULT RemoveAll(void);

		/// \brief <em>Specifies the columns' positions</em>
		///
		/// Retrieves or sets the columns' positions. This property works like the \c Positions property, but
		/// serializes the array into a string using the specified delimiter.
		///
		/// \param[in] stringDelimiter The string to use for delimiting the array elements when serializing
		///            it into a string or deserializing the string into an array.
		///
		/// \sa Positions, IListViewColumn::Position, IListViewColumn::Index
		[propget, id(DISPID_LVCS_POSITIONSSTRING), helpstring("Retrieves or sets the columns' positions. This property works like the 'Positions' property, but serializes the array into a string using the specified delimiter.")]
		HRESULT PositionsString([in] BSTR stringDelimiter, [out, retval] BSTR* pValue);
		[propput, id(DISPID_LVCS_POSITIONSSTRING), helpstring("Retrieves or sets the columns' positions. This property works like the 'Positions' property, but serializes the array into a string using the specified delimiter.")]
		HRESULT PositionsString([in] BSTR stringDelimiter, [in] BSTR newValue);
	}


	/// \interface IListViewFooterItem
	/// \brief <em>Wraps an existing footer item</em>
	///
	/// This interface is a wrapper around a footer item that really exists within the control.
	///
	/// \remarks Requires comctl32.dll version 6.10 or higher.
	///
	/// \sa _IListViewFooterItemEvents, IListViewFooterItems, IExplorerListView, _IExplorerListViewEvents
	[
		object,
		uuid(7F262476-EA6F-4d5c-93E9-6B7840F21D6F),
		dual,
		nonextensible,
		helpstring("IListViewFooterItem interface"),
		pointer_default(unique)
	]
	interface IListViewFooterItem : IDispatch
	{
		/// \brief <em>Retrieves whether the footer item is the control's caret footer item</em>
		///
		/// Retrieves whether the footer item is the control's caret footer item, i. e. it has the focus. If it
		/// is the caret footer item, this property is set to \c True; otherwise it's set to \c False.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::CaretFooterItem
		[propget, id(DISPID_LVFI_CARET), helpstring("Retrieves whether the footer item is the current caret footer item, i. e. it has the focus.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the footer item's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this footer item.
		///
		/// \remarks Adding or removing footer items changes other footer items' indexes.\n
		///          This property is read-only.
		///
		/// \sa FooterItemIdentifierTypeConstants
		[propget, id(DISPID_LVFI_INDEX), helpstring("Retrieves the footer item's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the footer item's associated data</em>
		///
		/// Retrieves the \c Long value associated with the footer item. Use this property to associate
		/// any data with the footer item.
		///
		/// \remarks With current versions of comctl32.dll a footer item's associated data cannot be changed
		///          after the item has been inserted.\n
		///          With current versions of comctl32.dll the events \c FooterItemClick and
		///          \c FreeFooterItemData are not fired for footer items whose associated data is 0.\n
		///          This property is read-only.
		///
		/// \sa IListViewFooterItems::Add, _IExplorerListViewEvents::FooterItemClick,
		///     _IExplorerListViewEvents::FreeFooterItemData
		[propget, id(DISPID_LVFI_ITEMDATA), helpstring("Retrieves the Long value associated with the footer item. With current versions of comctl32.dll a footer item's associated data cannot be changed after the item has been inserted.")]
		HRESULT ItemData([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the footer item's text</em>
		///
		/// Retrieves the footer item's text. The maximum number of characters in
		/// this text is 4096.
		///
		/// \remarks This is the default property of the \c IListViewFooterItem interface.\n
		///          With current versions of comctl32.dll a footer item's text cannot be changed after the
		///          item has been inserted.\n
		///          This property is read-only.
		///
		/// \sa IconIndex, IListViewFooterItems::Add
		[propget, id(DISPID_LVFI_TEXT), helpstring("Retrieves the footer item's text. With current versions of comctl32.dll a footer item's text cannot be changed after the item has been inserted.")]
		HRESULT Text([out, retval] BSTR* pValue);

		/// \brief <em>Retrieves the bounding rectangle of the footer item</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's client area) of the footer
		/// item.
		///
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \sa IExplorerListView::GetFooterRectangle
		[id(DISPID_LVFI_GETRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's client area) of the footer item.")]
		HRESULT GetRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
	}


	/// \interface IListViewFooterItems
	/// \brief <em>Manages a collection of \c ListViewFooterItem objects</em>
	///
	/// This interface provides easy access to collections of \c ListViewFooterItem objects. A
	/// \c ListViewFooterItems object is used to group the control's footer items.
	///
	/// \remarks Requires comctl32.dll version 6.10 or higher.
	///
	/// \sa _IListViewFooterItemsEvents, IListViewFooterItem, IExplorerListView
	[
		object,
		uuid(E9852F3C-A5F8-4f86-81BD-2A963E2EB000),
		dual,
		nonextensible,
		helpstring("IListViewFooterItems interface"),
		pointer_default(unique)
	]
	interface IListViewFooterItems : IDispatch
	{
		/// \brief <em>Retrieves a \c ListViewFooterItem object from the collection</em>
		///
		/// Retrieves a \c ListViewFooterItem object from the collection that wraps the footer item identified
		/// by \c footerItemIdentifier.
		///
		/// \param[in] footerItemIdentifier A value that identifies the listview footer item to be retrieved.
		/// \param[in] footerItemIdentifierType A value specifying the meaning of \c footerItemIdentifier. Any
		///            of the values defined by the \c FooterItemIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IListViewFooterItems interface.\n
		///          This property is read-only.
		///
		/// \sa IListViewFooterItem, FooterItemIdentifierTypeConstants, Add
		[propget, id(DISPID_LVFIS_ITEM), helpstring("Retrieves a 'ListViewFooterItem' object from the collection that wraps the footer item identified by 'footerItemIdentifier'."), nonbrowsable]
		HRESULT Item([in] LONG footerItemIdentifier, [in, defaultvalue(fiitIndex)] FooterItemIdentifierTypeConstants footerItemIdentifierType, [out, retval] IListViewFooterItem** ppFooterItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ListViewFooterItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_LVFIS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a footer item to the listview</em>
		///
		/// Adds a footer item with the specified properties at the specified position in the control and
		/// returns a \c ListViewFooterItem object wrapping the inserted footer item.
		///
		/// \param[in] footerItemText The new footer item's text. The maximum number of characters in this text
		///            is 4096. With current versions of comctl32.dll a footer item's text cannot be changed
		///            after the item has been inserted.
		/// \param[in] insertAt The new footer item's zero-based index. If set to -1, the footer item will be
		///            inserted as the last footer item.
		/// \param[in] iconIndex The zero-based index of the footer item's icon in the control's
		///            \c ilFooterItems imagelist. With current versions of comctl32.dll a footer item's
		///            icon index cannot be retrieved or changed after the item has been inserted.
		/// \param[in] itemData A \c Long value that will be associated with the footer item. With current
		///            versions of comctl32.dll a footer item's associated data cannot be changed after the
		///            item has been inserted. Also the events \c FooterItemClick and \c FreeFooterItemData are
		///            not fired for footer items whose associated data is 0.
		///
		/// \return The inserted footer item.
		///
		/// \remarks With current versions of comctl32.dll it is not possible to add more than 4 footer items.
		///
		/// \sa Count, RemoveAll, IListViewFooterItem::Text, IListViewFooterItem::Index,
		///     IListViewFooterItem::ItemData, IExplorerListView::hImageList, ImageListConstants
		[id(DISPID_LVFIS_ADD), helpstring("Adds a new footer item with the specified properties.")]
		HRESULT Add([in] BSTR footerItemText, [in, defaultvalue(-1)] LONG insertAt, [in, defaultvalue(0)] LONG IconIndex, [in, defaultvalue(1)] LONG ItemData, [out, retval] IListViewFooterItem** ppAddedFooterItem);
		/// \brief <em>Counts the footer items in the collection</em>
		///
		/// Retrieves the number of \c ListViewFooterItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, RemoveAll
		[id(DISPID_LVFIS_COUNT), helpstring("Retrieves the number of 'ListViewFooterItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes all footer items in the collection from the listview</em>
		///
		/// \remarks This also hides the footer area's caption.
		///
		/// \sa Add, Count
		[id(DISPID_LVFIS_REMOVEALL), helpstring("Removes all footer items in the collection from the control. This also hides the footer area's caption.")]
		HRESULT RemoveAll(void);
	}


	/// \interface IVirtualListViewGroup
	/// \brief <em>Wraps a not existing group</em>
	///
	/// This interface is a wrapper around a group that does not yet or not anymore exist within the control.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa _IVirtualListViewGroupEvents, IListViewGroup, _IExplorerListViewEvents
	[
		object,
		uuid(84CB1A19-638D-4dab-AB85-F2BEF9EBB1F3),
		dual,
		nonextensible,
		helpstring("IVirtualListViewGroup interface"),
		pointer_default(unique)
	]
	interface IVirtualListViewGroup : IDispatch
	{
		/// \brief <em>Retrieves the alignment of the group's header or footer</em>
		///
		/// Retrieves the alignment of the group's header or footer text. Any of the values defined by
		/// the \c AlignmentConstants enumeration is valid.
		///
		/// \param[in] groupComponent The part of the group for which to retrieve the property. Any of the
		///            values defined by the \c GroupComponentConstants enumeration is valid.
		///
		/// \remarks The group's description is displayed only if the \c Alignment(gcHeader) property is set to
		///          \c alCenter.\n
		///          This property is read-only.
		///
		/// \sa Text, DescriptionTextTop, DescriptionTextBottom, AlignmentConstants, GroupComponentConstants
		[propget, id(DISPID_VLVG_ALIGNMENT), helpstring("Retrieves the alignment of the group's header or footer text.")]
		HRESULT Alignment([in, defaultvalue(gcHeader)] GroupComponentConstants groupComponent, [out, retval] AlignmentConstants* pValue);
		/// \brief <em>Retrieves whether the group is the control's caret group</em>
		///
		/// Retrieves whether the group will be or was the control's caret group, i. e. it will have or had the
		/// focus. If it will be or was the caret group, this property is set to \c True; otherwise it's set to
		/// \c False.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa SubsetLinkFocused, IExplorerListView::CaretGroup, _IExplorerListViewEvents::GroupGotFocus,
		///     _IExplorerListViewEvents::GroupLostFocus
		[propget, id(DISPID_VLVG_CARET), helpstring("Retrieves whether the group will be or was the current caret group, i. e. it will have or had the focus. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the group is collapsed</em>
		///
		/// Retrieves whether the group will be or was collapsed. If this property is set to \c True, the items
		/// in this group will be or were hidden; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Collapsible, _IExplorerListViewEvents::CollapsedGroup, _IExplorerListViewEvents::ExpandedGroup
		[propget, id(DISPID_VLVG_COLLAPSED), helpstring("Retrieves whether the group will be or was collapsed. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Collapsed([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the group can be collapsed</em>
		///
		/// Retrieves whether the group will be or was collapsible. If this property is set to \c True, the
		/// user can or could collapse this group; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Collapsed, _IExplorerListViewEvents::CollapsedGroup, _IExplorerListViewEvents::ExpandedGroup
		[propget, id(DISPID_VLVG_COLLAPSIBLE), helpstring("Retrieves whether the group will be or was collapsible. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Collapsible([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the bottom part of the group's description</em>
		///
		/// Retrieves the bottom part of the text displayed as the group's description. The maximum number of
		/// characters in this text is 4096.
		///
		/// \remarks The description is displayed only if the \c Alignment(gcHeader) property is set to
		///          \c alCenter.\n
		///          The group's description isn't displayed if the group doesn't have an icon.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa DescriptionTextTop, Text, SubtitleText, TaskText, SubsetLinkText, Alignment, IconIndex
		[propget, id(DISPID_VLVG_DESCRIPTIONTEXTBOTTOM), helpstring("Retrieves the bottom part of the text displayed as the group's description. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DescriptionTextBottom([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the top part of the group's description</em>
		///
		/// Retrieves the top part of the text displayed as the group's description. The maximum number of
		/// characters in this text is 4096.
		///
		/// \remarks The description is displayed only if the \c Alignment(gcHeader) property is set to
		///          \c alCenter.\n
		///          The group's description isn't displayed if the group doesn't have an icon.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa DescriptionTextBottom, Text, SubtitleText, TaskText, SubsetLinkText, Alignment, IconIndex
		[propget, id(DISPID_VLVG_DESCRIPTIONTEXTTOP), helpstring("Retrieves the top part of the text displayed as the group's description. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DescriptionTextTop([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the group header's icon</em>
		///
		/// Retrieves the zero-based index of the group header's icon in the control's \c ilGroups imagelist.
		/// If set to -1, the group header doesn't contain an icon.
		///
		/// \remarks The group's description isn't displayed if the group doesn't have an icon.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::hImageList, DescriptionTextTop, DescriptionTextBottom, ImageListConstants
		[propget, id(DISPID_VLVG_ICONINDEX), helpstring("Retrieves the zero-based index of the group header's icon in the control's 'ilGroups' imagelist. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the group's ID</em>
		///
		/// Retrieves an unique ID identifying this group.
		///
		/// \remarks A group's ID won't change except it is changed explicitly.\n
		///          This property is read-only.
		///
		/// \sa GroupIdentifierTypeConstants
		[propget, id(DISPID_VLVG_ID), helpstring("Retrieves the group's unique ID.")]
		HRESULT ID([out, retval] LONG* pValue);
		/// \brief <em>Retrieves whether the group is selected</em>
		///
		/// Retrieves whether the group will be or was drawn as a selected group, i. e. whether its
		/// background will be or was highlighted. If this property is set to \c True, the group will be
		/// or was highlighted; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Caret, _IExplorerListViewEvents::GroupSelectionChanged
		[propget, id(DISPID_VLVG_SELECTED), helpstring("Retrieves whether the group is drawn as a selected group. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Selected([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the group's header is displayed</em>
		///
		/// Retrieves whether the group's header will be or was displayed. If this property is set to \c True,
		/// the group's header will be or was displayed; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Text
		[propget, id(DISPID_VLVG_SHOWHEADER), helpstring("Retrieves whether the group's header is displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowHeader([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the group may display only a subset of its items</em>
		///
		/// Retrieves whether the listview control will or has displayed only a subset of the group's items if
		/// the listview control is or was not large enough to display all items without scrolling. If this
		/// property is set to \c True, the control will or has hidden some of the group's items and instead
		/// will or has displayed a link for displaying them; otherwise the control will or has always
		/// displayed all of the group's items.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa SubsetLinkText, IExplorerListView::MinItemRowsVisibleInGroups
		[propget, id(DISPID_VLVG_SUBSETED), helpstring("Retrieves whether the listview control will or has displayed only a subset of the group's items if the listview control is or was not large enough to display all items without scrolling. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Subseted([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the group's subset link has the keyboard focus</em>
		///
		/// Retrieves whether the group's subset link will have or had the keyboard focus. If this property is
		/// set to \c True, the group's subset link will have or had the keyboard focus; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Subseted, SubsetLinkText, Caret, IExplorerListView::MinItemRowsVisibleInGroups
		[propget, id(DISPID_VLVG_SUBSETLINKFOCUSED), helpstring("Retrieves whether the group's subset link will have or had the keyboard focus. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubsetLinkFocused([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the text of the group's subset link</em>
		///
		/// Retrieves the text displayed as a link below the group if not all items of the group are displayed.
		/// Clicking this link will display the remaining items. The maximum number of characters in this text
		/// is 4096.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Subseted, SubsetLinkFocused, Text, SubtitleText, TaskText, DescriptionTextTop,
		///     DescriptionTextBottom
		[propget, id(DISPID_VLVG_SUBSETLINKTEXT), helpstring("Retrieves the text displayed as a link below the group if not all items of the group are displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubsetLinkText([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the group's subtitle</em>
		///
		/// Retrieves the text displayed as the group's subtitle. The maximum number of characters in this text
		/// is 4096.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Text, TaskText, DescriptionTextTop, DescriptionTextBottom, SubsetLinkText
		[propget, id(DISPID_VLVG_SUBTITLETEXT), helpstring("Retrieves the text displayed as the group's subtitle. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubtitleText([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the text for the group's task link</em>
		///
		/// Retrieves the text displayed as the group's task link. The maximum number of characters in this text
		/// is 4096.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Text, SubtitleText, DescriptionTextTop, DescriptionTextBottom, SubsetLinkText,
		///     _IExplorerListViewEvents::GroupTaskLinkClick
		[propget, id(DISPID_VLVG_TASKTEXT), helpstring("Retrieves the text displayed as the group's task link. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT TaskText([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the group's header or footer text</em>
		///
		/// Retrieves the group's header or footer text. The number of characters in this text is not limited.
		///
		/// \param[in] groupComponent The part of the group for which to retrieve the property. Any of the
		///            values defined by the \c GroupComponentConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IVirtualListViewGroup interface.\n
		///          This property is read-only.
		///
		/// \sa Alignment, GroupComponentConstants, SubtitleText, TaskText, DescriptionTextTop,
		///     DescriptionTextBottom, SubsetLinkText, IconIndex, IExplorerListView::GroupHeaderForeColor,
		///     IExplorerListView::GroupFooterForeColor
		[propget, id(DISPID_VLVG_TEXT), helpstring("Retrieves the group's header or footer text.")]
		HRESULT Text([in, defaultvalue(gcHeader)] GroupComponentConstants groupComponent, [out, retval] BSTR* pValue);
	}


	/// \interface IListViewGroup
	/// \brief <em>Wraps an existing group</em>
	///
	/// This interface is a wrapper around a group that - unlike a group wrapped by
	/// \c IVirtualListViewGroup - really exists within the control.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa _IListViewGroupEvents, IVirtualListViewGroup, IListViewGroups, IExplorerListView,
	///     _IExplorerListViewEvents
	[
		object,
		uuid(050F0B16-E0A5-41a3-AD45-0633479C1FE6),
		dual,
		nonextensible,
		helpstring("IListViewGroup interface"),
		pointer_default(unique)
	]
	interface IListViewGroup : IDispatch
	{
		/// \brief <em>Specifies the alignment of the group's header or footer</em>
		///
		/// Retrieves or sets the alignment of the group's header or footer text. Any of the values defined by
		/// the \c AlignmentConstants enumeration is valid.
		///
		/// \param[in] groupComponent The part of the group for which to retrieve or set the property. Any
		///            of the values defined by the \c GroupComponentConstants enumeration is valid.
		///
		/// \remarks The group's description is displayed only if the \c Alignment(gcHeader) property is set to
		///          \c alCenter.
		///
		/// \sa Text, DescriptionTextTop, DescriptionTextBottom, AlignmentConstants, GroupComponentConstants
		[propget, id(DISPID_LVG_ALIGNMENT), helpstring("Retrieves or sets the alignment of the group's header or footer text.")]
		HRESULT Alignment([in, defaultvalue(gcHeader)] GroupComponentConstants groupComponent, [out, retval] AlignmentConstants* pValue);
		[propput, id(DISPID_LVG_ALIGNMENT), helpstring("Retrieves or sets the alignment of the group's header or footer text.")]
		HRESULT Alignment([in, defaultvalue(gcHeader)] GroupComponentConstants groupComponent, [in] AlignmentConstants newValue);
		/// \brief <em>Retrieves whether the group is the control's caret group</em>
		///
		/// Retrieves whether the group is the control's caret group, i. e. it has the focus. If it is the
		/// caret group, this property is set to \c True; otherwise it's set to \c False.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Selected, SubsetLinkFocused, IExplorerListView::CaretGroup, _IExplorerListViewEvents::GroupGotFocus,
		///     _IExplorerListViewEvents::GroupLostFocus
		[propget, id(DISPID_LVG_CARET), helpstring("Retrieves whether the group is the current caret group, i. e. it has the focus. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies whether the group is collapsed</em>
		///
		/// Retrieves or sets whether the group is collapsed. If this property is set to \c True, the items
		/// in this group are hidden; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Collapsible, _IExplorerListViewEvents::CollapsedGroup, _IExplorerListViewEvents::ExpandedGroup
		[propget, id(DISPID_LVG_COLLAPSED), helpstring("Retrieves or sets whether the group is collapsed. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Collapsed([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVG_COLLAPSED), helpstring("Retrieves or sets whether the group is collapsed. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Collapsed([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the group can be collapsed</em>
		///
		/// Retrieves or sets whether the group can be collapsed. If this property is set to \c True, the group
		/// can be collapsed by the user; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Collapsed, _IExplorerListViewEvents::CollapsedGroup, _IExplorerListViewEvents::ExpandedGroup
		[propget, id(DISPID_LVG_COLLAPSIBLE), helpstring("Retrieves or sets whether the group can be collapsed. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Collapsible([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVG_COLLAPSIBLE), helpstring("Retrieves or sets whether the group can be collapsed. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Collapsible([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the bottom part of the group's description</em>
		///
		/// Retrieves or sets the bottom part of the text displayed as the group's description. The maximum
		/// number of characters in this text is 4096.
		///
		/// \remarks The description is displayed only if the \c Alignment(gcHeader) property is set to
		///          \c alCenter.\n
		///          The group's description isn't displayed if the group doesn't have an icon.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa DescriptionTextTop, Text, SubtitleText, TaskText, SubsetLinkText, Alignment, IconIndex
		[propget, id(DISPID_LVG_DESCRIPTIONTEXTBOTTOM), helpstring("Retrieves or sets the bottom part of the text displayed as the group's description. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DescriptionTextBottom([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVG_DESCRIPTIONTEXTBOTTOM), helpstring("Retrieves or sets the bottom part of the text displayed as the group's description. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DescriptionTextBottom([in] BSTR newValue);
		/// \brief <em>Specifies the top part of the group's description</em>
		///
		/// Retrieves or sets the top part of the text displayed as the group's description. The maximum
		/// number of characters in this text is 4096.
		///
		/// \remarks The description is displayed only if the \c Alignment(gcHeader) property is set to
		///          \c alCenter.\n
		///          The group's description isn't displayed if the group doesn't have an icon.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa DescriptionTextBottom, Text, SubtitleText, TaskText, SubsetLinkText, Alignment, IconIndex
		[propget, id(DISPID_LVG_DESCRIPTIONTEXTTOP), helpstring("Retrieves or sets the top part of the text displayed as the group's description. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DescriptionTextTop([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVG_DESCRIPTIONTEXTTOP), helpstring("Retrieves or sets the top part of the text displayed as the group's description. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DescriptionTextTop([in] BSTR newValue);
		/// \brief <em>Retrieves the group's first item</em>
		///
		/// Retrieves the first listview item in the group.
		///
		/// \remarks This property is read-only.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ListItems, ItemCount, IListViewItem
		[propget, id(DISPID_LVG_FIRSTITEM), helpstring("Retrieves the first listview item in the group. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT FirstItem([out, retval] IListViewItem** ppItem);
		/// \brief <em>Specifies the group header's icon</em>
		///
		/// Retrieves or sets the zero-based index of the group header's icon in the control's \c ilGroups
		/// imagelist. If set to -1, the group header doesn't contain an icon.
		///
		/// \remarks The group's description isn't displayed if the group doesn't have an icon.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IExplorerListView::hImageList, DescriptionTextTop, DescriptionTextBottom, ImageListConstants
		[propget, id(DISPID_LVG_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the group header's icon in the control's 'ilGroups' imagelist. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVG_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the group header's icon in the control's 'ilGroups' imagelist. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT IconIndex([in] LONG newValue);
		/// \brief <em>Specifies the group's ID</em>
		///
		/// Retrieves or sets the unique ID identifying this group.
		///
		/// \remarks A group's ID won't change except it is changed explicitly.
		///
		/// \sa Index, Position, GroupIdentifierTypeConstants
		[propget, id(DISPID_LVG_ID), helpstring("Retrieves or sets the group's unique ID.")]
		HRESULT ID([out, retval] LONG* pValue);
		[propput, id(DISPID_LVG_ID), helpstring("Retrieves or sets the group's unique ID.")]
		HRESULT ID([in] LONG newValue);
		/// \brief <em>Retrieves the group's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this group.
		///
		/// \remarks Adding or removing groups changes other groups' indexes.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa ID, Position, GroupIdentifierTypeConstants
		[propget, id(DISPID_LVG_INDEX), helpstring("Retrieves the group's zero-based index. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Specifies the number of items contained in the group</em>
		///
		/// Retrieves or sets the number of items contained in the group.
		///
		/// \param[in] visibleSubsetOnly If set to \c True and the group is subseted, the number returned is
		///            the number of the currently visible items; otherwise it is the number of all items in
		///            the group.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only if virtual mode is disabled.
		///
		/// \sa FirstItem, IExplorerListView::VirtualMode, IExplorerListView::VirtualItemCount
		[propget, id(DISPID_LVG_ITEMCOUNT), helpstring("Retrieves or sets the number of items contained in the group. Requires comctl32.dll version 6.10 or higher. This property is read-only if virtual mode is disabled.")]
		HRESULT ItemCount([in, defaultvalue(0)] VARIANT_BOOL visibleSubsetOnly, [out, retval] LONG* pValue);
		[propput, id(DISPID_LVG_ITEMCOUNT), helpstring("Retrieves or sets the number of items contained in the group. Requires comctl32.dll version 6.10 or higher. This property is read-only if virtual mode is disabled.")]
		HRESULT ItemCount([in, defaultvalue(0)] VARIANT_BOOL visibleSubsetOnly, [in] LONG newValue);
		/// \brief <em>Retrieves the group's items</em>
		///
		/// Retrieves a collection object wrapping the listview items in the group.
		///
		/// \remarks This property is read-only.
		///
		/// \sa FirstItem, ItemCount, IListViewItems
		[propget, id(DISPID_LVG_LISTITEMS), helpstring("Retrieves a collection object wrapping the listview items in the group."), nonbrowsable]
		HRESULT ListItems([out, retval] IListViewItems** ppItems);
		/// \brief <em>Retrieves the group's zero-based position index</em>
		///
		/// Retrieves the group's current position as a zero-based index. The top-most group has
		/// position 0, the next one to the bottom has position 1 and so on.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ID, Index, GroupIdentifierTypeConstants
		[propget, id(DISPID_LVG_POSITION), helpstring("Retrieves the group's current position as a zero-based index.")]
		HRESULT Position([out, retval] LONG* pValue);
		/// \brief <em>Specifies whether the group is selected</em>
		///
		/// Retrieves or sets whether the group is drawn as a selected group, i. e. whether its background
		/// is highlighted. If this property is set to \c True, the group is highlighted; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Caret, IExplorerListView::CaretGroup, _IExplorerListViewEvents::GroupSelectionChanged
		[propget, id(DISPID_LVG_SELECTED), helpstring("Retrieves or sets whether the group is drawn as a selected group. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Selected([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVG_SELECTED), helpstring("Retrieves or sets whether the group is drawn as a selected group. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Selected([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the group's header is displayed</em>
		///
		/// Retrieves or sets whether the group's header is displayed. If this property is set to \c True, the
		/// group's header is displayed; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Text
		[propget, id(DISPID_LVG_SHOWHEADER), helpstring("Retrieves or sets whether the group's header is displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowHeader([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVG_SHOWHEADER), helpstring("Retrieves or sets whether the group's header is displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowHeader([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the group may display only a subset of its items</em>
		///
		/// Retrieves or sets whether the group displays only a subset of its items if the listview control is
		/// not large enough to display all items without scrolling. If this property is set to \c True, the
		/// control may hide some of the group's items and instead display a link for displaying them;
		/// otherwise the control always displays all of the group's items.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa SubsetLinkText, IExplorerListView::MinItemRowsVisibleInGroups
		[propget, id(DISPID_LVG_SUBSETED), helpstring("Retrieves or sets whether the group displays only a subset of its items if the listview control is not large enough to display all items without scrolling. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Subseted([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVG_SUBSETED), helpstring("Retrieves or sets whether the group displays only a subset of its items if the listview control is not large enough to display all items without scrolling. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Subseted([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the group's subset link has the keyboard focus</em>
		///
		/// Retrieves or sets whether the group's subset link has the keyboard focus. If this property is set
		/// to \c True, the group's subset link has the keyboard focus; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Subseted, SubsetLinkText, Caret, IExplorerListView::MinItemRowsVisibleInGroups
		[propget, id(DISPID_LVG_SUBSETLINKFOCUSED), helpstring("Retrieves or sets whether the group's subset link has the keyboard focus. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubsetLinkFocused([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVG_SUBSETLINKFOCUSED), helpstring("Retrieves or sets whether the group's subset link has the keyboard focus. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubsetLinkFocused([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the text of the group's subset link</em>
		///
		/// Retrieves or sets the text displayed as a link below the group if not all items of the group are
		/// displayed. Clicking this link will display the remaining items. The maximum number of characters in
		/// this text is 4096.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Subseted, SubsetLinkFocused, Text, SubtitleText, TaskText, DescriptionTextTop,
		///     DescriptionTextBottom
		[propget, id(DISPID_LVG_SUBSETLINKTEXT), helpstring("Retrieves or sets the text displayed as a link below the group if not all items of the group are displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubsetLinkText([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVG_SUBSETLINKTEXT), helpstring("Retrieves or sets the text displayed as a link below the group if not all items of the group are displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubsetLinkText([in] BSTR newValue);
		/// \brief <em>Specifies the group's subtitle</em>
		///
		/// Retrieves or sets the text displayed as the group's subtitle. The maximum number of characters in
		/// this text is 4096.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Text, TaskText, DescriptionTextTop, DescriptionTextBottom, SubsetLinkText
		[propget, id(DISPID_LVG_SUBTITLETEXT), helpstring("Retrieves or sets the group's subtitle. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubtitleText([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVG_SUBTITLETEXT), helpstring("Retrieves or sets the group's subtitle. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SubtitleText([in] BSTR newValue);
		/// \brief <em>Specifies the text for the group's task link</em>
		///
		/// Retrieves or sets the text displayed as the group's task link. The maximum number of characters in
		/// this text is 4096.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Text, SubtitleText, DescriptionTextTop, DescriptionTextBottom, SubsetLinkText,
		///     _IExplorerListViewEvents::GroupTaskLinkClick
		[propget, id(DISPID_LVG_TASKTEXT), helpstring("Retrieves or sets the text for the group's task link. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT TaskText([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVG_TASKTEXT), helpstring("Retrieves or sets the text for the group's task link. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT TaskText([in] BSTR newValue);
		/// \brief <em>Specifies the group's header or footer text</em>
		///
		/// Retrieves or sets the group's header or footer text. The number of characters in this text
		/// is not limited.
		///
		/// \param[in] groupComponent The part of the group for which to retrieve or set the property. Any
		///            of the values defined by the \c GroupComponentConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IListViewGroup interface.
		///
		/// \sa Alignment, GroupComponentConstants, SubtitleText, TaskText, DescriptionTextTop,
		///     DescriptionTextBottom, SubsetLinkText, IconIndex, IExplorerListView::GroupHeaderForeColor,
		///     IExplorerListView::GroupFooterForeColor
		[propget, id(DISPID_LVG_TEXT), helpstring("Retrieves or sets the group's header or footer text.")]
		HRESULT Text([in, defaultvalue(gcHeader)] GroupComponentConstants groupComponent, [out, retval] BSTR* pValue);
		[propput, id(DISPID_LVG_TEXT), helpstring("Retrieves or sets the group's header or footer text.")]
		HRESULT Text([in, defaultvalue(gcHeader)] GroupComponentConstants groupComponent, [in] BSTR newValue);

		/// \brief <em>Retrieves the bounding rectangle of either the group or a part of it</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the
		/// group or a part of it.
		///
		/// \param[in] rectangleType The rectangle to retrieve. Any of the values defined by the
		///            \c GroupRectangleTypeConstants enumeration is valid.
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa GroupRectangleTypeConstants
		[id(DISPID_LVG_GETRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the group or a part of it. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetRectangle(GroupRectangleTypeConstants rectangleType, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
	}


	/// \interface IListViewGroups
	/// \brief <em>Manages a collection of \c ListViewGroup objects</em>
	///
	/// This interface provides easy access to collections of \c ListViewGroup objects. A \c ListViewGroups
	/// object is used to group the control's groups.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa _IListViewGroupsEvents, IListViewGroup, IExplorerListView
	[
		object,
		uuid(3022CDCD-3CE6-43c2-BA4D-8F816E745E9A),
		dual,
		nonextensible,
		helpstring("IListViewGroups interface"),
		pointer_default(unique)
	]
	interface IListViewGroups : IDispatch
	{
		/// \brief <em>Retrieves a \c ListViewGroup object from the collection</em>
		///
		/// Retrieves a \c ListViewGroup object from the collection that wraps the group identified by
		/// \c groupIdentifier.
		///
		/// \param[in] groupIdentifier A value that identifies the listview group to be retrieved.
		/// \param[in] groupIdentifierType A value specifying the meaning of \c groupIdentifier. Any of the
		///            values defined by the \c GroupIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IListViewGroups interface.\n
		///          This property is read-only.
		///
		/// \sa IListViewGroup, GroupIdentifierTypeConstants, Add, Remove, Contains
		[propget, id(DISPID_LVGS_ITEM), helpstring("Retrieves a 'ListViewGroup' object from the collection that wraps the group identified by 'groupIdentifier'."), nonbrowsable]
		HRESULT Item([in] LONG groupIdentifier, [in, defaultvalue(gitID)] GroupIdentifierTypeConstants groupIdentifierType, [out, retval] IListViewGroup** ppGroup);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ListViewGroup objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_LVGS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a group to the listview</em>
		///
		/// Adds a group with the specified properties at the specified position in the control and returns a
		/// \c ListViewGroup object wrapping the inserted group.
		///
		/// \param[in] groupHeaderText The new group's header text. The number of characters in this text
		///            is not limited.
		/// \param[in] groupID The new group's ID. It must be unique and can't be set to -1.
		/// \param[in] insertAt The new group's zero-based index. If set to -1, the group will be inserted
		///            as the last group.
		/// \param[in] virtualItemCount If the listview control is in virtual mode, this parameter specifies
		///            the number of items in the new group.
		/// \param[in] headerAlignment The alignment of the new group's header text. Any of the values
		///            defined by the \c AlignmentConstants enumeration is valid.
		/// \param[in] iconIndex The zero-based index of the new group's header icon in the control's
		///            \c ilGroups imagelist. If set to -1, the group header doesn't contain an icon.
		/// \param[in] collapsible If \c True, the new group can be collapsed by the user.
		/// \param[in] collapsed If \c True, the new group is collapsed.
		/// \param[in] groupFooterText The new group's footer text. The number of characters in this text
		///            is not limited.
		/// \param[in] footerAlignment The alignment of the new group's footer text. Any of the values
		///            defined by the \c AlignmentConstants enumeration is valid.
		/// \param[in] subTitleText The new group's subtitle text. The maximum number of characters in this
		///            text is 4096.
		/// \param[in] taskText The new group's task link text. The maximum number of characters in this
		///            text is 4096.
		/// \param[in] subsetLinkText The text displayed as a link below the new group if not all items of the
		///            group are displayed. The maximum number of characters in this text is 4096.
		/// \param[in] subseted If \c True, the control displays only a subset of the new group's items if the
		///            control is not large enough to display all items without scrolling.
		/// \param[in] showHeader If \c False, the new group's header is not displayed.
		///
		/// \return The inserted group.
		///
		/// \remarks The \c virtualItemCount, \c iconIndex, \c collapsible, \c collapsed, \c groupFooterText,
		///          \c footerAlignment, \c subTitleText, \c taskText, \c subsetLinkText, \c subseted and
		///          \c showHeader parameters are ignored if comctl32.dll is used in a version older than
		///          6.10.\n
		///          The \c virtualItemCount parameter is ignored if the control is not in virtual mode.
		///
		/// \sa Count, Remove, RemoveAll, IListViewGroup::Text, IListViewGroup::ID, IListViewGroup::Position,
		///     IListViewGroup::ItemCount, IExplorerListView::VirtualMode, IListViewGroup::Alignment,
		///     AlignmentConstants, IListViewGroup::IconIndex, IExplorerListView::hImageList,
		///     ImageListConstants, IListViewGroup::Collapsible, IListViewGroup::Collapsed,
		///     IListViewGroup::SubtitleText, IListViewGroup::TaskText, IListViewGroup::SubsetLinkText,
		///     IListViewGroup::Subseted, IListViewGroup::ShowHeader
		[id(DISPID_LVGS_ADD), helpstring("Adds a new group with the specified properties.")]
		HRESULT Add([in] BSTR groupHeaderText, [in] LONG groupID, [in, defaultvalue(-1)] LONG insertAt, [in, defaultvalue(1)] LONG VirtualItemCount, [in, defaultvalue(alLeft)] AlignmentConstants headerAlignment, [in, defaultvalue(-1)] LONG IconIndex, [in, defaultvalue(0)] VARIANT_BOOL Collapsible, [in, defaultvalue(0)] VARIANT_BOOL Collapsed, [in, defaultvalue("")] BSTR groupFooterText, [in, defaultvalue(alLeft)] AlignmentConstants footerAlignment, [in, defaultvalue("")] BSTR SubTitleText, [in, defaultvalue("")] BSTR TaskText, [in, defaultvalue("")] BSTR SubsetLinkText, [in, defaultvalue(0)] VARIANT_BOOL Subseted, [in, defaultvalue(-1)] VARIANT_BOOL ShowHeader, [out, retval] IListViewGroup** ppAddedGroup);
		/// \brief <em>Retrieves whether the specified group is part of the group collection</em>
		///
		/// \param[in] groupIdentifier A value that identifies the group to be checked.
		/// \param[in] groupIdentifierType A value specifying the meaning of \c groupIdentifier. Any of the
		///            values defined by the \c GroupIdentifierTypeConstants enumeration is valid.
		///
		/// \return \c True, if the specified group is part of the collection; otherwise \c False.
		///
		/// \sa Add, Remove, GroupIdentifierTypeConstants
		[id(DISPID_LVGS_CONTAINS), helpstring("Retrieves whether the specified group is part of the group collection.")]
		HRESULT Contains([in] LONG groupIdentifier, [in, defaultvalue(gitID)] GroupIdentifierTypeConstants groupIdentifierType, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Counts the groups in the collection</em>
		///
		/// Retrieves the number of \c ListViewGroup objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_LVGS_COUNT), helpstring("Retrieves the number of 'ListViewGroup' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified group in the collection from the listview</em>
		///
		/// \param[in] groupIdentifier A value that identifies the listview group to be removed.
		/// \param[in] groupIdentifierType A value specifying the meaning of \c groupIdentifier. Any of the
		///            values defined by the \c GroupIdentifierTypeConstants enumeration is valid.
		///
		/// \sa Add, Count, RemoveAll, Contains, GroupIdentifierTypeConstants
		[id(DISPID_LVGS_REMOVE), helpstring("Removes the specified group in the collection from the control.")]
		HRESULT Remove([in] LONG groupIdentifier, [in, defaultvalue(gitID)] GroupIdentifierTypeConstants groupIdentifierType);
		/// \brief <em>Removes all groups in the collection from the listview</em>
		///
		/// \sa Add, Count, Remove
		[id(DISPID_LVGS_REMOVEALL), helpstring("Removes all groups in the collection from the control.")]
		HRESULT RemoveAll(void);
	}


	/// \interface IListViewSubItem
	/// \brief <em>Wraps an existing sub-item</em>
	///
	/// This interface is a wrapper around a sub-item.
	///
	/// \sa _IListViewSubItemEvents, IListViewSubItems, IExplorerListView, _IExplorerListViewEvents
	[
		object,
		uuid(A736B723-16ED-42c9-BD33-4ECD307038E9),
		dual,
		nonextensible,
		helpstring("IListViewSubItem interface"),
		pointer_default(unique)
	]
	interface IListViewSubItem : IDispatch
	{
		/// \brief <em>Specifies whether the sub-item is being activated</em>
		///
		/// Retrieves or sets whether the sub-item is currently being activated. If this property is set to
		/// \c True, the sub-item is being activated; otherwise not.
		///
		/// \remarks Current versions of Windows do not use this sub-item state.
		///
		/// \sa IExplorerListView::ItemActivationMode, _IExplorerListViewEvents::ItemActivate
		[propget, id(DISPID_LVSI_ACTIVATING), helpstring("Retrieves or sets whether the sub-item is currently being activated. Current versions of Windows do not use this sub-item state.")]
		HRESULT Activating([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVSI_ACTIVATING), helpstring("Retrieves or sets whether the sub-item is currently being activated. Current versions of Windows do not use this sub-item state.")]
		HRESULT Activating([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the sub-item's icon is drawn semi-transparent</em>
		///
		/// Retrieves or sets whether the sub-item's icon is drawn semi-transparent. If this property
		/// is set to \c True, the sub-item's icon is drawn semi-transparent; otherwise it's drawn
		/// normal. Usually you make items ghosted if they're hidden or selected for a cut-paste-operation.
		///
		/// \sa IconIndex
		[propget, id(DISPID_LVSI_GHOSTED), helpstring("Retrieves or sets whether the sub-item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVSI_GHOSTED), helpstring("Retrieves or sets whether the sub-item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the sub-item is tagged as "glowing"</em>
		///
		/// Retrieves or sets whether the sub-item is tagged as "glowing". A "glowing" sub-item doesn't look
		/// different, but you can use custom draw to accentuate sub-items that have this state.
		/// If this property is set to \c True, the sub-item is "glowing"; otherwise not.
		///
		/// \remarks Current versions of Windows do not use this sub-item state.
		///
		/// \sa _IExplorerListViewEvents::CustomDraw
		[propget, id(DISPID_LVSI_GLOWING), helpstring("Retrieves or sets whether the sub-item is tagged as 'glowing'. Current versions of Windows do not use this sub-item state.")]
		HRESULT Glowing([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVSI_GLOWING), helpstring("Retrieves or sets whether the sub-item is tagged as 'glowing'. Current versions of Windows do not use this sub-item state.")]
		HRESULT Glowing([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the sub-item's icon</em>
		///
		/// Retrieves or sets the zero-based index of the sub-item's icon in the control's \c ilSmall
		/// imagelist. If set to -1, the control will fire the \c ItemGetDisplayInfo event each time this
		/// property's value is required. If set to -2, no icon is displayed for this sub-item.
		///
		/// \remarks A value of -2 requires comctl32.dll version 5.81 or higher.
		///
		/// \sa IExplorerListView::hImageList, IExplorerListView::ShowSubItemImages,
		///     _IExplorerListViewEvents::ItemGetDisplayInfo, OverlayIndex, StateImageIndex, ImageListConstants
		[propget, id(DISPID_LVSI_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the sub-item's icon in the control's 'ilSmall' imagelist. A value of -2 requires comctl32.dll version 5.81 or higher."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVSI_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the sub-item's icon in the control's 'ilSmall' imagelist. A value of -2 requires comctl32.dll version 5.81 or higher."), nonbrowsable]
		HRESULT IconIndex([in] LONG newValue);
		/// \brief <em>Retrieves the sub-item's one-based index</em>
		///
		/// Retrieves an one-based index identifying this sub-item.
		///
		/// \remarks Although there're no advantages from accessing an item through the \c ListViewSubItem
		///          class, it is possible. The sub-item with the index 0 is the parent item itself.\n
		///          Although adding or removing columns changes the sub-items' indexes, the index is the best
		///          (and fastest) option to identify a sub-item.\n
		///          This property is read-only.
		///
		/// \sa ColumnIdentifierTypeConstants
		[propget, id(DISPID_LVSI_INDEX), helpstring("Retrieves the sub-item's one-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Specifies the sub-item's overlay icon</em>
		///
		/// Retrieves the zero-based index of the sub-item's overlay icon in the control's \c ilSmall
		/// imagelist. An index of 0 means that no overlay is drawn for this sub-item.
		///
		/// \sa IExplorerListView::hImageList, IconIndex, StateImageIndex, ImageListConstants
		[propget, id(DISPID_LVSI_OVERLAYINDEX), helpstring("Retrieves the zero-based index of the sub-item's overlay icon in the control's 'ilSmall' imagelist. If set to 0, no overlay is drawn for this sub-item."), nonbrowsable]
		HRESULT OverlayIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVSI_OVERLAYINDEX), helpstring("Retrieves the zero-based index of the sub-item's overlay icon in the control's 'ilSmall' imagelist. If set to 0, no overlay is drawn for this sub-item."), nonbrowsable]
		HRESULT OverlayIndex([in] LONG newValue);
		/// \brief <em>Retrieves the sub-item's parent item</em>
		///
		/// Retrieves the sub-item's parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IListViewItem
		[propget, id(DISPID_LVSI_PARENTITEM), helpstring("Retrieves the sub-item's parent item."), nonbrowsable]
		HRESULT ParentItem([out, retval] IListViewItem** ppParentItem);
		/// \brief <em>Specifies the sub-item's state image</em>
		///
		/// Retrieves or sets the one-based index of the sub-item's state image in the control's \c ilState
		/// imagelist. The state image is drawn next to the sub-item and usually a checkbox.
		///
		/// \remarks On current versions of Windows state images for sub-items are drawn, but misplaced and
		///          non-functional, so there's not much use for this property. Maybe this will change with
		///          future versions of Windows.
		///
		/// \sa IExplorerListView::hImageList, IconIndex, OverlayIndex, ImageListConstants
		[propget, id(DISPID_LVSI_STATEIMAGEINDEX), helpstring("Retrieves the one-based index of the sub-item's state image in the control's 'ilState' imagelist. Current versions of Windows don't support this."), nonbrowsable]
		HRESULT StateImageIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVSI_STATEIMAGEINDEX), helpstring("Retrieves the one-based index of the sub-item's state image in the control's 'ilState' imagelist. Current versions of Windows don't support this."), nonbrowsable]
		HRESULT StateImageIndex([in] LONG newValue);
		/// \brief <em>Specifies the sub-item's text</em>
		///
		/// Retrieves the sub-item's text. The maximum number of characters in this text is 260. If set to
		/// \c vbNullString, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \remarks This is the default property of the \c IListViewSubItem interface.
		///
		/// \sa _IExplorerListViewEvents::ItemGetDisplayInfo
		[propget, id(DISPID_LVSI_TEXT), helpstring("Retrieves or sets the sub-item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVSI_TEXT), helpstring("Retrieves or sets the sub-item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([in] BSTR newValue);

		/// \brief <em>Retrieves the bounding rectangle of either the sub-item or a part of it</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the
		/// sub-item or a part of it.
		///
		/// \param[in] rectangleType The rectangle to retrieve. Any of the values defined by the
		///            \c ItemRectangleTypeConstants enumeration is valid.
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \sa ItemRectangleTypeConstants
		[id(DISPID_LVSI_GETRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the sub-item or a part of it.")]
		HRESULT GetRectangle(ItemRectangleTypeConstants rectangleType, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
	}


	/// \interface IListViewSubItems
	/// \brief <em>Manages a collection of \c ListViewSubItem objects</em>
	///
	/// This interface provides easy access to collections of \c ListViewSubItem objects. A
	/// \c ListViewSubItems object is used to group a listview item's sub-items.
	///
	/// \sa _IListViewSubItemsEvents, IListViewSubItem, IExplorerListView
	[
		object,
		uuid(16E67EDA-20AB-44d4-93F7-42D8DDF117F4),
		dual,
		nonextensible,
		helpstring("IListViewSubItems interface"),
		pointer_default(unique)
	]
	interface IListViewSubItems : IDispatch
	{
		/// \brief <em>Retrieves a \c ListViewSubItem object from the collection</em>
		///
		/// Retrieves a \c ListViewSubItem object from the collection that wraps the sub-item identified by
		/// \c subItemIdentifier.
		///
		/// \param[in] subItemIdentifier A value that identifies the sub-item to be retrieved.
		/// \param[in] subItemIdentifierType A value specifying the meaning of \c subItemIdentifier. Any of
		///            the values defined by the \c ColumnIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IListViewSubItems interface.\n
		///          This property is read-only.
		///
		/// \sa IListViewSubItem, ColumnIdentifierTypeConstants
		[propget, id(DISPID_LVSIS_ITEM), helpstring("Retrieves a 'ListViewSubItem' object from the collection that wraps the sub-item identified by 'subItemIdentifier'."), nonbrowsable]
		HRESULT Item([in] LONG subItemIdentifier, [in, defaultvalue(citIndex)] ColumnIdentifierTypeConstants subItemIdentifierType, [out, retval] IListViewSubItem** ppSubItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ListViewSubItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_LVSIS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);
		/// \brief <em>Retrieves the sub-items' parent item</em>
		///
		/// Retrieves the item being the parent item of all sub-items in the collection.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IListViewItem
		[propget, id(DISPID_LVSIS_PARENTITEM), helpstring("Retrieves the item being the parent item of all sub-items in the collection."), nonbrowsable]
		HRESULT ParentItem([out, retval] IListViewItem** ppParentItem);

		/// \brief <em>Counts the sub-items in the collection</em>
		///
		/// Retrieves the number of \c ListViewSubItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		[id(DISPID_LVSIS_COUNT), helpstring("Retrieves the number of 'ListViewSubItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
	}


	/// \interface IVirtualListViewItem
	/// \brief <em>Wraps a not existing item</em>
	///
	/// This interface is a wrapper around a listview item that does not yet or not anymore exist within
	/// the control.
	///
	/// \sa _IVirtualListViewItemEvents, IListViewItem, _IExplorerListViewEvents
	[
		object,
		uuid(40A71549-169A-4984-A28E-824B2D6AE00C),
		dual,
		nonextensible,
		helpstring("IVirtualListViewItem interface"),
		pointer_default(unique)
	]
	interface IVirtualListViewItem : IDispatch
	{
		/// \brief <em>Retrieves whether the item is being activated</em>
		///
		/// Retrieves whether the item will be or was being activated. If this property is set to
		/// \c True, the item will be or was being activated; otherwise not.
		///
		/// \remarks Current versions of Windows do not use this item state.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::ItemActivationMode, _IExplorerListViewEvents::ItemActivate
		[propget, id(DISPID_VLVI_ACTIVATING), helpstring("Retrieves whether the item will be or was being activated. Current versions of Windows do not use this item state.")]
		HRESULT Activating([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item is the control's caret item</em>
		///
		/// Retrieves whether the item will be or was the control's caret item, i. e. it will have or had the
		/// focus. If it will be or was the caret item, this property is set to \c True; otherwise it's set
		/// to \c False.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Selected, IExplorerListView::CaretItem
		[propget, id(DISPID_VLVI_CARET), helpstring("Retrieves whether the item will be or was the current caret item, i. e. it will have or had the focus.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item is highlighted as drop target</em>
		///
		/// Retrieves whether the item will be or was drawn as the target of a drag'n'drop operation,
		/// i. e. whether its background will be or was highlighted. If this property is set to \c True,
		/// the item will be or was highlighted; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::DropHilitedItem, Selected
		[propget, id(DISPID_VLVI_DROPHILITED), helpstring("Retrieves whether the item is highlighted as a target of a drag'n'drop operation.")]
		HRESULT DropHilited([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item's icon is drawn semi-transparent</em>
		///
		/// Retrieves whether the item's icon will be or was drawn semi-transparent. If this property
		/// is set to \c True, the item's icon will be or was drawn semi-transparent; otherwise it will
		/// be or was drawn normal. Usually you make items ghosted if they're hidden or selected for a
		/// cut-paste-operation.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IconIndex
		[propget, id(DISPID_VLVI_GHOSTED), helpstring("Retrieves whether the item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the sub-item is tagged as "glowing"</em>
		///
		/// Retrieves whether the item will be or was tagged as "glowing". A "glowing" item doesn't look
		/// different, but you can use custom draw to accentuate items that have this state.
		/// If this property is set to \c True, the item will be or was "glowing"; otherwise not.
		///
		/// \remarks Current versions of Windows do not use this item state.\n
		///          This property is read-only.
		///
		/// \sa Selected, _IExplorerListViewEvents::CustomDraw
		[propget, id(DISPID_VLVI_GLOWING), helpstring("Retrieves whether the item will be or was tagged as 'glowing'. Current versions of Windows do not use this item state.")]
		HRESULT Glowing([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the group that the item is part of</em>
		///
		/// Retrieves the item's group. If set to \c Nothing, the item won't or didn't belong to any group.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::Groups
		[propget, id(DISPID_VLVI_GROUP), helpstring("Retrieves the item's group. If set to 'Nothing', the item won't or didn't belong to any group. Requires comctl32.dll version 6.0 or higher."), nonbrowsable]
		HRESULT Group([out, retval] IListViewGroup** ppGroup);
		/// \brief <em>Retrieves the item's icon</em>
		///
		/// Retrieves the zero-based index of the item's icon in the control's \c ilSmall, \c ilLarge,
		/// \c ilExtraLarge and \c ilHighResolution imagelists. If set to -1, the control will fire the
		/// \c ItemGetDisplayInfo event each time this property's value is required. If set to -2, no icon is
		/// displayed for this item.
		///
		/// \remarks A value of -2 requires comctl32.dll version 5.81 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::hImageList, _IExplorerListViewEvents::ItemGetDisplayInfo, OverlayIndex,
		///     StateImageIndex, ImageListConstants
		[propget, id(DISPID_VLVI_ICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's imagelists. A value of -2 requires comctl32.dll version 5.81 or higher."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's indentation</em>
		///
		/// Retrieves the item's indentation in 'Details' view in image widths. If set to 1, the item's
		/// indentation will be 1 image width; if set to 2, it will be 2 image widths and so on. If set to -1,
		/// the control will fire the \c ItemGetDisplayInfo event each time this property's value is required.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::View, IExplorerListView::hImageList,
		///     _IExplorerListViewEvents::ItemGetDisplayInfo
		[propget, id(DISPID_VLVI_INDENT), helpstring("Retrieves the item's indentation in image widths. If set to -1, the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Indent([out, retval] OLE_XSIZE_PIXELS* pValue);
		/// \brief <em>Retrieves the item's zero-based index</em>
		///
		/// Retrieves the zero-based index that will identify or has identified the item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IListViewItems::Add
		[propget, id(DISPID_VLVI_INDEX), helpstring("Retrieves the item's zero-based index."), nonbrowsable]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's associated data</em>
		///
		/// Retrieves the \c Long value that will be or was associated with the item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _IExplorerListViewEvents::FreeItemData
		[propget, id(DISPID_VLVI_ITEMDATA), helpstring("Retrieves the Long value associated with the item.")]
		HRESULT ItemData([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's overlay icon</em>
		///
		/// Retrieves the one-based index of the item's overlay icon in the control's \c ilSmall, \c ilLarge,
		/// \c ilExtraLarge and \c ilHighResolution imagelists. An index of 0 means that no overlay will be or
		/// was drawn for this item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::hImageList, IconIndex, StateImageIndex, ImageListConstants
		[propget, id(DISPID_VLVI_OVERLAYINDEX), helpstring("Retrieves the one-based index of the overlay icon in the control's imagelists. If set to 0, no overlay is drawn for this item."), nonbrowsable]
		HRESULT OverlayIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves whether the item is selected</em>
		///
		/// Retrieves whether the item will be or was drawn as a selected item, i. e. whether its
		/// background will be or was highlighted. If this property is set to \c True, the item will be
		/// or was highlighted; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::MultiSelect, DropHilited
		[propget, id(DISPID_VLVI_SELECTED), helpstring("Retrieves whether the item is drawn as a selected item.")]
		HRESULT Selected([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the item's state image</em>
		///
		/// Retrieves the one-based index of the item's state image in the control's \c ilState imagelist. The
		/// state image is drawn next to the item and usually a checkbox.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::hImageList, IconIndex, OverlayIndex, ImageListConstants
		[propget, id(DISPID_VLVI_STATEIMAGEINDEX), helpstring("Retrieves the one-based index of the item's state image in the control's 'ilState' imagelist."), nonbrowsable]
		HRESULT StateImageIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's text</em>
		///
		/// Retrieves the item's text. The maximum number of characters in this text is 260. If set to
		/// \c vbNullString, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \remarks This is the default property of the \c IVirtualListViewItem interface.\n
		///          This property is read-only.
		///
		/// \sa _IExplorerListViewEvents::ItemGetDisplayInfo
		[propget, id(DISPID_VLVI_TEXT), helpstring("Retrieves the item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the sub-items that are displayed for this item in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves an array of \c TILEVIEWSUBITEM structs which define the sub-items that will be or were
		/// displayed below the item's text in 'Tiles' and 'Extended Tiles' view. If set to an empty array, no
		/// details will be or were displayed.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerListView::View, IExplorerListView::Columns, IExplorerListView::TileViewItemLines,
		///     Text, TILEVIEWSUBITEM
		[propget, id(DISPID_VLVI_TILEVIEWCOLUMNS), helpstring("Retrieves an array of 'TILEVIEWSUBITEM' structs which define the sub-items that will be or were displayed below the item's text in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewColumns([out, retval] VARIANT* pValue);
	}


	/// \interface IListViewItem
	/// \brief <em>Wraps an existing item</em>
	///
	/// This interface is a wrapper around an item that - unlike an item wrapped by
	/// \c IVirtualListViewItem - really exists within the control.
	///
	/// \sa _IListViewItemEvents, IVirtualListViewItem, IListViewItems, IListViewItemContainer,
	///     IExplorerListView, _IExplorerListViewEvents
	[
		object,
		uuid(EFFA0D41-CB1D-41a5-917C-642BE307F245),
		dual,
		nonextensible,
		helpstring("IListViewItem interface"),
		pointer_default(unique)
	]
	interface IListViewItem : IDispatch
	{
		/// \brief <em>Specifies whether the item is being activated</em>
		///
		/// Retrieves or sets whether the item is currently being activated. If this property is set to
		/// \c True, the item is being activated; otherwise not.
		///
		/// \remarks Current versions of Windows do not use this item state.
		///
		/// \sa IExplorerListView::ItemActivationMode, IExplorerListView::CallBackMask,
		///     _IExplorerListViewEvents::ItemActivate
		[propget, id(DISPID_LVI_ACTIVATING), helpstring("Retrieves or sets whether the item is currently being activated. Current versions of Windows do not use this item state.")]
		HRESULT Activating([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVI_ACTIVATING), helpstring("Retrieves or sets whether the item is currently being activated. Current versions of Windows do not use this item state.")]
		HRESULT Activating([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves whether the item is the control's selection anchor item</em>
		///
		/// Retrieves whether the item is the control's anchor item, i. e. it's the item with which
		/// range-selection begins. If it is the anchor item, this property is set to \c True; otherwise
		/// it's set to \c False.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Caret, Selected, IExplorerListView::MultiSelect, IExplorerListView::AnchorItem
		[propget, id(DISPID_LVI_ANCHOR), helpstring("Retrieves whether the item is the current anchor item, i. e. it's the item with which range-selection begins.")]
		HRESULT Anchor([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item is the control's caret item</em>
		///
		/// Retrieves whether the item is the control's caret item, i. e. it has the focus. If it is the
		/// caret item, this property is set to \c True; otherwise it's set to \c False.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Anchor, Selected, IExplorerListView::CaretItem, IExplorerListView::CallBackMask
		[propget, id(DISPID_LVI_CARET), helpstring("Retrieves whether the item is the current caret item, i. e. it has the focus.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item is highlighted as drop target</em>
		///
		/// Retrieves whether the item is drawn as the target of a drag'n'drop operation, i. e. whether
		/// its background is highlighted. If this property is set to \c True, the item is highlighted;
		/// otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::DropHilitedItem, IExplorerListView::CallBackMask, Selected
		[propget, id(DISPID_LVI_DROPHILITED), helpstring("Retrieves whether the item is highlighted as a target of a drag'n'drop operation.")]
		HRESULT DropHilited([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies whether the item's icon is drawn semi-transparent</em>
		///
		/// Retrieves or sets whether the item's icon is drawn semi-transparent. If this property
		/// is set to \c True, the item's icon is drawn semi-transparent; otherwise it's drawn
		/// normal. Usually you make items ghosted if they're hidden or selected for a cut-paste-operation.
		///
		/// \sa IconIndex, IExplorerListView::CallBackMask
		[propget, id(DISPID_LVI_GHOSTED), helpstring("Retrieves or sets whether the item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVI_GHOSTED), helpstring("Retrieves or sets whether the item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the item is tagged as "glowing"</em>
		///
		/// Retrieves or sets whether the item is tagged as "glowing". A "glowing" item doesn't look
		/// different, but you can use custom draw to accentuate items that have this state.
		/// If this property is set to \c True, the item is "glowing"; otherwise not.
		///
		/// \remarks Current versions of Windows do not use this item state.
		///
		/// \sa Selected, IExplorerListView::CallBackMask, _IExplorerListViewEvents::CustomDraw
		[propget, id(DISPID_LVI_GLOWING), helpstring("Retrieves or sets whether the item is tagged as 'glowing'. Current versions of Windows do not use this item state.")]
		HRESULT Glowing([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVI_GLOWING), helpstring("Retrieves or sets whether the item is tagged as 'glowing'. Current versions of Windows do not use this item state.")]
		HRESULT Glowing([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the group that the item is part of</em>
		///
		/// Retrieves or sets the item's group. If set to \c Nothing, the item doesn't belong to any group.
		///
		/// \remarks Due to limitations in Windows' \c SysListView32 implementation, changing this property
		///          from a valid group to \c Nothing won't have any effect.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa IExplorerListView::Groups
		[propget, id(DISPID_LVI_GROUP), helpstring("Retrieves or sets the item's group. If set to 'Nothing', the item doesn't belong to any group. Requires comctl32.dll version 6.0 or higher."), nonbrowsable]
		HRESULT Group([out, retval] IListViewGroup** ppGroup);
		[propputref, id(DISPID_LVI_GROUP), helpstring("Retrieves or sets the item's group. If set to 'Nothing', the item doesn't belong to any group. Requires comctl32.dll version 6.0 or higher."), nonbrowsable]
		HRESULT Group([in] IListViewGroup* pNewGroup);
		/// \brief <em>Retrieves the zero-based index of the group containing the item</em>
		///
		/// Retrieves the zero-based index of the group in which the item is displayed. In virtual mode, the
		/// same item can be in multiple groups. All copies of the item have the same text, the same icon
		/// index, the same selection state etc., but properties like the item rectangle are different for each
		/// copy. The \c GroupIndex property holds the zero-based index of the group that contains the copy
		/// wrapped by the object.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Index, IExplorerListView::VirtualMode
		[propget, id(DISPID_LVI_GROUPINDEX), helpstring("Retrieves the zero-based index of the group in which the item is displayed.")]
		HRESULT GroupIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves whether the item is the control's hot item</em>
		///
		/// Retrieves whether the item is the control's hot item. Usually the hot item is underlined and/or
		/// highlighted. If it is the hot item, this property is set to \c True; otherwise it's set to \c False.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerListView::HotItem, IExplorerListView::ItemActivationMode,
		///     IExplorerListView::UnderlinedItems
		[propget, id(DISPID_LVI_HOT), helpstring("Retrieves whether the item is the control's hot item. Usually the hot item is underlined and/or highlighted.")]
		HRESULT Hot([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies the item's icon</em>
		///
		/// Retrieves or sets the zero-based index of the item's icon in the control's \c ilSmall, \c ilLarge,
		/// \c ilExtraLarge and \c ilHighResolution imagelists. If set to -1, the control will fire the
		/// \c ItemGetDisplayInfo event each time this property's value is required. If set to -2, no icon is
		/// displayed for this item.
		///
		/// \remarks A value of -2 requires comctl32.dll version 5.81 or higher.
		///
		/// \sa IExplorerListView::hImageList, _IExplorerListViewEvents::ItemGetDisplayInfo, OverlayIndex,
		///     StateImageIndex, ImageListConstants
		[propget, id(DISPID_LVI_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the item's icon in the control's imagelists. A value of -2 requires comctl32.dll version 5.81 or higher."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVI_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the item's icon in the control's imagelists. A value of -2 requires comctl32.dll version 5.81 or higher."), nonbrowsable]
		HRESULT IconIndex([in] LONG newValue);
		/// \brief <em>Retrieves the item's ID</em>
		///
		/// Retrieves an unique ID identifying this item.
		///
		/// \remarks An item's ID will never change.\n
		///          This property is read-only.
		///
		/// \sa Index, GroupIndex, ItemIdentifierTypeConstants
		[propget, id(DISPID_LVI_ID), helpstring("Retrieves the item's unique ID.")]
		HRESULT ID([out, retval] LONG* pValue);
		/// \brief <em>Specifies the item's indentation</em>
		///
		/// Retrieves or sets the item's indentation in 'Details' view in image widths. If set to 1, the item's
		/// indentation will be 1 image width; if set to 2, it will be 2 image widths and so on. If set to -1,
		/// the control will fire the \c ItemGetDisplayInfo event each time this property's value is required.
		///
		/// \remarks The \c ilSmall imagelist must be valid, if you want to use item indentations.
		///
		/// \sa IExplorerListView::View, IExplorerListView::hImageList,
		///     _IExplorerListViewEvents::ItemGetDisplayInfo, ImageListConstants
		[propget, id(DISPID_LVI_INDENT), helpstring("Retrieves or sets the item's indentation in image widths. If set to -1, the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Indent([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_LVI_INDENT), helpstring("Retrieves or sets the item's indentation in image widths. If set to -1, the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Indent([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Retrieves the item's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this item.
		///
		/// \remarks Although adding or removing items changes other items' indexes, the index is the best
		///          (and fastest) option to identify an item.\n
		///          This property is read-only.
		///
		/// \sa ID, GroupIndex, ItemIdentifierTypeConstants
		[propget, id(DISPID_LVI_INDEX), helpstring("Retrieves the item's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Specifies the item's associated data</em>
		///
		/// Retrieves or sets the \c Long value associated with the item. Use this property to associate
		/// any data with the item.
		///
		/// \sa _IExplorerListViewEvents::FreeItemData
		[propget, id(DISPID_LVI_ITEMDATA), helpstring("Retrieves or sets the Long value associated with the item.")]
		HRESULT ItemData([out, retval] LONG* pValue);
		[propput, id(DISPID_LVI_ITEMDATA), helpstring("Retrieves or sets the Long value associated with the item.")]
		HRESULT ItemData([in] LONG newValue);
		/// \brief <em>Specifies the item's overlay icon</em>
		///
		/// Retrieves the one-based index of the item's overlay icon in the control's \c ilSmall, \c ilLarge,
		/// \c ilExtraLarge and \c ilHighResolution imagelists. An index of 0 means that no overlay is drawn
		/// for this item.
		///
		/// \sa IExplorerListView::hImageList, IExplorerListView::CallBackMask, IconIndex, StateImageIndex,
		///     ImageListConstants
		[propget, id(DISPID_LVI_OVERLAYINDEX), helpstring("Retrieves the one-based index of the item's overlay icon in the control's imagelists. If set to 0, no overlay is drawn for this item."), nonbrowsable]
		HRESULT OverlayIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVI_OVERLAYINDEX), helpstring("Retrieves the one-based index of the item's overlay icon in the control's imagelists. If set to 0, no overlay is drawn for this item."), nonbrowsable]
		HRESULT OverlayIndex([in] LONG newValue);
		/// \brief <em>Specifies whether the item is selected</em>
		///
		/// Retrieves or sets whether the item is drawn as a selected item, i. e. whether its background
		/// is highlighted. If this property is set to \c True, the item is highlighted; otherwise not.
		///
		/// \sa IExplorerListView::MultiSelect, Anchor, Caret, DropHilited, IExplorerListView::CaretItem,
		///     IExplorerListView::CallBackMask
		[propget, id(DISPID_LVI_SELECTED), helpstring("Retrieves or sets whether the item is drawn as a selected item.")]
		HRESULT Selected([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVI_SELECTED), helpstring("Retrieves or sets whether the item is drawn as a selected item.")]
		HRESULT Selected([in] VARIANT_BOOL newValue);
		#ifdef INCLUDESHELLBROWSERINTERFACE
			/// \brief <em>Retrieves the listview item's corresponding \c ShellListViewItem object</em>
			///
			/// Retrieves the \c ShellListViewItem object of this listview item from the attached
			/// \c ShellListView control.
			///
			/// \remarks This property is read-only.
			[propget, id(DISPID_LVI_SHELLLISTVIEWITEMOBJECT), helpstring("Retrieves the listview item's corresponding 'ShellListViewItem' object."), nonbrowsable]
			HRESULT ShellListViewItemObject([out, retval] IDispatch** ppItem);
		#endif
		/// \brief <em>Specifies the item's state image</em>
		///
		/// Retrieves or sets the one-based index of the item's state image in the control's \c ilState
		/// imagelist. The state image is drawn next to the item and usually a checkbox.
		///
		/// \sa IExplorerListView::hImageList, IExplorerListView::CallBackMask, IconIndex, OverlayIndex,
		///     ImageListConstants
		[propget, id(DISPID_LVI_STATEIMAGEINDEX), helpstring("Retrieves or sets the one-based index of the item's state image in the control's 'ilState' imagelist."), nonbrowsable]
		HRESULT StateImageIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_LVI_STATEIMAGEINDEX), helpstring("Retrieves or sets the one-based index of the item's state image in the control's 'ilState' imagelist."), nonbrowsable]
		HRESULT StateImageIndex([in] LONG newValue);
		/// \brief <em>Retrieves the item's sub-items</em>
		///
		/// Retrieves a collection object wrapping all sub-items of this item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IListViewItems
		[propget, id(DISPID_LVI_SUBITEMS), helpstring("Retrieves a collection object wrapping all sub-items of this item."), nonbrowsable]
		HRESULT SubItems([out, retval] IListViewSubItems** ppSubItems);
		/// \brief <em>Specifies the item's text</em>
		///
		/// Retrieves or sets the item's text. The maximum number of characters in this text is 260. If set
		/// to \c vbNullString, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \remarks This is the default property of the \c IListViewItem interface.
		///
		/// \sa _IExplorerListViewEvents::ItemGetDisplayInfo
		[propget, id(DISPID_LVI_TEXT), helpstring("Retrieves or sets the item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([out, retval] BSTR* pValue);
		[propput, id(DISPID_LVI_TEXT), helpstring("Retrieves or sets the item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([in] BSTR newValue);
		/// \brief <em>Defines the sub-items that are displayed for this item in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets an array of \c TILEVIEWSUBITEM structs which define the sub-items that will be
		/// displayed below the item's text in 'Tiles' and 'Extended Tiles' view. If set to an empty array, no
		/// details will be displayed. If set to \c Empty, the control will fire the \c ItemGetDisplayInfo
		/// event each time this property's value is required.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa IExplorerListView::View, IExplorerListView::Columns, IExplorerListView::TileViewItemLines,
		///     Text, _IExplorerListViewEvents::ItemGetDisplayInfo, TILEVIEWSUBITEM
		[propget, id(DISPID_LVI_TILEVIEWCOLUMNS), helpstring("Retrieves or sets an array of 'TILEVIEWSUBITEM' structs which define the sub-items that will be displayed below the item's text in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewColumns([out, retval] VARIANT* pValue);
		[propput, id(DISPID_LVI_TILEVIEWCOLUMNS), helpstring("Retrieves or sets an array of 'TILEVIEWSUBITEM' structs which define the sub-items that will be displayed below the item's text in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewColumns([in] VARIANT newValue);
		/// \brief <em>Retrieves the working area that the item is part of</em>
		///
		/// Retrieves the item's working area. If the control doesn't have multiple working areas, this
		/// property's value will be \c Nothing.
		///
		/// \remarks The working area, that the item belongs to, depends on the item's position.\n
		///          This property is read-only.
		///
		/// \sa SetPosition, GetPosition, IExplorerListView::WorkAreas
		[propget, id(DISPID_LVI_WORKAREA), helpstring("Retrieves the item's working area, if the control has multiple working areas."), nonbrowsable]
		HRESULT WorkArea([out, retval] IListViewWorkArea** ppWorkArea);

		/// \brief <em>Retrieves an imagelist containing the item's drag image</em>
		///
		/// Retrieves the handle to an imagelist containing a bitmap that can be used to visualize
		/// dragging of this item.
		///
		/// \param[out] xUpperLeft The x-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		/// \param[out] yUpperLeft The y-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		///
		/// \return The handle to the imagelist containing the drag image.
		///
		/// \remarks The caller is responsible for destroying the imagelist.
		[id(DISPID_LVI_CREATEDRAGIMAGE), helpstring("Retrieves the handle to an imagelist containing a bitmap that can be used to visualize dragging of this item.")]
		HRESULT CreateDragImage([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xUpperLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yUpperLeft, [out, retval] OLE_HANDLE* phImageList);
		/// \brief <em>Ensures the item is visible</em>
		///
		/// Ensures that the item is visible, scrolling the listview, if necessary.
		///
		/// \param[in] mustBeEntirelyVisible Specifies whether the item must be entirely visible. If set
		///            to \c True, the control ensures that the item is entirely visible; otherwise it's
		///            enough if the item is partially visible.
		///
		/// \sa IsVisible
		[id(DISPID_LVI_ENSUREVISIBLE), helpstring("Ensures that the item is visible, scrolling the listview, if necessary.")]
		HRESULT EnsureVisible([in, defaultvalue(-1)] VARIANT_BOOL mustBeEntirelyVisible);
		/// \brief <em>Finds the next item with the specified characteristics</em>
		///
		/// Retrieves the control's next item with the specified characteristics. The item represented by the
		/// \c ListViewItem object is used as the starting point, but is excluded from the search.
		///
		/// \param[in] searchMode A value specifying the meaning of the \c searchFor parameter. Any of the
		///            values defined by the \c SearchModeConstants enumeration is valid.
		/// \param[in] searchFor The criterion that the item must fulfill to be returned by this method. This
		///            parameter's format depends on the \c searchMode parameter:
		///            - \c smItemData An integer value.
		///            - \c smText A string value.
		///            - \c smPartialText A string value.
		///            - \c smNearestPosition An array containing two integer values. The first one
		///              specifies the x-coordinate, the second one the y-coordinate (both in pixels and
		///              relative to the control's upper-left corner).
		/// \param[in] searchDirection A value specifying the direction to search. Any of the values
		///            defined by the \c SearchDirectionConstants enumeration is valid. This parameter is
		///            ignored if the \c searchFor parameter is not set to \c smNearestPosition.
		/// \param[in] wrapAtLastItem If set to \c True, the search will be continued with the first item
		///            if the last item is reached. This parameter is ignored if \c searchMode is set to
		///            \c smNearestPosition.
		///
		/// \return The item with the specified characteristics. \c Nothing if no matching item was found.
		///
		/// \sa IExplorerListView::FindItem, SearchModeConstants, SearchDirectionConstants
		[id(DISPID_LVI_FINDNEXTITEM), helpstring("Retrieves the control's next item with the specified characteristics.")]
		HRESULT FindNextItem([in] SearchModeConstants searchMode, [in] VARIANT searchFor, [in, defaultvalue(sdNoneSpecific)] SearchDirectionConstants searchDirection, [in, defaultvalue(-1)] VARIANT_BOOL wrapAtLastItem, [out, retval] IListViewItem** ppFoundItem);
		/// \brief <em>Retrieves the item's position</em>
		///
		/// Retrieves the item's position (in pixels) within the control's client area.
		///
		/// \param[in,out] x The x-coordinate (in pixels) of the upper-left corner of the item's bounding
		///                rectangle relative to the control's upper-left corner.
		/// \param[in,out] y The y-coordinate (in pixels) of the upper-left corner of the item's bounding
		///                rectangle relative to the control's upper-left corner.
		///
		/// \sa SetPosition, GetRectangle
		[id(DISPID_LVI_GETPOSITION), helpstring("Retrieves the item's position (in pixels) within the control's client area.")]
		HRESULT GetPosition([in, out] OLE_XPOS_PIXELS* x, [in, out] OLE_YPOS_PIXELS* y);
		/// \brief <em>Retrieves the bounding rectangle of either the item or a part of it</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the
		/// item or a part of it.
		///
		/// \param[in] rectangleType The rectangle to retrieve. Any of the values defined by the
		///            \c ItemRectangleTypeConstants enumeration is valid.
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \sa ItemRectangleTypeConstants
		[id(DISPID_LVI_GETRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the item or a part of it.")]
		HRESULT GetRectangle(ItemRectangleTypeConstants rectangleType, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
		/// \brief <em>Retrieves whether the item is visible</em>
		///
		/// \return \c True, if the item is visible; otherwise \c False.
		///
		/// \remarks Microsoft's implementation of this feature in \c SysListView32 seems to be a bit buggy,
		///          so expect this method to return the wrong value in some cases.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa EnsureVisible, GetPosition, SetPosition
		[id(DISPID_LVI_ISVISIBLE), helpstring("Retrieves whether the item is visible. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT IsVisible([out, retval] VARIANT_BOOL* pVisible);
		/// \brief <em>Sets the item's info tip text</em>
		///
		/// Sets the item's info tip text. If the mouse cursor is located over the item while this method is
		/// called, the control displays a tool tip with the specified text. Otherwise the method does
		/// nothing.\n
		/// This method is for scenarios in which retrieving an item's info tip text is time-consuming. The
		/// client application would handle the \c ItemGetInfoTipText event by starting info tip extraction and
		/// returning an empty info tip text. After extracting the text asynchronously, it would call
		/// \c SetInfoTipText to display it.
		///
		/// \param[in] text The info tip text to display.
		///
		/// \return \c True on success (this also means that the mouse cursor is located over the item);
		///         otherwise \c False.
		///
		/// \remarks The info tip text is not persisted.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa _IExplorerListViewEvents::ItemGetInfoTipText
		[id(DISPID_LVI_SETINFOTIPTEXT), helpstring("Sets the item's info tip text. If the mouse cursor is not located over the item, this method does nothing. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SetInfoTipText([in] BSTR Text, [out, retval] VARIANT_BOOL* pSuccess);
		/// \brief <em>Sets the item's position</em>
		///
		/// Sets the item's position (in pixels) within the control's client area. This affects 'Icons',
		/// 'Small Icons', 'Tiles' and 'Extended Tiles' view only.
		///
		/// \param[in] x The x-coordinate (in pixels) of the upper-left corner of the item's bounding
		///            rectangle relative to the control's upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the upper-left corner of the item's bounding
		///            rectangle relative to the control's upper-left corner.
		///
		/// \sa GetPosition, GetRectangle, IExplorerListView::View
		[id(DISPID_LVI_SETPOSITION), helpstring("Sets the item's position (in pixels) within the control's client area. This affects 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view only.")]
		HRESULT SetPosition([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Starts editing the item's text</em>
		///
		/// \sa IExplorerListView::EndLabelEdit, IExplorerListView::hWndEdit,
		///     _IExplorerListViewEvents::StartingLabelEditing, _IExplorerListViewEvents::RenamingItem
		[id(DISPID_LVI_STARTLABELEDITING), helpstring("Starts editing the item's text.")]
		HRESULT StartLabelEditing(void);
		/// \brief <em>Updates the item</em>
		///
		/// Updates the item. If the \c IExplorerListView::AutoArrangeItems property is not set to \c aaiNone,
		/// this method causes the control's content to be arranged.
		///
		/// \sa IExplorerListView::AutoArrangeItems, IExplorerListView::RedrawItems
		[id(DISPID_LVI_UPDATE), helpstring("Updates the item.")]
		HRESULT Update(void);
	}


	/// \interface IListViewItems
	/// \brief <em>Manages a collection of \c ListViewItem objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c ListViewItem
	/// objects. A \c ListViewItems object is used to group items that have certain properties in
	/// common.
	///
	/// \sa _IListViewItemsEvents, IListViewItem, IListViewItemContainer, IExplorerListView
	[
		object,
		uuid(408650F1-D2C3-4f7a-A39C-CB761ED6EB05),
		dual,
		nonextensible,
		helpstring("IListViewItems interface"),
		pointer_default(unique)
	]
	interface IListViewItems : IDispatch
	{
		/// \brief <em>Specifies whether filters for string properties are case sensitive</em>
		///
		/// Retrieves or sets whether string comparisons, that are done when applying the filters on an item,
		/// are case sensitive. If this property is set to \c True, string comparisons are case sensitive;
		/// otherwise not.
		///
		/// \sa Filter, ComparisonFunction
		[propget, id(DISPID_LVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_LVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies a filter's comparison function</em>
		///
		/// Retrieves or sets an item filter's comparison function. This property takes the address of a
		/// function having the following signature:\n
		/// \code
		///   IsEqual(ByVal itemProperty As T, ByVal pattern As T) As Long
		/// \endcode
		/// where T stands for the filtered property's type (\c Boolean, \c Long, array of \c Long, \c String,
		/// \c IListViewGroup or \c IListViewWorkArea). This function must compare its arguments and return a
		/// non-zero value if the arguments are equal and zero otherwise.\n
		/// If this property is set to 0, the control compares the values itself using the "=" operator
		/// (\c lstrcmp and \c lstrcmpi for string filters).
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c FilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, CaseSensitiveFilters, IListViewGroup, IListViewWorkArea, FilteredPropertyConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647488.aspx">lstrcmp</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647489.aspx">lstrcmpi</a>
		[propget, id(DISPID_LVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function.")]
		HRESULT ComparisonFunction([in] FilteredPropertyConstants filteredProperty, [out, retval] LONG* pValue);
		[propput, id(DISPID_LVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function.")]
		HRESULT ComparisonFunction([in] FilteredPropertyConstants filteredProperty, [in] LONG newValue);
		/// \brief <em>Specifies a filter for a property</em>
		///
		/// Retrieves or sets an item filter.\n
		/// An \c IListViewItems collection can be filtered by any of \c IListViewItem's properties, that
		/// the \c FilteredPropertyConstants enumeration defines a constant for. Combinations of multiple
		/// filters are possible, too. A filter is a \c Variant containing an array whose elements are of
		/// type \c Variant. Each element of this array contains a valid value for the property, that the
		/// filter refers to.\n
		/// When applying the filter, the elements of the array are connected using the logical Or operator.\n\n
		/// Setting this property to \c Empty or any other value, that doesn't match the described structure,
		/// deactivates the filter.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c FilteredPropertyConstants enumeration is valid.
		///
		/// \sa FilterType, ComparisonFunction, FilteredPropertyConstants
		[propget, id(DISPID_LVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] FilteredPropertyConstants filteredProperty, [out, retval] VARIANT* pValue);
		[propput, id(DISPID_LVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] FilteredPropertyConstants filteredProperty, [in] VARIANT newValue);
		/// \brief <em>Specifies a filter's type</em>
		///
		/// Retrieves or sets an item filter's type.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c FilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, FilteredPropertyConstants, FilterTypeConstants
		[propget, id(DISPID_LVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] FilteredPropertyConstants filteredProperty, [out, retval] FilterTypeConstants* pValue);
		[propput, id(DISPID_LVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] FilteredPropertyConstants filteredProperty, [in] FilterTypeConstants newValue);
		/// \brief <em>Retrieves a \c ListViewItem object from the collection</em>
		///
		/// Retrieves a \c ListViewItem object from the collection that wraps the item identified by
		/// \c itemIdentifier.
		///
		/// \param[in] itemIdentifier A value that identifies the listview item to be retrieved.
		/// \param[in] groupIndex If the control is in virtual mode and \c itemIdentifier specifies the item's
		///            zero-based index, this parameter specifies the zero-based index of the group containing
		///            the item.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ItemIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IListViewItems interface.\n
		///          If \c itemIdentifierType is set to \c iitIndex and \c itemIdentifier is set to -1 and the
		///          collection doesn't use filters, the returned object may be used to control some specific
		///          properties of all items at once.\n
		///          This property is read-only.
		///
		/// \sa IListViewItem::GroupIndex, IExplorerListView::VirtualMode, ItemIdentifierTypeConstants, Add,
		///     Remove, Contains
		[propget, id(DISPID_LVIS_ITEM), helpstring("Retrieves a 'ListViewItem' object from the collection that wraps the item identified by 'itemIdentifier'."), nonbrowsable]
		HRESULT Item([in] LONG itemIdentifier, [in, defaultvalue(0)] LONG GroupIndex, [in, defaultvalue(iitIndex)] ItemIdentifierTypeConstants itemIdentifierType, [out, retval] IListViewItem** ppItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ListViewItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_LVIS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds an item to the listview</em>
		///
		/// Adds an item with the specified properties at the specified position in the control and returns
		/// a \c ListViewItem object wrapping the inserted item.
		///
		/// \param[in] itemText The new item's caption text. The maximum number of characters in this text
		///            is 260. If set to \c vbNullString, the control will fire the \c ItemGetDisplayInfo event
		///            each time this property's value is required.
		/// \param[in] insertAt The new item's zero-based index. If set to -1, the item will be inserted
		///            as the last item.
		/// \param[in] iconIndex The zero-based index of the item's icon in the control's \c ilSmall,
		///            \c ilLarge, \c ilExtraLarge and \c ilHighResolution imagelists. If set to -1, the
		///            control will fire the \c ItemGetDisplayInfo event each time this property's value is
		///            required. A value of -2 means 'not specified' and is valid if there's no imagelist
		///            associated with the control.
		/// \param[in] itemIndentation The new item's indentation in 'Details' view in image widths. If set
		///            to 1, the item's indentation will be 1 image width; if set to 2, it will be 2 image
		///            widths and so on. If set to -1, the control will fire the \c ItemGetDisplayInfo event
		///            each time this property's value is required.
		/// \param[in] itemData A \c Long value that will be associated with the item.
		/// \param[in] groupID The unique ID of the group that the new item will belong to. If set to \c -2,
		///            the item won't belong to any group. With comctl32.dll version 6.10 or higher, if set to
		///            -1, the control will fire the \c ItemGetDisplayInfo event each time this property's
		///            value is required. However, this feature seems to be broken in comctl32.dll, so that
		///            the event is raised only once per item.
		/// \param[in] tileViewColumns An array of \c TILEVIEWSUBITEM structs which define the sub-items that
		///            will be displayed below the new item's text in 'Tiles' and 'Extended Tiles' view. If set
		///            to an empty array, no details will be displayed. If set to \c Empty, the control will
		///            fire the \c ItemGetDisplayInfo event each time this property's value is required.
		///
		/// \return The inserted item.
		///
		/// \remarks The \c groupID and \c tileViewColumns parameters will be ignored if comctl32.dll is
		///          used in a version older than 6.0.
		///
		/// \sa Count, Remove, RemoveAll, IListViewItem::Text, IListViewItem::IconIndex,
		///     IListViewItem::Indent, IListViewItem::ItemData, IListViewItem::Group, IListViewGroup::ID,
		///     IListViewItem::TileViewColumns, TILEVIEWSUBITEM, IExplorerListView::hImageList,
		///     IExplorerListView::TileViewItemLines, _IExplorerListViewEvents::ItemGetDisplayInfo,
		///     ImageListConstants
		[id(DISPID_LVIS_ADD), helpstring("Adds a new item with the specified properties.")]
		HRESULT Add([in] BSTR itemText, [in, defaultvalue(-1)] LONG insertAt, [in, defaultvalue(-2)] LONG IconIndex, [in, defaultvalue(0)] LONG itemIndentation, [in, defaultvalue(0)] LONG ItemData, [in, defaultvalue(-2)] LONG groupID, [in, optional] VARIANT TileViewColumns, [out, retval] IListViewItem** ppAddedItem);
		/// \brief <em>Retrieves whether the specified item is part of the item collection</em>
		///
		/// \param[in] itemIdentifier A value that identifies the item to be checked.
		/// \param[in] groupIndex If the control is in virtual mode and \c itemIdentifier specifies the item's
		///            zero-based index, this parameter specifies the zero-based index of the group containing
		///            the item.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ItemIdentifierTypeConstants enumeration is valid.
		///
		/// \return \c True, if the specified item is part of the collection; otherwise \c False.
		///
		/// \sa Filter, IListViewItem::GroupIndex, IExplorerListView::VirtualMode, Add, Remove,
		///     ItemIdentifierTypeConstants
		[id(DISPID_LVIS_CONTAINS), helpstring("Retrieves whether the specified item is part of the item collection.")]
		HRESULT Contains([in] LONG itemIdentifier, [in, defaultvalue(0)] LONG GroupIndex, [in, defaultvalue(iitIndex)] ItemIdentifierTypeConstants itemIdentifierType, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Counts the items in the collection</em>
		///
		/// Retrieves the number of \c ListViewItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_LVIS_COUNT), helpstring("Retrieves the number of 'ListViewItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified item in the collection from the listview</em>
		///
		/// \param[in] itemIdentifier A value that identifies the listview item to be removed.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ItemIdentifierTypeConstants enumeration is valid.
		///
		/// \sa Add, Count, RemoveAll, Contains, ItemIdentifierTypeConstants
		[id(DISPID_LVIS_REMOVE), helpstring("Removes the specified item in the collection from the control.")]
		HRESULT Remove([in] LONG itemIdentifier, [in, defaultvalue(iitIndex)] ItemIdentifierTypeConstants itemIdentifierType);
		/// \brief <em>Removes all items in the collection from the listview</em>
		///
		/// \sa Add, Count, Remove
		[id(DISPID_LVIS_REMOVEALL), helpstring("Removes all items in the collection from the control.")]
		HRESULT RemoveAll(void);
	}


	/// \interface IListViewItemContainer
	/// \brief <em>Manages a collection of \c ListViewItem objects</em>
	///
	/// This interface provides easy access to collections of \c ListViewItem objects. While a
	/// \c ListViewItems object is used to group items that have certain properties in common, a
	/// \c ListViewItemContainer object is used to group any items and acts more like a clipboard.
	///
	/// \sa _IListViewItemContainerEvents, IListViewItem, IListViewItems, IExplorerListView
	[
		object,
		uuid(12881055-3E03-4307-BFDF-AF3D1F18EB46),
		dual,
		nonextensible,
		helpstring("IListViewItemContainer interface"),
		pointer_default(unique)
	]
	interface IListViewItemContainer : IDispatch
	{
		/// \brief <em>Retrieves a \c ListViewItem object from the collection</em>
		///
		/// Retrieves a \c ListViewItem object from the collection that wraps the item identified by
		/// \c itemIdentifier.
		///
		/// \param[in] itemIdentifier <strong>Non-virtual mode:</strong> The unique ID of the item to retrieve.
		///            <strong>Virtual mode:</strong> The zero-based index of the item to retrieve.
		///
		/// \remarks This is the default property of the \c IListViewItemContainer interface.\n
		///          This property is read-only.
		///
		/// \sa IListViewItem::ID, IListViewItem::Index, IExplorerListView::VirtualMode, Add, Remove
		[propget, id(DISPID_LVIC_ITEM), helpstring("Retrieves a 'ListViewItem' object from the collection that wraps the item identified by 'itemIdentifier'."), nonbrowsable]
		HRESULT Item([in] LONG itemIdentifier, [out, retval] IListViewItem** ppItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ListViewItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_LVIC__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds the specified item(s) to the collection</em>
		///
		/// \param[in] items The item(s) to add. May be either an item ID (non-virtual mode only), an item
		///            index (virtual-mode only), a \c ListViewItem object or a \c ListViewItems collection.
		///
		/// \sa IListViewItem::ID, IListViewItem::Index, IExplorerListView::VirtualMode, Count, Remove,
		///     RemoveAll
		[id(DISPID_LVIC_ADD), helpstring("Adds the specified item(s) to the collection.")]
		HRESULT Add([in] VARIANT items);
		/// \brief <em>Clones the collection object</em>
		///
		/// Retrieves an exact copy of the collection.
		///
		/// \return The cloned object.
		///
		/// \sa IExplorerListView::CreateItemContainer
		[id(DISPID_LVIC_CLONE), helpstring("Creates an exact copy of the collection.")]
		HRESULT Clone([out, retval] IListViewItemContainer** ppClone);
		/// \brief <em>Counts the items in the collection</em>
		///
		/// Retrieves the number of \c ListViewItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_LVIC_COUNT), helpstring("Retrieves the number of 'ListViewItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Retrieves an imagelist containing the items' common drag image</em>
		///
		/// Retrieves the handle to an imagelist containing a bitmap that can be used to visualize
		/// dragging of the items of this collection.
		///
		/// \param[out] xUpperLeft The x-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		/// \param[out] yUpperLeft The y-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		///
		/// \return: The handle to the imagelist containing the bitmap.
		///
		/// \remarks The caller is responsible for destroying the imagelist.
		[id(DISPID_LVIC_CREATEDRAGIMAGE), helpstring("Retrieves the handle to an imagelist containing a bitmap that can be used to visualize dragging of the items of this collection.")]
		HRESULT CreateDragImage([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xUpperLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yUpperLeft, [out, retval] OLE_HANDLE* phImageList);
		/// \brief <em>Removes the specified item from the collection</em>
		///
		/// \param[in] itemIdentifier <strong>Non-virtual mode:</strong> The unique ID of the item to remove.
		///            <strong>Virtual mode:</strong> The zero-based index of the item to remove.
		/// \param[in] removePhysically If \c True, the item is removed from the control, too.
		///
		/// \sa IListViewItem::ID, IListViewItem::Index, IExplorerListView::VirtualMode, Add, Count, RemoveAll
		[id(DISPID_LVIC_REMOVE), helpstring("Removes the specified item from the collection.")]
		HRESULT Remove([in] LONG itemIdentifier, [in, defaultvalue(0)] VARIANT_BOOL removePhysically);
		/// \brief <em>Removes all items from the collection</em>
		///
		/// \param[in] removePhysically If \c True, the items are removed from the control, too.
		///
		/// \sa Add, Count, Remove
		[id(DISPID_LVIC_REMOVEALL), helpstring("Removes all items from the collection.")]
		HRESULT RemoveAll([in, defaultvalue(0)] VARIANT_BOOL removePhysically);
	}


	/// \interface IOLEDataObject
	/// \brief <em>Wraps the \c IDataObject interface</em>
	///
	/// This interface provides easy access to data being transferred using the \c IDataObject interface.
	///
	/// \sa _IOLEDataObjectEvents,
	///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
	[
		object,
		uuid(F5B4F14F-9E94-47f1-9F66-B1BAEBB779DE),
		dual,
		nonextensible,
		helpstring("IOLEDataObject interface"),
		pointer_default(unique)
	]
	interface IOLEDataObject : IDispatch
	{
		/// \brief <em>Deletes the contents of the \c OLEDataObject object</em>
		///
		/// \remarks This method will succeed only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
		[id(DISPID_ODO_CLEAR), helpstring("Deletes the contents of the 'OLEDataObject' object.")]
		HRESULT Clear(void);
		/// \brief <em>Retrieves the best format settings from the \c OLEDataObject object</em>
		///
		/// Call this method to retrieve data format settings that match best with the data format, that you
		/// actually want to work with. Set the parameters to the data format settings you want to work with.
		/// The method will set them to the settings you should use.
		///
		/// \param[in,out] formatID An integer value specifying the data format. Valid values are those defined
		///                by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///                registered using the \c RegisterClipboardFormat API function.
		/// \param[in,out] index An integer value that is assigned to the internal \c FORMATETC struct's
		///                \c lindex member. Usually you pass -1 here, but some formats like
		///                \c CFSTR_FILECONTENTS require multiple \c FORMATETC structs for the same format. In
		///                such cases you'll give each struct of this format a separate index.
		/// \param[in,out] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
		///                struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
		///                Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \sa GetData, GetFormat,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETCANONICALFORMAT), helpstring("Call this method to retrieve data format settings that match best with the data format, that you actually want to work with.")]
		HRESULT GetCanonicalFormat([in, out] LONG* formatID, [in, out] LONG* index, [in, out] LONG* dataOrViewAspect);
		/// \brief <em>Retrieves data from the \c OLEDataObject object</em>
		///
		/// Retrieves data from the \c OLEDataObject object, that has the specified format.
		///
		/// \param[in] formatID An integer value specifying the format of the data to retrieve. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return The data that has the specified format.
		///
		/// \remarks This method will fail, if the \c OLEDataObject object does not contain data of the
		///          specified format.
		///
		/// \sa GetCanonicalFormat, GetFormat, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETDATA), helpstring("Retrieves data from the 'OLEDataObject' object.")]
		HRESULT GetData([in] LONG formatID, [in, defaultvalue(-1)] LONG index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT* pData);
		/// \brief <em>Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object</em>
		///
		/// Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object. The drop description
		/// describes what will happen if the user drops the dragged data at the current position. It is
		/// displayed at the bottom of the drag image.
		///
		/// \param[in,out] targetDescription Receives the description of the current drop target.
		/// \param[in,out] actionDescription Receives the description of the whole drop action, i. e. a string
		///                like <em>"Copy to %1"</em> where <em>"Copy to"</em> is the description of the current
		///                drop effect and <em>"%1"</em> is the placeholder for the drop target description
		///                specified by \c targetDescription.
		/// \param[in,out] icon Receives the icon used to visualize the current drop effect. Any of the values
		///                defined by the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa SetDropDescription, IExplorerListView::SupportOLEDragImages, DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_GETDROPDESCRIPTION), helpstring("Retrieves the 'DROPDESCRIPTION' data stored by the 'OLEDataObject' object. Requires Windows Vista or newer.")]
		HRESULT GetDropDescription([in, out, optional] VARIANT* targetDescription, [in, out, optional] VARIANT* actionDescription, [in, out, defaultvalue(0)] DropDescriptionIconConstants* Icon);
		/// \brief <em>Retrieves whether the \c OLEDataObject object contains data in a specific format</em>
		///
		/// \param[in] formatID An integer value specifying the format to check for. Valid values are those
		///            defined by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///            registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return \c True, if the \c OLEDataObject object contains data in the specified format;
		///         otherwise \c False.
		///
		/// \sa GetCanonicalFormat, GetData, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETFORMAT), helpstring("Retrieves whether the 'OLEDataObject' object contains data in a specific format.")]
		HRESULT GetFormat([in] LONG formatID, [in, defaultvalue(-1)] LONG index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT_BOOL* pFormatAvailable);
		/// \brief <em>Inserts data into the \c OLEDataObject object using the specified format</em>
		///
		/// \param[in] formatID An integer value specifying the format of the data being passed. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] data The data to insert. If not specified, the \c OLESetData event will be raised if
		///            data of the specified format is requested from the \c OLEDataObject object.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \remarks The \c data parameter is optional only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa GetData, Clear, _IExplorerListViewEvents::OLESetData,
		///     _IExplorerListViewEvents::HeaderOLESetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_SETDATA), helpstring("Inserts data into the 'OLEDataObject' object using the specified format.")]
		HRESULT SetData([in] LONG formatID, [in, optional] VARIANT data, [in, defaultvalue(-1)] LONG index, [in, defaultvalue(1)] LONG dataOrViewAspect);
		/// \brief <em>Sets the drop description displayed below the drag image</em>
		///
		/// Sets the \c DROPDESCRIPTION data. The drop description describes what will happen if the user drops
		/// the dragged data at the current position. It is displayed at the bottom of the drag image.
		///
		/// \param[in] targetDescription The description of the current drop target.
		/// \param[in] actionDescription The description of the whole drop action, i. e. a string like <em>"Copy
		///            to %1"</em> where <em>"Copy to"</em> is the description of the current drop effect and
		///            <em>"%1"</em> is the placeholder for the drop target description specified by
		///            \c targetDescription.
		/// \param[in] icon The icon used to visualize the current drop effect. Any of the values defined by
		///            the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa GetDropDescription, IExplorerListView::SupportOLEDragImages, DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_SETDROPDESCRIPTION), helpstring("Sets the drop description displayed below the drag image. Requires Windows Vista or newer.")]
		HRESULT SetDropDescription([in, optional] VARIANT targetDescription, [in, optional] VARIANT actionDescription, [in, defaultvalue(ddiNone)] DropDescriptionIconConstants Icon);
	}


	/// \interface IExplorerListView
	/// \brief <em>The main interface</em>
	///
	/// This is the control's main interface. It wraps the control window.
	///
	/// \sa _IExplorerListViewEvents
	[
		object,
		uuid(C93B1ED7-C485-4d63-9497-C8A7649B9AC9),
		dual,
		nonextensible,
		helpstring("IExplorerListView interface"),
		pointer_default(unique)
	]
	interface IExplorerListView : IDispatch
	{
		/// \brief <em>Controls the position of the control's background image</em>
		///
		/// Retrieves or sets whether the position defined by the \c BkImagePositionX and \c BkImagePositionY
		/// properties is a relative one or an absolute one.\n
		/// If set to \c True, both properties define the absolute offset (in pixels) of the top-left tile of
		/// the control's background image. Otherwise they're treaten as percentage values defining the
		/// background image's alignment relative to the control's client area. A value of 0 left-aligns
		/// (respectively top-aligns), 50 centers, 100 right-aligns (bottom-aligns) the background image and
		/// so on.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          If this property is set to \c True, the \c BkImageStyle property must be set to
		///          \c bisTiled.
		///
		/// \sa BkImagePositionX, BkImagePositionY, BkImageStyle
		[propget, id(DISPID_EXLVW_ABSOLUTEBKIMAGEPOSITION), helpstring("Retrieves or sets whether the position defined by the 'BkImagePositionX' and 'BkImagePositionY' properties is a relative one or an absolute one. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT AbsoluteBkImagePosition([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_ABSOLUTEBKIMAGEPOSITION), helpstring("Retrieves or sets whether the position defined by the 'BkImagePositionX' and 'BkImagePositionY' properties is a relative one or an absolute one. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT AbsoluteBkImagePosition([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control detects column drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control's columns can be reordered by drag'n'dropping the column
		/// headers. If set to \c True, columns can be reordered; otherwise not.
		///
		/// \sa RegisterForOLEDragDrop, DragScrollTimeBase, SetHeaderInsertMarkPosition,
		///     IListViewColumn::Position, _IExplorerListViewEvents::ColumnBeginDrag
		[propget, id(DISPID_EXLVW_ALLOWHEADERDRAGDROP), helpstring("Retrieves or sets whether the control's columns can be reordered by drag'n'dropping the column headers.")]
		HRESULT AllowHeaderDragDrop([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_ALLOWHEADERDRAGDROP), helpstring("Retrieves or sets whether the control's columns can be reordered by drag'n'dropping the column headers.")]
		HRESULT AllowHeaderDragDrop([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether label-editing mode can be entered</em>
		///
		/// Retrieves or sets whether label-editing mode can be entered. If set to \c True, label-edit
		/// mode can be entered by either calling \c IListViewItem::StartLabelEditing or by single-clicking
		/// a selected item. If set to \c False, label-edit mode is not available.
		///
		/// \sa hWndEdit, IListViewItem::StartLabelEditing, _IExplorerListViewEvents::StartingLabelEditing
		[propget, id(DISPID_EXLVW_ALLOWLABELEDITING), helpstring("Retrieves or sets whether label-editing mode can be entered.")]
		HRESULT AllowLabelEditing([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_ALLOWLABELEDITING), helpstring("Retrieves or sets whether label-editing mode can be entered.")]
		HRESULT AllowLabelEditing([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls how the selected item is displayed</em>
		///
		/// Retrieves or sets whether the selected items are highlighted even if the control doesn't have the
		/// focus. If set to \c True, selected items are drawn as selected if the control does not have the
		/// focus; otherwise they're drawn as normal items.
		///
		/// \sa CaretItem, IListViewItem::Selected
		[propget, id(DISPID_EXLVW_ALWAYSSHOWSELECTION), helpstring("Retrieves or sets whether the selected items are highlighted even if the control doesn't have the focus.")]
		HRESULT AlwaysShowSelection([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_ALWAYSSHOWSELECTION), helpstring("Retrieves or sets whether the selected items are highlighted even if the control doesn't have the focus.")]
		HRESULT AlwaysShowSelection([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the control's selection anchor item</em>
		///
		/// Retrieves or sets the control's anchor item. The anchor item is the item with which
		/// range-selection begins.
		///
		/// \sa IListViewItem::Anchor, MultiSelect, CaretItem
		[propget, id(DISPID_EXLVW_ANCHORITEM), helpstring("Retrieves or sets the control's anchor item. The anchor item is the item with which range-selection begins."), nonbrowsable]
		HRESULT AnchorItem([out, retval] IListViewItem** ppAnchorItem);
		[propputref, id(DISPID_EXLVW_ANCHORITEM), helpstring("Retrieves or sets the control's anchor item. The anchor item is the item with which range-selection begins."), nonbrowsable]
		HRESULT AnchorItem([in] IListViewItem* pNewAnchorItem);
		/// \brief <em>Controls the style of the control's outer border</em>
		///
		/// Retrieves or sets the kind of border that is drawn around the control. Any of the values defined
		/// by the \c AppearanceConstants enumeration is valid.
		///
		/// \sa BorderStyle, AppearanceConstants
		[propget, id(DISPID_EXLVW_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([out, retval] AppearanceConstants* pValue);
		[propput, id(DISPID_EXLVW_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([in] AppearanceConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application ID</em>
		///
		///   Retrieves the control's application ID. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppName, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXLVW_APPID), hidden]
		HRESULT AppID([out, retval] SHORT* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application name</em>
		///
		///   Retrieves the control's application name. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXLVW_APPNAME), hidden]
		HRESULT AppName([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's short application name</em>
		///
		///   Retrieves the control's short application name. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXLVW_APPSHORTNAME), hidden]
		HRESULT AppShortName([out, retval] BSTR* pValue);
		/// \brief <em>Controls arrangement of the control's items</em>
		///
		/// Retrieves or sets how the control auto-arranges its items in 'Icons', 'Small Icons', 'Tiles' and
		/// 'Extended Tiles' view. Any of the values defined by the \c AutoArrangeItemsConstants enumeration
		/// is valid.
		///
		/// \sa View, ArrangeItems, SnapToGrid, UseWorkAreas, WorkAreas, AutoArrangeItemsConstants
		[propget, id(DISPID_EXLVW_AUTOARRANGEITEMS), helpstring("Retrieves or sets how the control auto-arranges its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
		HRESULT AutoArrangeItems([out, retval] AutoArrangeItemsConstants* pValue);
		[propput, id(DISPID_EXLVW_AUTOARRANGEITEMS), helpstring("Retrieves or sets how the control auto-arranges its items in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
		HRESULT AutoArrangeItems([in] AutoArrangeItemsConstants newValue);
		/// \brief <em>Controls automatic column resizing</em>
		///
		/// Retrieves or sets whether the other columns are sized automatically to optimally fill the available
		/// space if one column is resized by the user. If set to \c True, the columns are sized automatically;
		/// otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Columns, IListViewColumn::Width
		[propget, id(DISPID_EXLVW_AUTOSIZECOLUMNS), helpstring("Retrieves or sets whether the other columns are sized automatically to optimally fill the available space if one column is resized by the user. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoSizeColumns([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_AUTOSIZECOLUMNS), helpstring("Retrieves or sets whether the other columns are sized automatically to optimally fill the available space if one column is resized by the user. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoSizeColumns([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the control's background color</em>
		///
		/// Retrieves or sets the control's background color.
		///
		/// \sa BkImage, BackgroundDrawMode, ForeColor, TextBackColor, EditBackColor, InsertMarkColor
		[propget, id(DISPID_EXLVW_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls how the control's background is drawn</em>
		///
		/// Retrieves or sets how the control's background is drawn. Any of the values defined by the
		/// \c BackgroundDrawModeConstants enumeration is valid.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa BackColor, BkImage, Regional, BackgroundDrawModeConstants
		[propget, id(DISPID_EXLVW_BACKGROUNDDRAWMODE), helpstring("Retrieves or sets how the control's background is drawn. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT BackgroundDrawMode([out, retval] BackgroundDrawModeConstants* pValue);
		[propput, id(DISPID_EXLVW_BACKGROUNDDRAWMODE), helpstring("Retrieves or sets how the control's background is drawn. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT BackgroundDrawMode([in] BackgroundDrawModeConstants newValue);
		/// \brief <em>Specifies the control's background image</em>
		///
		/// Retrieves or sets the control's background image. Valid values are:\n
		/// \arg A string containing the image's URL. Use the \c res:// protocol to load an image from a
		///      binary's resources.
		/// \arg A \c StdPicture object containg the image (requires comctl32.dll version 6.0 or higher).
		/// \arg The bitmap's handle (requires comctl32.dll version 6.0 or higher).
		/// \arg \c Empty if the control doesn't have a background image.
		///
		/// \sa BkImageStyle, BkImagePositionX, BkImagePositionY, BackColor, BackgroundDrawMode, TextBackColor
		[propget, id(DISPID_EXLVW_BKIMAGE), helpstring("Retrieves or sets the control's background image."), nonbrowsable]
		HRESULT BkImage([out, retval] VARIANT* pValue);
		[propput, id(DISPID_EXLVW_BKIMAGE), helpstring("Retrieves or sets the control's background image."), nonbrowsable]
		HRESULT BkImage([in] VARIANT newValue);
		[propputref, id(DISPID_EXLVW_BKIMAGE), helpstring("Retrieves or sets the control's background image."), nonbrowsable]
		HRESULT BkImage([in] VARIANT newValue);
		/// \brief <em>Controls the position of the control's background image</em>
		///
		/// Retrieves or sets the x-coordinate of the position of the control's background bitmap. Depending
		/// on the setting of the \c AbsoluteBkImagePosition property, the value is either an absolute pixel
		/// value or a relative percentage value.
		///
		/// \sa AbsoluteBkImagePosition, BkImagePositionY, BkImage
		[propget, id(DISPID_EXLVW_BKIMAGEPOSITIONX), helpstring("Retrieves or sets the x-coordinate of the position of the control's background bitmap.")]
		HRESULT BkImagePositionX([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_BKIMAGEPOSITIONX), helpstring("Retrieves or sets the x-coordinate of the position of the control's background bitmap.")]
		HRESULT BkImagePositionX([in] LONG newValue);
		/// \brief <em>Controls the position of the control's background image</em>
		///
		/// Retrieves or sets the y-coordinate of the position of the control's background bitmap. Depending
		/// on the setting of the \c AbsoluteBkImagePosition property, the value is either an absolute pixel
		/// value or a relative percentage value.
		///
		/// \sa AbsoluteBkImagePosition, BkImagePositionX, BkImage
		[propget, id(DISPID_EXLVW_BKIMAGEPOSITIONY), helpstring("Retrieves or sets the y-coordinate of the position of the ontrol's background bitmap.")]
		HRESULT BkImagePositionY([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_BKIMAGEPOSITIONY), helpstring("Retrieves or sets the y-coordinate of the position of the control's background bitmap.")]
		HRESULT BkImagePositionY([in] LONG newValue);
		/// \brief <em>Controls the appearance of the control's background image</em>
		///
		/// Retrieves or sets how the control's background image is drawn. Any of the values defined by the
		/// \c BkImageStyleConstants enumeration is valid.
		///
		/// \sa BkImage, BkImagePositionX, BkImagePositionY, BkImageStyleConstants
		[propget, id(DISPID_EXLVW_BKIMAGESTYLE), helpstring("Retrieves or sets how the control's background image is drawn.")]
		HRESULT BkImageStyle([out, retval] BkImageStyleConstants* pValue);
		[propput, id(DISPID_EXLVW_BKIMAGESTYLE), helpstring("Retrieves or sets how the control's background image is drawn.")]
		HRESULT BkImageStyle([in] BkImageStyleConstants newValue);
		/// \brief <em>Controls the appearance of the control's selection lasso</em>
		///
		/// Retrieves or sets whether the selection lasso will be drawn as a semi-transparent filled rectangle.
		/// If set to \c True, the selection lasso is drawn as a filled rectangle with a solid border; otherwise
		/// only the border is drawn (as a dotted line).
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa MultiSelect, _IExplorerListViewEvents::BeginMarqueeSelection
		[propget, id(DISPID_EXLVW_BLENDSELECTIONLASSO), helpstring("Retrieves or sets whether the selection lasso will be drawn as a semi-transparent filled rectangle. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT BlendSelectionLasso([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_BLENDSELECTIONLASSO), helpstring("Retrieves or sets whether the selection lasso will be drawn as a semi-transparent filled rectangle. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT BlendSelectionLasso([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the appearance of selected items</em>
		///
		/// Retrieves or sets how selected items are drawn. If set to \c True, selected items are surrounded
		/// by a rectangular border in the system's highlight color; otherwise they are blended with the
		/// system's highlight color. Unselected items are surrounded by a rectangular border that has the color
		/// defined by the \c OutlineColor property, if this property is set to \c True.
		///
		/// \remarks This property is useful with the 'Icons' view only.\n
		///          Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa OutlineColor, View
		[propget, id(DISPID_EXLVW_BORDERSELECT), helpstring("Retrieves or sets how selected items are drawn. If set to 'True', a selected item is surrounded by a rectangular border in the system's highlight color; otherwise it is blended with the system's highlight color. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT BorderSelect([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_BORDERSELECT), helpstring("Retrieves or sets how selected items are drawn. If set to 'True', a selected item is surrounded by a rectangular border in the system's highlight color; otherwise it is blended with the system's highlight color. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT BorderSelect([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the style of the control's inner border</em>
		///
		/// Retrieves or sets the kind of inner border that is drawn around the control. Any of the values
		/// defined by the \c BorderStyleConstants enumeration is valid.
		///
		/// \sa Appearance, BorderStyleConstants
		[propget, id(DISPID_EXLVW_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([out, retval] BorderStyleConstants* pValue);
		[propput, id(DISPID_EXLVW_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([in] BorderStyleConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's build number</em>
		///
		///   Retrieves the control's build number. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa Version, AppID, AppName, AppShortName, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXLVW_BUILD), hidden]
		HRESULT Build([out, retval] LONG* pValue);
		/// \brief <em>Controls when the \c ItemGetDisplayInfo event is fired</em>
		///
		/// Retrieves or sets the item properties for which your application, rather than the control, stores
		/// the current data. The callback mask applies to all of the control's items.\n
		/// Any combination of the values defined by the \c CallBackMaskConstants enumeration is valid. The
		/// control will fire the \c ItemGetDisplayInfo event each time one of the callback properties' value
		/// is required.
		///
		/// \sa _IExplorerListViewEvents::ItemGetDisplayInfo, CallBackMaskConstants
		[propget, id(DISPID_EXLVW_CALLBACKMASK), helpstring("Retrieves or sets the item properties for which your application, rather than the control, stores the current data. The callback mask applies to all of the control's items."), nonbrowsable]
		HRESULT CallBackMask([out, retval] CallBackMaskConstants* pValue);
		[propput, id(DISPID_EXLVW_CALLBACKMASK), helpstring("Retrieves or sets the item properties for which your application, rather than the control, stores the current data. The callback mask applies to all of the control's items."), nonbrowsable]
		HRESULT CallBackMask([in] CallBackMaskConstants newValue);
		/// \brief <em>Specifies the control's caret column header</em>
		///
		/// Retrieves or sets the control's caret column header. The caret column header is the column header
		/// that has the focus.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa SelectedColumn, IListViewColumn::Caret, SetFocusToHeader
		[propget, id(DISPID_EXLVW_CARETCOLUMN), helpstring("Retrieves or sets the control's caret column header. The caret column header is the column header that has the focus. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CaretColumn([out, retval] IListViewColumn** ppCaretColumn);
		[propputref, id(DISPID_EXLVW_CARETCOLUMN), helpstring("Retrieves or sets the control's caret column header. The caret column header is the column header that has the focus. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CaretColumn([in] IListViewColumn* pNewCaretColumn);
		/// \brief <em>Specifies the control's caret footer item</em>
		///
		/// Retrieves or sets the control's caret footer item. The caret footer item is the footer item that
		/// has the focus.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewFooterItem::Caret
		[propget, id(DISPID_EXLVW_CARETFOOTERITEM), helpstring("Retrieves or sets the control's caret footer item. The caret footer item is the footer item that has the focus. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CaretFooterItem([out, retval] IListViewFooterItem** ppCaretFooterItem);
		[propputref, id(DISPID_EXLVW_CARETFOOTERITEM), helpstring("Retrieves or sets the control's caret footer item. The caret footer item is the footer item that has the focus. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CaretFooterItem([in] IListViewFooterItem* pNewCaretFooterItem);
		/// \brief <em>Specifies the control's caret group</em>
		///
		/// Retrieves or sets the control's caret group. The caret group is the group that has the focus.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewGroup::Caret, _IExplorerListViewEvents::GroupGotFocus,
		///     _IExplorerListViewEvents::GroupLostFocus
		[propget, id(DISPID_EXLVW_CARETGROUP), helpstring("Retrieves or sets the control's caret group. The caret group is the group that has the focus. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CaretGroup([out, retval] IListViewGroup** ppCaretGroup);
		[propputref, id(DISPID_EXLVW_CARETGROUP), helpstring("Retrieves or sets the control's caret group. The caret group is the group that has the focus. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CaretGroup([in] IListViewGroup* pNewCaretGroup);
		/// \brief <em>Specifies the control's caret item</em>
		///
		/// Retrieves or sets the control's caret item. The caret item is the item that has the focus.
		///
		/// \param[in] changeFocusOnly If set to \c True, the method does nothing more than setting the
		///            focus to the specified item. The items' selection states are not changed. If set
		///            to \c False, the selection states are changed, too. This parameter is ignored when
		///            retrieving the caret item.
		///
		/// \remarks \c ChangeFocusOnly must be set to \c True, if the \c VirtualMode property is set to
		///          \c True.\n
		///          This is the control's default property.
		///
		/// \sa IListViewItem::Caret, MultiSelect, AnchorItem, VirtualMode
		[propget, id(DISPID_EXLVW_CARETITEM), helpstring("Retrieves or sets the control's caret item. The caret item is the item that has the focus."), nonbrowsable]
		HRESULT CaretItem([in, defaultvalue(0)] VARIANT_BOOL changeFocusOnly, [out, retval] IListViewItem** ppCaretItem);
		[propputref, id(DISPID_EXLVW_CARETITEM), helpstring("Retrieves or sets the control's caret item. The caret item is the item that has the focus."), nonbrowsable]
		HRESULT CaretItem([in, defaultvalue(0)] VARIANT_BOOL changeFocusOnly, [in] IListViewItem* pNewCaretItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's character set</em>
		///
		///   Retrieves the control's character set (Unicode or ANSI). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXLVW_CHARSET), hidden]
		HRESULT CharSet([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether selecting an item changes its state image</em>
		///
		/// Retrieves or sets whether selecting an item using the mouse sets its state image to 'Checked'.
		/// If set to \c True, selecting an item changes its state image; otherwise not. Also state images
		/// are invisible by default and displayed only for selected items and the item below the mouse
		/// cursor, if this property is set to \c True.
		///
		/// \remarks The \c ShowHeaderStateImages property is overridden by this property. If
		///          \c CheckItemOnSelect is set to \c True, \c ShowHeaderStateImages is also set to \c True
		///          automatically. After \c CheckItemOnSelect has been changed from \c False to \c True,
		///          \c ShowHeaderStateImages can't be set to \c True alone until the control window is
		///          recreated.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ShowStateImages, ShowHeaderStateImages
		[propget, id(DISPID_EXLVW_CHECKITEMONSELECT), helpstring("Retrieves or sets whether selecting an item using the mouse sets its state image to 'Checked'. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CheckItemOnSelect([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_CHECKITEMONSELECT), helpstring("Retrieves or sets whether selecting an item using the mouse sets its state image to 'Checked'. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CheckItemOnSelect([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control's column headers are button-like</em>
		///
		/// Retrieves or sets whether the control's column headers act like buttons and are clickable. If set
		/// to \c True, the headers can be clicked; otherwise not.
		///
		/// \sa SelectedColumn, hWndHeader, View, Columns, IListViewColumn::SortArrow
		[propget, id(DISPID_EXLVW_CLICKABLECOLUMNHEADERS), helpstring("Retrieves or sets whether the control's column headers act like buttons and are clickable.")]
		HRESULT ClickableColumnHeaders([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_CLICKABLECOLUMNHEADERS), helpstring("Retrieves or sets whether the control's column headers act like buttons and are clickable.")]
		HRESULT ClickableColumnHeaders([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the visibility of the column headers</em>
		///
		/// Retrieves or sets the conditions under which the column headers are displayed.
		/// Any of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa Columns, ColumnHeaderVisibilityConstants
		[propget, id(DISPID_EXLVW_COLUMNHEADERVISIBILITY), helpstring("Retrieves or sets the conditions under which the column headers are displayed.")]
		HRESULT ColumnHeaderVisibility([out, retval] ColumnHeaderVisibilityConstants* pValue);
		[propput, id(DISPID_EXLVW_COLUMNHEADERVISIBILITY), helpstring("Retrieves or sets the conditions under which the column headers are displayed.")]
		HRESULT ColumnHeaderVisibility([in] ColumnHeaderVisibilityConstants newValue);
		/// \brief <em>Retrieves the control's columns</em>
		///
		/// Retrieves a collection object wrapping the control's columns.
		///
		/// \remarks This property is read-only.
		///
		/// \sa SelectedColumn, IListViewColumns
		[propget, id(DISPID_EXLVW_COLUMNS), helpstring("Retrieves a collection object wrapping the control's columns."), nonbrowsable]
		HRESULT Columns([out, retval] IListViewColumns** ppColumns);
		/// \brief <em>Specifies the column width in 'List' view</em>
		///
		/// Retrieves or sets the width (in pixels) of a column in 'List' view.
		///
		/// \remarks The control must not be in 'Details' view when you call this property.\n
		///          This property can't be set at design-time.
		///
		/// \sa IListViewColumn::Width, IExplorerListView::GetStringWidth, View
		[propget, id(DISPID_EXLVW_COLUMNWIDTH), helpstring("Retrieves or sets the width (in pixels) of a column in 'List' view."), nonbrowsable]
		HRESULT ColumnWidth([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_COLUMNWIDTH), helpstring("Retrieves or sets the width (in pixels) of a column in 'List' view."), nonbrowsable]
		HRESULT ColumnWidth([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Controls which events are fired</em>
		///
		/// Retrieves or sets the events that won't be fired. Disabling events increases performance.
		/// Any combination of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa DisabledEventsConstants
		[propget, id(DISPID_EXLVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([out, retval] DisabledEventsConstants* pValue);
		[propput, id(DISPID_EXLVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([in] DisabledEventsConstants newValue);
		/// \brief <em>Controls redrawing of the control</em>
		///
		/// Enables or disables automatic redrawing of the control. Disabling redraw while doing large changes
		/// on the listview (like adding many items) may increase performance. If set to \c False, the control
		/// will redraw itself automatically; otherwise not.
		[propget, id(DISPID_EXLVW_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the column currently dragged</em>
		///
		/// Retrieves the column that is currently dragged. This is the same column that was passed to the
		/// \c HeaderBeginDrag or \c HeaderOLEDrag method.
		///
		/// \remarks This property is read-only.
		///
		/// \sa HeaderBeginDrag, HeaderOLEDrag, Columns, DraggedItems,
		///     _IExplorerListViewEvents::ColumnBeginDrag
		[propget, id(DISPID_EXLVW_DRAGGEDCOLUMN), helpstring("Retrieves the column that is currently dragged."), nonbrowsable]
		HRESULT DraggedColumn([out, retval] IListViewColumn** ppColumn);
		/// \brief <em>Retrieves the items currently dragged</em>
		///
		/// Retrieves a collection object wrapping the items that are currently dragged. These are the
		/// same items that were passed to the \c BeginDrag or \c OLEDrag method.
		///
		/// \remarks This property is read-only.
		///
		/// \sa BeginDrag, OLEDrag, IListViewItemContainer, ListItems, DraggedColumn
		[propget, id(DISPID_EXLVW_DRAGGEDITEMS), helpstring("Retrieves a collection object wrapping the items that are currently dragged."), nonbrowsable]
		HRESULT DraggedItems([out, retval] IListViewItemContainer** ppItems);
		/// \brief <em>Controls the speed of automatic scrolling during drag'n'drop</em>
		///
		/// Retrieves or sets the period of time (in milliseconds) that is used as the time-base to
		/// calculate the velocity of auto-scrolling during a drag'n'drop operation. If set to 0,
		/// auto-scrolling is disabled. If set to -1, the system's double-click time, divided by 4, is
		/// used.
		///
		/// \sa AllowHeaderDragDrop, RegisterForOLEDragDrop, _IExplorerListViewEvents::DragMouseMove,
		///     _IExplorerListViewEvents::HeaderDragMouseMove, _IExplorerListViewEvents::OLEDragMouseMove,
		///     _IExplorerListViewEvents::HeaderOLEDragMouseMove
		[propget, id(DISPID_EXLVW_DRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling during a drag'n'drop operation.")]
		HRESULT DragScrollTimeBase([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_DRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling during a drag'n'drop operation.")]
		HRESULT DragScrollTimeBase([in] LONG newValue);
		/// \brief <em>Controls the control's asynchronous drawing features</em>
		///
		/// Retrieves or sets whether the control draws the items' and groups' associated images
		/// asynchronously. Asynchronous image drawing may improve performance. If set to \c True, item and
		/// group images are drawn asynchronously; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa hImageList, _IExplorerListViewEvents::ItemAsynchronousDrawFailed,
		///     _IExplorerListViewEvents::GroupAsynchronousDrawFailed
		[propget, id(DISPID_EXLVW_DRAWIMAGESASYNCHRONOUSLY), helpstring("Retrieves or sets whether the control draws the items' and groups' associated images asynchronously. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DrawImagesAsynchronously([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_DRAWIMAGESASYNCHRONOUSLY), helpstring("Retrieves or sets whether the control draws the items' and groups' associated images asynchronously. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DrawImagesAsynchronously([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the item that currently is the drop target</em>
		///
		/// Retrieves or sets the item, that is the target of a drag'n'drop operation. Its background is
		/// drawn highlighted. If set to \c Nothing, no item is a drop target.
		///
		/// \sa IListViewItem::DropHilited, RegisterForOLEDragDrop, CaretItem,
		///     _IExplorerListViewEvents::DragMouseMove, _IExplorerListViewEvents::OLEDragMouseMove
		[propget, id(DISPID_EXLVW_DROPHILITEDITEM), helpstring("Retrieves or sets the item, that is the target of a drag'n'drop operation."), nonbrowsable]
		HRESULT DropHilitedItem([out, retval] IListViewItem** ppDropHilitedItem);
		[propputref, id(DISPID_EXLVW_DROPHILITEDITEM), helpstring("Retrieves or sets the item, that is the target of a drag'n'drop operation."), nonbrowsable]
		HRESULT DropHilitedItem([in] IListViewItem* pNewDropHilitedItem);
		/// \brief <em>Specifies the contained edit control's background color</em>
		///
		/// Retrieves or sets the contained edit control's background color.
		///
		/// \sa EditForeColor, BackColor
		[propget, id(DISPID_EXLVW_EDITBACKCOLOR), helpstring("Retrieves or sets the contained edit control's background color.")]
		HRESULT EditBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_EDITBACKCOLOR), helpstring("Retrieves or sets the contained edit control's background color.")]
		HRESULT EditBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the contained edit control's text color</em>
		///
		/// Retrieves or sets the contained edit control's text color.
		///
		/// \sa EditBackColor, ForeColor
		[propget, id(DISPID_EXLVW_EDITFORECOLOR), helpstring("Retrieves or sets the contained edit control's text color.")]
		HRESULT EditForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_EDITFORECOLOR), helpstring("Retrieves or sets the contained edit control's text color.")]
		HRESULT EditForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls when the \c EditMouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the
		/// contained edit control's client area before the \c EditMouseHover event is fired. If set
		/// to -1, the system hover time is used.
		///
		/// \sa _IExplorerListViewEvents::EditMouseHover, HoverTime, HeaderHoverTime
		[propget, id(DISPID_EXLVW_EDITHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the contained edit control's client area before the 'EditMouseHover' event is fired.")]
		HRESULT EditHoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_EDITHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the contained edit control's client area before the 'EditMouseHover' event is fired.")]
		HRESULT EditHoverTime([in] LONG newValue);
		/// \brief <em>Controls the control's IME features</em>
		///
		/// Retrieves or sets the contained edit control's IME mode. IME is a Windows feature making it easy
		/// to enter Asian characters. Any of the values defined by the \c IMEModeConstants enumeration
		/// is valid.
		///
		/// \sa IMEMode, IMEModeConstants
		[propget, id(DISPID_EXLVW_EDITIMEMODE), helpstring("Retrieves or sets the contained edit control's IME mode.")]
		HRESULT EditIMEMode([out, retval] IMEModeConstants* pValue);
		[propput, id(DISPID_EXLVW_EDITIMEMODE), helpstring("Retrieves or sets the contained edit control's IME mode.")]
		HRESULT EditIMEMode([in] IMEModeConstants newValue);
		/// \brief <em>Specifies the contained edit control's content</em>
		///
		/// Retrieves or sets the text displayed by the contained edit control.
		///
		/// \sa IListViewItem::Text, _IExplorerListViewEvents::EditChange
		[propget, id(DISPID_EXLVW_EDITTEXT), helpstring("Retrieves or sets the text displayed by the contained edit control."), nonbrowsable]
		HRESULT EditText([out, retval] BSTR* pValue);
		[propput, id(DISPID_EXLVW_EDITTEXT), helpstring("Retrieves or sets the text displayed by the contained edit control."), nonbrowsable]
		HRESULT EditText([in] BSTR newValue);
		/// \brief <em>Specifies the text that is displayed if the control does not contain any items</em>
		///
		/// Retrieves or sets the text that the control will display if it contains no items.\n
		/// <strong>Comctl32.dll version 6.10 and newer only:</strong> Any &lt;a&gt; tags in the text are
		/// converted to links. So to make the word <em>Click</em> in the text <em>Click here to add an
		/// item</em> clickable, set the \c EmptyMarkupText property to <em>&lt;a&gt;Click&lt;/a&gt; here to
		/// add an item</em>. You can define more than one link. If the user clicks such a link, the event
		/// \c EmptyMarkupTextLinkClick will be raised.
		///
		/// \remarks The text's maximum length is 79 characters for comctl32.dll version 6.00 and older and
		///          2083 characters for comctl32.dll version 6.10 and higher.\n
		///          You should set the \c ShowFilterBar property to \c False, if you want to use this
		///          property.\n
		///          Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa EmptyMarkupTextAlignment, _IExplorerListViewEvents::EmptyMarkupTextLinkClick, ShowFilterBar,
		///     ListItems
		[propget, id(DISPID_EXLVW_EMPTYMARKUPTEXT), helpstring("Retrieves or sets the text that the control will display if it contains no items. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT EmptyMarkupText([out, retval] BSTR* pValue);
		[propput, id(DISPID_EXLVW_EMPTYMARKUPTEXT), helpstring("Retrieves or sets the text that the control will display if it contains no items. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT EmptyMarkupText([in] BSTR newValue);
		/// \brief <em>Specifies the alignment of the text that is displayed if the control does not contain any items</em>
		///
		/// Retrieves or sets the alignment of the text that is displayed if the control does not contain any
		/// items. Any of the values defined by the \c AlignmentConstants enumeration except \c alRight is
		/// valid.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa EmptyMarkupText, AlignmentConstants
		[propget, id(DISPID_EXLVW_EMPTYMARKUPTEXTALIGNMENT), helpstring("Retrieves or sets the alignment of the text that is displayed if the control does not contain any items. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT EmptyMarkupTextAlignment([out, retval] AlignmentConstants* pValue);
		[propput, id(DISPID_EXLVW_EMPTYMARKUPTEXTALIGNMENT), helpstring("Retrieves or sets the alignment of the text that is displayed if the control does not contain any items. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT EmptyMarkupTextAlignment([in] AlignmentConstants newValue);
		/// \brief <em>Controls whether the control accepts user input</em>
		///
		/// Enables or disables the control for user input. If set to \c True, it reacts to user input;
		/// otherwise not.
		[propget, id(DISPID_EXLVW_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls when the \c FilterChanged event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds, that will pass before the \c FilterChanged event
		/// is fired after a column's filter was changed. If set to -1, the system's default setting is used.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa _IExplorerListViewEvents::FilterChanged, ShowFilterBar
		[propget, id(DISPID_EXLVW_FILTERCHANGEDTIMEOUT), helpstring("Retrieves or sets the number of milliseconds, that will pass before the 'FilterChanged' event is fired after a column's filter was changed. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT FilterChangedTimeout([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_FILTERCHANGEDTIMEOUT), helpstring("Retrieves or sets the number of milliseconds, that will pass before the 'FilterChanged' event is fired after a column's filter was changed. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT FilterChangedTimeout([in] LONG newValue);
		/// \brief <em>Retrieves the control's first item that is displayed in the control's client area</em>
		///
		/// Retrieves the first listview item, that is entirely located within the control's client
		/// area and therefore visible to the user. This applies to 'List' and 'Details' view only.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ListItems, View
		[propget, id(DISPID_EXLVW_FIRSTVISIBLEITEM), helpstring("Retrieves the control's first visible item."), nonbrowsable]
		HRESULT FirstVisibleItem([out, retval] IListViewItem** ppFirstItem);
		/// \brief <em>Specifies the control's font</em>
		///
		/// Retrieves or sets the control's font. It's used to draw the items' text.
		///
		/// \sa UseSystemFont, ForeColor, IListViewItem::Text
		[propget, id(DISPID_EXLVW_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([out, retval] IFontDisp** ppFont);
		[propput, id(DISPID_EXLVW_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		[propputref, id(DISPID_EXLVW_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		/// \brief <em>Specifies the text that is displayed in the footer area's caption</em>
		///
		/// Retrieves or sets the text that the control will display in the footer area's caption.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa FooterItems, ShowFooter
		[propget, id(DISPID_EXLVW_FOOTERINTROTEXT), helpstring("Retrieves or sets the text that the control will display in the footer area's caption. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT FooterIntroText([out, retval] BSTR* pValue);
		[propput, id(DISPID_EXLVW_FOOTERINTROTEXT), helpstring("Retrieves or sets the text that the control will display in the footer area's caption. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT FooterIntroText([in] BSTR newValue);
		/// \brief <em>Retrieves the control's footer items</em>
		///
		/// Retrieves a collection object wrapping the control's footer items.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa ShowFooter, IListViewFooterItems, hImageList
		[propget, id(DISPID_EXLVW_FOOTERITEMS), helpstring("Retrieves a collection object wrapping the control's footer items. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT FooterItems([out, retval] IListViewFooterItems** ppFooterItems);
		/// \brief <em>Specifies the control's text color</em>
		///
		/// Retrieves or sets the control's text color.
		///
		/// \sa BackColor, TextBackColor, HotForeColor, EditForeColor, InsertMarkColor
		[propget, id(DISPID_EXLVW_FORECOLOR), helpstring("Retrieves or sets the control's text color.")]
		HRESULT ForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_FORECOLOR), helpstring("Retrieves or sets the control's text color.")]
		HRESULT ForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the control's selection style</em>
		///
		/// Retrieves or sets whether an item's entire row (in 'Details' view) is highlighted if it is
		/// selected. Any of the values defined by the \c FullRowSelectConstants enumeration is valid.
		///
		/// \sa View, FullRowSelectConstants
		[propget, id(DISPID_EXLVW_FULLROWSELECT), helpstring("Retrieves or sets whether an item's entire row (in 'Details' view) is highlighted if it is selected.")]
		HRESULT FullRowSelect([out, retval] FullRowSelectConstants* pValue);
		[propput, id(DISPID_EXLVW_FULLROWSELECT), helpstring("Retrieves or sets whether an item's entire row (in 'Details' view) is highlighted if it is selected.")]
		HRESULT FullRowSelect([in] FullRowSelectConstants newValue);
		/// \brief <em>Specifies whether gridlines are drawn in 'Details' view</em>
		///
		/// Retrieves or sets whether the control draws gridlines in 'Details' view. If set to \c True,
		/// gridlines are drawn; otherwise not.
		///
		/// \sa View
		[propget, id(DISPID_EXLVW_GRIDLINES), helpstring("Retrieves or sets whether the control draws gridlines in 'Details' view.")]
		HRESULT GridLines([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_GRIDLINES), helpstring("Retrieves or sets whether the control draws gridlines in 'Details' view.")]
		HRESULT GridLines([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the control's group footer text color</em>
		///
		/// Retrieves or sets the color that the footer texts of the control's groups are drawn in.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property isn't supported for themed listviews.
		///
		/// \sa GroupHeaderForeColor, Groups, ForeColor, IListViewGroup::Text
		[propget, id(DISPID_EXLVW_GROUPFOOTERFORECOLOR), helpstring("Retrieves or sets the color that the footer texts of the control's groups are drawn in. Requires comctl32.dll version 6.10 or higher. This property isn't supported for themed listviews.")]
		HRESULT GroupFooterForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_GROUPFOOTERFORECOLOR), helpstring("Retrieves or sets the color that the footer texts of the control's groups are drawn in. Requires comctl32.dll version 6.10 or higher. This property isn't supported for themed listviews.")]
		HRESULT GroupFooterForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the control's group header text color</em>
		///
		/// Retrieves or sets the color that the header texts of the control's groups are drawn in.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          Comctl32.dll version 6.10 or higher doesn't support this property for themed listviews.
		///
		/// \sa GroupFooterForeColor, Groups, ForeColor, IListViewGroup::Text
		[propget, id(DISPID_EXLVW_GROUPHEADERFORECOLOR), helpstring("Retrieves or sets the color that the header texts of the control's groups are drawn in. Requires comctl32.dll version 6.0 or higher. Comctl32.dll version 6.10 or higher doesn't support this property for themed listviews.")]
		HRESULT GroupHeaderForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_GROUPHEADERFORECOLOR), helpstring("Retrieves or sets the color that the header texts of the control's groups are drawn in. Requires comctl32.dll version 6.0 or higher. Comctl32.dll version 6.10 or higher doesn't support this property for themed listviews.")]
		HRESULT GroupHeaderForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the control's group bottom margin</em>
		///
		/// Retrieves or sets the bottom margin (in pixels) of the control's groups.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa GroupMarginLeft, GroupMarginRight, GroupMarginTop, Groups
		[propget, id(DISPID_EXLVW_GROUPMARGINBOTTOM), helpstring("Retrieves or sets the bottom margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginBottom([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_GROUPMARGINBOTTOM), helpstring("Retrieves or sets the bottom margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginBottom([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Specifies the control's group left margin</em>
		///
		/// Retrieves or sets the left margin (in pixels) of the control's groups.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa GroupMarginBottom, GroupMarginRight, GroupMarginTop, Groups
		[propget, id(DISPID_EXLVW_GROUPMARGINLEFT), helpstring("Retrieves or sets the left margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginLeft([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_GROUPMARGINLEFT), helpstring("Retrieves or sets the left margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginLeft([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Specifies the control's group right margin</em>
		///
		/// Retrieves or sets the right margin (in pixels) of the control's groups.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa GroupMarginBottom, GroupMarginLeft, GroupMarginTop, Groups
		[propget, id(DISPID_EXLVW_GROUPMARGINRIGHT), helpstring("Retrieves or sets the right margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginRight([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_GROUPMARGINRIGHT), helpstring("Retrieves or sets the right margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginRight([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Specifies the control's group top margin</em>
		///
		/// Retrieves or sets the top margin (in pixels) of the control's groups.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa GroupMarginBottom, GroupMarginLeft, GroupMarginRight, Groups
		[propget, id(DISPID_EXLVW_GROUPMARGINTOP), helpstring("Retrieves or sets the top margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginTop([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_GROUPMARGINTOP), helpstring("Retrieves or sets the top margin (in pixels) of the control's groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GroupMarginTop([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Retrieves the control's groups</em>
		///
		/// Retrieves a collection object wrapping the control's groups.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This property is read-only.
		///
		/// \sa ShowGroups, IListViewGroups, IListViewItem::Group, hImageList
		[propget, id(DISPID_EXLVW_GROUPS), helpstring("Retrieves a collection object wrapping the control's groups. Requires comctl32.dll version 6.0 or higher."), nonbrowsable]
		HRESULT Groups([out, retval] IListViewGroups** ppGroups);
		/// \brief <em>Specifies the control's group sorting direction</em>
		///
		/// Retrieves or sets the direction groups are sorted in. Any of the values defined by the
		/// \c SortOrderConstants enumeration is valid.
		///
		/// \sa SortGroups, SortOrderConstants
		[propget, id(DISPID_EXLVW_GROUPSORTORDER), helpstring("Retrieves or sets the direction groups are sorted in.")]
		HRESULT GroupSortOrder([out, retval] SortOrderConstants* pValue);
		[propput, id(DISPID_EXLVW_GROUPSORTORDER), helpstring("Retrieves or sets the direction groups are sorted in.")]
		HRESULT GroupSortOrder([in] SortOrderConstants newValue);
		/// \brief <em>Retrieves the imagelist containing the drag image</em>
		///
		/// Retrieves the handle to the imagelist containing the drag image that is used during a
		/// drag'n'drop operation to visualize the dragged items or column header.
		///
		/// \sa ShowDragImage, BeginDrag, HeaderBeginDrag, _IExplorerListViewEvents::DragMouseMove,
		///     _IExplorerListViewEvents::HeaderDragMouseMove
		[propget, id(DISPID_EXLVW_HDRAGIMAGELIST), helpstring("Retrieves the handle to the imagelist containing the drag image that is used during a drag'n'drop operation to visualize the dragged items or column header."), nonbrowsable]
		HRESULT hDragImageList([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Specifies the appearance of columns while they are resized</em>
		///
		/// Retrieves or sets whether a column's caption and content are redrawn while the user is resizing
		/// the column. If set to \c True, the column is redrawn immediately; otherwise it is redrawn
		/// when leaving column resize mode.
		///
		/// \sa AllowHeaderDragDrop, View
		[propget, id(DISPID_EXLVW_HEADERFULLDRAGGING), helpstring("Retrieves or sets whether a column's caption and content are redrawn while the user is resizing the column.")]
		HRESULT HeaderFullDragging([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_HEADERFULLDRAGGING), helpstring("Retrieves or sets whether a column's caption and content are redrawn while the user is resizing the column.")]
		HRESULT HeaderFullDragging([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's mouse-hover effects</em>
		///
		/// Retrieves or sets whether the caption of the column header underneath the mouse cursor is
		/// highlighted. If set to \c True, the caption is highlighted; otherwise not.
		///
		/// \remarks This property has no effect if the header control is themed.
		///
		/// \sa View
		[propget, id(DISPID_EXLVW_HEADERHOTTRACKING), helpstring("Retrieves or sets whether the caption of the column header underneath the mouse cursor is highlighted. This property has no effect if the header control is themed.")]
		HRESULT HeaderHotTracking([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_HEADERHOTTRACKING), helpstring("Retrieves or sets whether the caption of the column header underneath the mouse cursor is highlighted. This property has no effect if the header control is themed.")]
		HRESULT HeaderHotTracking([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls when the \c HeaderMouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the
		/// header control's client area before the \c HeaderMouseHover event is fired. If set to
		/// -1, the system hover time is used.
		///
		/// \sa _IExplorerListViewEvents::HeaderMouseHover, HoverTime, EditHoverTime
		[propget, id(DISPID_EXLVW_HEADERHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the header control's client area before the 'HeaderMouseHover' event is fired.")]
		HRESULT HeaderHoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_HEADERHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the header control's client area before the 'HeaderMouseHover' event is fired.")]
		HRESULT HeaderHoverTime([in] LONG newValue);
		/// \brief <em>Specifies the appearance of the OLE drag images generated by the control</em>
		///
		/// Retrieves or sets the appearance of the OLE drag images generated by the control for column header
		/// OLE drag'n'drop. Any of the values defined by the \c OLEDragImageStyleConstants enumeration is valid.
		///
		/// \sa OLEDragImageStyle, SupportOLEDragImages, HeaderOLEDrag, OLEDragImageStyleConstants
		[propget, id(DISPID_EXLVW_HEADEROLEDRAGIMAGESTYLE), helpstring("Retrieves or sets the appearance of the OLE drag images generated by the control for column header OLE drag'n'drop.")]
		HRESULT HeaderOLEDragImageStyle([out, retval] OLEDragImageStyleConstants* pValue);
		[propput, id(DISPID_EXLVW_HEADEROLEDRAGIMAGESTYLE), helpstring("Retrieves or sets the appearance of the OLE drag images generated by the control for column header OLE drag'n'drop.")]
		HRESULT HeaderOLEDragImageStyle([in] OLEDragImageStyleConstants newValue);
		/// \brief <em>Specifies the visibility of item labels</em>
		///
		/// Retrieves or sets whether the control displays item-labels in 'Icons' and 'Small Icons' view. If
		/// set to \c False, item-labels are displayed; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa TextBackColor, LabelWrap, View
		[propget, id(DISPID_EXLVW_HIDELABELS), helpstring("Retrieves or sets whether the control displays item-labels in 'Icons' and 'Small Icons' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT HideLabels([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_HIDELABELS), helpstring("Retrieves or sets whether the control displays item-labels in 'Icons' and 'Small Icons' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT HideLabels([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies one of the control's associated image list</em>
		///
		/// Retrieves or sets the handle of the specified image list.
		///
		/// \param[in] imageList The image list to retrieve or set. Any of the values defined by the
		///            \c ImageListConstants enumeration is valid.
		///
		/// \remarks The previously set image list does NOT get destroyed automatically.
		///
		/// \sa ImageListConstants
		[propget, id(DISPID_EXLVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified image list."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_EXLVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified image list."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [in] OLE_HANDLE newValue);
		/// \brief <em>Specifies the control's text color for hot items</em>
		///
		/// Retrieves or sets the control's text color for hot items. If set to -1, the system's default is
		/// used.
		///
		/// \sa ForeColor, HotItem
		[propget, id(DISPID_EXLVW_HOTFORECOLOR), helpstring("Retrieves or sets the control's text color for hot items.")]
		HRESULT HotForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_HOTFORECOLOR), helpstring("Retrieves or sets the control's text color for hot items.")]
		HRESULT HotForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the control's hot item</em>
		///
		/// Retrieves or sets the control's hot item. Usually the hot item is underlined and/or highlighted.
		/// If set to \c Nothing, the control does not have a hot item.
		///
		/// \remarks You should set the \c ItemActivationMode property to \c iamOneSingleClick or
		///          \c iamTwoSingleClicks and the \c UnderlinedItems property should include \c uiHot,
		///          if you want to use this property.
		///
		/// \sa ItemActivationMode, UnderlinedItems, IListViewItem::Hot, HotForeColor,
		///     _IExplorerListViewEvents::HotItemChanging, _IExplorerListViewEvents::HotItemChanged
		[propget, id(DISPID_EXLVW_HOTITEM), helpstring("Retrieves or sets the control's hot item. Usually the hot item is underlined and/or highlighted."), nonbrowsable]
		HRESULT HotItem([out, retval] IListViewItem** ppHotItem);
		[propputref, id(DISPID_EXLVW_HOTITEM), helpstring("Retrieves or sets the control's hot item. Usually the hot item is underlined and/or highlighted."), nonbrowsable]
		HRESULT HotItem([in] IListViewItem* pNewHotItem);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets a user-defined mouse cursor. It's used if \c HotMousePointer is set to
		/// \c mpCustom and the mouse cursor is located over a hot item.
		///
		/// \remarks The \c ItemActivationMode property must be set to \c iamOneSingleClick or
		///          \c iamTwoSingleClicks, if you want to use a non-default hot mouse cursor.
		///
		/// \sa HotMousePointer, HotTracking, ItemActivationMode, MouseIcon, MousePointerConstants
		[propget, id(DISPID_EXLVW_HOTMOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT HotMouseIcon([out, retval] IPictureDisp** ppHotMouseIcon);
		[propput, id(DISPID_EXLVW_HOTMOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT HotMouseIcon([in] IPictureDisp* pNewHotMouseIcon);
		[propputref, id(DISPID_EXLVW_HOTMOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT HotMouseIcon([in] IPictureDisp* pNewHotMouseIcon);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets the cursor's type that's used if the mouse cursor is placed over an item that
		/// has the 'Hot' attribute being set. Any of the values defined by the \c MousePointerConstants
		/// enumeration is valid.
		///
		/// \remarks The \c ItemActivationMode property must be set to \c iamOneSingleClick or
		///          \c iamTwoSingleClicks, if you want to use a non-default hot mouse cursor.
		///
		/// \sa HotMouseIcon, HotTracking, ItemActivationMode, MousePointer, MousePointerConstants
		[propget, id(DISPID_EXLVW_HOTMOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed over an item that has the 'Hot' attribute being set.")]
		HRESULT HotMousePointer([out, retval] MousePointerConstants* pValue);
		[propput, id(DISPID_EXLVW_HOTMOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed over an item that has the 'Hot' attribute being set.")]
		HRESULT HotMousePointer([in] MousePointerConstants newValue);
		/// \brief <em>Controls the control's mouse-hover effects</em>
		///
		/// Retrieves or sets whether the item underneath the mouse cursor is selected automatically. If set
		/// to \c True, the item is selected automatically; otherwise not.
		///
		/// \sa HotTrackingHoverTime, HotItem, HotMousePointer, HotMouseIcon, ItemActivationMode,
		///     UnderlinedItems, _IExplorerListViewEvents::HotItemChanging,
		///     _IExplorerListViewEvents::HotItemChanged
		[propget, id(DISPID_EXLVW_HOTTRACKING), helpstring("Retrieves or sets whether the item underneath the mouse cursor is selected automatically.")]
		HRESULT HotTracking([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_HOTTRACKING), helpstring("Retrieves or sets whether the item underneath the mouse cursor is selected automatically.")]
		HRESULT HotTracking([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls automatic item selection in hot-tracking mode</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over an item before
		/// it is selected (if \c HotTracking is activated). If set to -1, the system's default setting is
		/// used.
		///
		/// \sa HotTracking, HotItem, HoverTime
		[propget, id(DISPID_EXLVW_HOTTRACKINGHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over an item before it is selected (if 'HotTracking' is activated).")]
		HRESULT HotTrackingHoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_HOTTRACKINGHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over an item before it is selected (if 'HotTracking' is activated).")]
		HRESULT HotTrackingHoverTime([in] LONG newValue);
		/// \brief <em>Controls when the \c MouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's
		/// client area before the \c MouseHover event is fired. If set to -1, the system hover time is used.
		///
		/// \sa _IExplorerListViewEvents::MouseHover, HotTrackingHoverTime, HeaderHoverTime, EditHoverTime
		[propget, id(DISPID_EXLVW_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([in] LONG newValue);
		/// \brief <em>Retrieves the control's window handle</em>
		///
		/// Retrieves the control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWndEdit, hWndHeader, _IExplorerListViewEvents::RecreatedControlWindow,
		///     _IExplorerListViewEvents::DestroyedControlWindow
		[propget, id(DISPID_EXLVW_HWND), helpstring("Retrieves the control's window handle."), nonbrowsable]
		HRESULT hWnd([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the contained edit control's window handle</em>
		///
		/// Retrieves the contained edit control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWnd, hWndHeader, _IExplorerListViewEvents::CreatedEditControlWindow,
		///     _IExplorerListViewEvents::DestroyedEditControlWindow
		[propget, id(DISPID_EXLVW_HWNDEDIT), helpstring("Retrieves the contained edit control's window handle."), nonbrowsable]
		HRESULT hWndEdit([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the contained header control's window handle</em>
		///
		/// Retrieves the contained header control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWnd, hWndEdit, _IExplorerListViewEvents::CreatedHeaderControlWindow,
		///     _IExplorerListViewEvents::DestroyedHeaderControlWindow
		[propget, id(DISPID_EXLVW_HWNDHEADER), helpstring("Retrieves the contained header control's window handle."), nonbrowsable]
		HRESULT hWndHeader([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Specifies the tooltip control's window handle</em>
		///
		/// Retrieves or sets the tooltip control's window handle.
		///
		/// \remarks The previously set tooltip window does NOT get destroyed automatically.
		///
		/// \sa ToolTips
		[propget, id(DISPID_EXLVW_HWNDTOOLTIP), helpstring("Retrieves or sets the tooltip control's window handle."), nonbrowsable]
		HRESULT hWndToolTip([out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_EXLVW_HWNDTOOLTIP), helpstring("Retrieves or sets the tooltip control's window handle."), nonbrowsable]
		HRESULT hWndToolTip([in] OLE_HANDLE newValue);
		/// \brief <em>Controls the control's IME features</em>
		///
		/// Retrieves or sets the control's IME mode. IME is a Windows feature making it easy to enter Asian
		/// characters. Any of the values defined by the \c IMEModeConstants enumeration is valid.
		///
		/// \sa EditIMEMode, IMEModeConstants
		[propget, id(DISPID_EXLVW_IMEMODE), helpstring("Retrieves or sets the control's IME mode.")]
		HRESULT IMEMode([out, retval] IMEModeConstants* pValue);
		[propput, id(DISPID_EXLVW_IMEMODE), helpstring("Retrieves or sets the control's IME mode.")]
		HRESULT IMEMode([in] IMEModeConstants newValue);
		/// \brief <em>Specifies whether the keyboard focus can be set to the header control by pressing the [TAB] key</em>
		///
		/// Retrieves or sets whether the header control is included in the tab order, so that the keyboard
		/// focus can be set to it by pressing the [TAB] key. If set to \c True, the header control is part of
		/// the tab order; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa _IExplorerListViewEvents::HeaderGotFocus, _IExplorerListViewEvents::HeaderLostFocus
		[propget, id(DISPID_EXLVW_INCLUDEHEADERINTABORDER), helpstring("Retrieves or sets whether the header control is included in the tab order, so that the keyboard focus can be set to it by pressing the [TAB] key. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT IncludeHeaderInTabOrder([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_INCLUDEHEADERINTABORDER), helpstring("Retrieves or sets whether the header control is included in the tab order, so that the keyboard focus can be set to it by pressing the [TAB] key. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT IncludeHeaderInTabOrder([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's current incremental search-string</em>
		///
		/// Retrieves the control's current incremental search-string. This string is used to select an item
		/// based on characters entered by the user.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _IExplorerListViewEvents::IncrementalSearchStringChanging,
		///     _IExplorerListViewEvents::IncrementalSearching
		[propget, id(DISPID_EXLVW_INCREMENTALSEARCHSTRING), helpstring("Retrieves the control's current incremental search-string. This string is used to select an item based on characters entered by the user.")]
		HRESULT IncrementalSearchString([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the color of the control's insertion mark</em>
		///
		/// Retrieves or sets the color that the control's insertion mark is drawn in.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa SetInsertMarkPosition, BackColor, ForeColor
		[propget, id(DISPID_EXLVW_INSERTMARKCOLOR), helpstring("Retrieves or sets the color that the control's insertion mark is drawn in. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT InsertMarkColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_INSERTMARKCOLOR), helpstring("Retrieves or sets the color that the control's insertion mark is drawn in. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT InsertMarkColor([in] OLE_COLOR newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's release type</em>
		///
		///   Retrieves the control's release type. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze. If set to
		///   \c True, the control was compiled for release; otherwise it was compiled for debugging.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXLVW_ISRELEASE), hidden]
		HRESULT IsRelease([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Controls when the \c ItemActivate event is fired</em>
		///
		/// Retrieves or sets the circumstances under which the control will fire the \c ItemActivate event.
		/// Any of the values defined by the \c ItemActivationModeConstants enumeration is valid.
		///
		/// \sa HotTracking, UnderlinedItems, _IExplorerListViewEvents::ItemActivate,
		///     IListViewItem::Activating, IListViewSubItem::Activating, ItemActivationModeConstants
		[propget, id(DISPID_EXLVW_ITEMACTIVATIONMODE), helpstring("Retrieves or sets the circumstances under which the control will fire the 'ItemActivate' event.")]
		HRESULT ItemActivationMode([out, retval] ItemActivationModeConstants* pValue);
		[propput, id(DISPID_EXLVW_ITEMACTIVATIONMODE), helpstring("Retrieves or sets the circumstances under which the control will fire the 'ItemActivate' event.")]
		HRESULT ItemActivationMode([in] ItemActivationModeConstants newValue);
		/// \brief <em>Controls alignment of the control's items</em>
		///
		/// Retrieves or sets how items are aligned in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles'
		/// view. Any of the values defined by the \c ItemAlignmentConstants enumeration is valid.
		///
		/// \remarks This property should be set to \c iaTop if \c ShowGroups is set to \c True.
		///
		/// \sa View, ItemAlignmentConstants
		[propget, id(DISPID_EXLVW_ITEMALIGNMENT), helpstring("Retrieves or sets how items are aligned in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
		HRESULT ItemAlignment([out, retval] ItemAlignmentConstants* pValue);
		[propput, id(DISPID_EXLVW_ITEMALIGNMENT), helpstring("Retrieves or sets how items are aligned in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view.")]
		HRESULT ItemAlignment([in] ItemAlignmentConstants newValue);
		/// \brief <em>Specifies which parts of an item are treated as such</em>
		///
		/// Retrieves or sets the parts of an item that get treated as such if firing any kind of mouse
		/// event. Any combination of the values defined by the \c ItemBoundingBoxDefinitionConstants
		/// enumeration is valid. E. g. if set to \c ibbdItemIcon combined with \c ibbdItemStateImage, the
		/// \c listItem parameter of the \c MouseMove event will identify the item only if the mouse
		/// cursor is located over the item's icon or state image; otherwise (e. g. if the cursor
		/// is located over the item's text) it will be \c Nothing.
		///
		/// \sa HitTest, ItemBoundingBoxDefinitionConstants
		[propget, id(DISPID_EXLVW_ITEMBOUNDINGBOXDEFINITION), helpstring("Retrieves or sets the parts of an item that get treated as such if firing any kind of mouse event."), nonbrowsable]
		HRESULT ItemBoundingBoxDefinition([out, retval] ItemBoundingBoxDefinitionConstants* pValue);
		[propput, id(DISPID_EXLVW_ITEMBOUNDINGBOXDEFINITION), helpstring("Retrieves or sets the parts of an item that get treated as such if firing any kind of mouse event."), nonbrowsable]
		HRESULT ItemBoundingBoxDefinition([in] ItemBoundingBoxDefinitionConstants newValue);
		/// \brief <em>Specifies the items' height</em>
		///
		/// Retrieves or sets the items' height in pixels. This setting is used in 'Details' view if the
		/// \c OwnerDrawn property is set to \c True.
		///
		/// \sa OwnerDrawn, View, IListViewItem::GetRectangle
		[propget, id(DISPID_EXLVW_ITEMHEIGHT), helpstring("Retrieves or sets the items' height in pixels. This setting is used in 'Details' view if the 'OwnerDrawn' property is set to 'True'.")]
		HRESULT ItemHeight([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_ITEMHEIGHT), helpstring("Retrieves or sets the items' height in pixels. This setting is used in 'Details' view if the 'OwnerDrawn' property is set to 'True'.")]
		HRESULT ItemHeight([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Controls the spacing between items in 'Icons' view</em>
		///
		/// Retrieves or sets whether icon spacing may be adjusted automatically by some pixels so that the
		/// available space is filled up optimally. If set to \c True, horizontal icon spacing is adjusted
		/// automatically; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa SetIconSpacing, View
		[propget, id(DISPID_EXLVW_JUSTIFYICONCOLUMNS), helpstring("Retrieves or sets whether icon spacing may be decreased automatically by some pixels so that the available space is filled up optimally. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT JustifyIconColumns([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_JUSTIFYICONCOLUMNS), helpstring("Retrieves or sets whether icon spacing may be decreased automatically by some pixels so that the available space is filled up optimally. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT JustifyIconColumns([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the appearance of item labels</em>
		///
		/// Retrieves or sets whether an item's text may be wrapped in 'Icons' view. If set to \c True,
		/// it may be wrapped; otherwise not.
		///
		/// \sa HideLabels, View
		[propget, id(DISPID_EXLVW_LABELWRAP), helpstring("Retrieves or sets whether an item's text may be wrapped in 'Icons' view.")]
		HRESULT LabelWrap([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_LABELWRAP), helpstring("Retrieves or sets whether an item's text may be wrapped in 'Icons' view.")]
		HRESULT LabelWrap([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's items</em>
		///
		/// Retrieves a collection object wrapping the listview items.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IListViewItems
		[propget, id(DISPID_EXLVW_LISTITEMS), helpstring("Retrieves a collection object wrapping the control's items."), nonbrowsable]
		HRESULT ListItems([out, retval] IListViewItems** ppItems);
		/// \brief <em>Specifies the number of item rows visible in subseted groups</em>
		///
		/// Retrieves or sets the number of item rows that are always displayed in subseted groups. If set to
		/// 0, the control always displays all of the groups' items.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewGroup::Subseted
		[propget, id(DISPID_EXLVW_MINITEMROWSVISIBLEINGROUPS), helpstring("Retrieves or sets the number of item rows that are always displayed in subseted groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT MinItemRowsVisibleInGroups([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_MINITEMROWSVISIBLEINGROUPS), helpstring("Retrieves or sets the number of item rows that are always displayed in subseted groups. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT MinItemRowsVisibleInGroups([in] LONG newValue);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets a user-defined mouse cursor. It's used if \c MousePointer is set to
		/// \c mpCustom.
		///
		/// \sa MousePointer, HotMouseIcon, MousePointerConstants
		[propget, id(DISPID_EXLVW_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([out, retval] IPictureDisp** ppMouseIcon);
		[propput, id(DISPID_EXLVW_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		[propputref, id(DISPID_EXLVW_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's
		/// client area. Any of the values defined by the \c MousePointerConstants enumeration is valid.
		///
		/// \sa MouseIcon, HotMousePointer, MousePointerConstants
		[propget, id(DISPID_EXLVW_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([out, retval] MousePointerConstants* pValue);
		[propput, id(DISPID_EXLVW_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([in] MousePointerConstants newValue);
		/// \brief <em>Specifies whether multiple items can be selected</em>
		///
		/// Retrieves or sets whether multiple items can be selected at the same time. If set to \c True,
		/// the user may select multiple items; otherwise not.
		///
		/// \sa BlendSelectionLasso, _IExplorerListViewEvents::BeginMarqueeSelection
		[propget, id(DISPID_EXLVW_MULTISELECT), helpstring("Retrieves or sets whether multiple items can be selected at the same time.")]
		HRESULT MultiSelect([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_MULTISELECT), helpstring("Retrieves or sets whether multiple items can be selected at the same time.")]
		HRESULT MultiSelect([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the appearance of the OLE drag images generated by the control</em>
		///
		/// Retrieves or sets the appearance of the OLE drag images generated by the control. Any of the values
		/// defined by the \c OLEDragImageStyleConstants enumeration is valid.
		///
		/// \sa HeaderOLEDragImageStyle, SupportOLEDragImages, OLEDrag, OLEDragImageStyleConstants
		[propget, id(DISPID_EXLVW_OLEDRAGIMAGESTYLE), helpstring("Retrieves or sets the appearance of the OLE drag images generated by the control.")]
		HRESULT OLEDragImageStyle([out, retval] OLEDragImageStyleConstants* pValue);
		[propput, id(DISPID_EXLVW_OLEDRAGIMAGESTYLE), helpstring("Retrieves or sets the appearance of the OLE drag images generated by the control.")]
		HRESULT OLEDragImageStyle([in] OLEDragImageStyleConstants newValue);
		/// \brief <em>Controls the appearance of unselected items</em>
		///
		/// Retrieves or sets the color, that the rectangular border is drawn in, that surrounds an unselected
		/// item if \c BorderSelect is set to \c True.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa BorderSelect
		[propget, id(DISPID_EXLVW_OUTLINECOLOR), helpstring("Retrieves or sets the color, that the rectangular border is drawn in, that surrounds an unselected item if 'BorderSelect' is set to 'True'. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT OutlineColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_OUTLINECOLOR), helpstring("Retrieves or sets the color, that the rectangular border is drawn in, that surrounds an unselected item if 'BorderSelect' is set to 'True'. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT OutlineColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies whether the items are drawn by the application instead of the control</em>
		///
		/// Retrieves or sets whether your application draws the items itself in 'Details' view. If set to
		/// \c True, the control will fire the \c OwnerDrawItem event each time an item must be drawn in
		/// 'Details' view. If set to \c False, the control will draw the items itself. In this case drawing
		/// can still be customized using the \c CustomDraw event.
		///
		/// \sa ItemHeight, View, _IExplorerListViewEvents::OwnerDrawItem,
		///     _IExplorerListViewEvents::CustomDraw, IListViewColumn::OwnerDrawn
		[propget, id(DISPID_EXLVW_OWNERDRAWN), helpstring("Retrieves or sets whether your application draws the items itself in 'Details' view.")]
		HRESULT OwnerDrawn([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_OWNERDRAWN), helpstring("Retrieves or sets whether your application draws the items itself in 'Details' view.")]
		HRESULT OwnerDrawn([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the \c ContextMenu event can be invoked using the keyboard</em>
		///
		/// Retrieves or sets whether the control fires the \c ContextMenu, \c HeaderContextMenu and
		/// \c EditContextMenu events if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU]. If set to
		/// \c True, the events are fired; otherwise not.
		///
		/// \sa _IExplorerListViewEvents::ContextMenu, _IExplorerListViewEvents::HeaderContextMenu,
		///     _IExplorerListViewEvents::EditContextMenu
		[propget, id(DISPID_EXLVW_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu', 'HeaderContextMenu' and 'EditContextMenu' events if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu', 'HeaderContextMenu' and 'EditContextMenu' events if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's programmer(s)</em>
		///
		///   Retrieves the name(s) of the control's programmer(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Tester
		/// \endif
		[propget, id(DISPID_EXLVW_PROGRAMMER), hidden]
		HRESULT Programmer([out, retval] BSTR* pValue);
		/// \brief <em>Controls the control's window region</em>
		///
		/// Retrieves or sets whether the control's window region includes only the item icons and text in
		/// 'Icons' view. Any area, that is not part of an item, is excluded from the window region. If set
		/// to \c True, the control's window region contains only items; otherwise it contains the whole
		/// client area.
		///
		/// \sa BackgroundDrawMode, View
		[propget, id(DISPID_EXLVW_REGIONAL), helpstring("Retrieves or sets whether the control's window region includes only the item icons and text in 'Icons' view.")]
		HRESULT Regional([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_REGIONAL), helpstring("Retrieves or sets whether the control's window region includes only the item icons and text in 'Icons' view.")]
		HRESULT Regional([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control is registered as a target for OLE drag'n'drop. If set to
		/// \c True, the control accepts OLE drag'n'drop actions; otherwise not.
		///
		/// \sa SupportOLEDragImages, _IExplorerListViewEvents::OLEDragEnter,
		///     _IExplorerListViewEvents::HeaderOLEDragEnter
		[propget, id(DISPID_EXLVW_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control's columns can be resized</em>
		///
		/// Retrieves or sets whether the user can resize the control's columns. If set to \c True, the columns
		/// can be resized; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewColumn::Resizable, IListViewColumn::Width,
		///     _IExplorerListViewEvents::BeginColumnResizing
		[propget, id(DISPID_EXLVW_RESIZABLECOLUMNS), helpstring("Retrieves or sets whether the user can resize the control's columns. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ResizableColumns([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_RESIZABLECOLUMNS), helpstring("Retrieves or sets whether the user can resize the control's columns. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ResizableColumns([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's right-to-left features</em>
		///
		/// Enables or disables bidirectional features. Any combination of the values defined by the
		/// \c RightToLeftConstants enumeration is valid.
		///
		/// \attention Setting or clearing the \c rtlText flag destroys and recreates the control window.
		///
		/// \sa IMEMode, RightToLeftConstants
		[propget, id(DISPID_EXLVW_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features. Setting or clearing the 'rtlLayout' flag destroys and recreates the control window.")]
		HRESULT RightToLeft([out, retval] RightToLeftConstants* pValue);
		[propput, id(DISPID_EXLVW_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features. Setting or clearing the 'rtlLayout' flag destroys and recreates the control window.")]
		HRESULT RightToLeft([in] RightToLeftConstants newValue);
		/// \brief <em>Specifies the scrollbars to show</em>
		///
		/// Retrieves or sets the scrollbars to show if necessary. Any of the values defined by the
		/// \c ScrollBarsConstants enumeration is valid.
		///
		/// \attention Changing this property may destroy and recreate the control window.
		///
		/// \sa _IExplorerListViewEvents::BeforeScroll, _IExplorerListViewEvents::AfterScroll,
		///     ScrollBarsConstants
		[propget, id(DISPID_EXLVW_SCROLLBARS), helpstring("Retrieves or sets the scrollbars to show if necessary. Changing this property may destroy and recreate the control window.")]
		HRESULT ScrollBars([out, retval] ScrollBarsConstants* pValue);
		[propput, id(DISPID_EXLVW_SCROLLBARS), helpstring("Retrieves or sets the scrollbars to show if necessary. Changing this property may destroy and recreate the control window.")]
		HRESULT ScrollBars([in] ScrollBarsConstants newValue);
		/// \brief <em>Specifies the control's selected column</em>
		///
		/// Retrieves or sets the control's selected column. The selected column is highlighted.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa SelectedColumnBackColor, CaretColumn, IListViewColumn::Selected, IListViewColumn::SortArrow,
		///     View
		[propget, id(DISPID_EXLVW_SELECTEDCOLUMN), helpstring("Retrieves or sets the control's selected column. Requires comctl32.dll version 6.0 or higher."), nonbrowsable]
		HRESULT SelectedColumn([out, retval] IListViewColumn** ppSelectedColumn);
		[propputref, id(DISPID_EXLVW_SELECTEDCOLUMN), helpstring("Retrieves or sets the control's selected column. Requires comctl32.dll version 6.0 or higher."), nonbrowsable]
		HRESULT SelectedColumn([in] IListViewColumn* pNewSelectedColumn);
		/// \brief <em>Specifies the selected column's background color</em>
		///
		/// Retrieves or sets the background color of the control's selected column. If set to -1, the system's
		/// default is used.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa SelectedColumn, BackColor, ForeColor
		[propget, id(DISPID_EXLVW_SELECTEDCOLUMNBACKCOLOR), helpstring("Retrieves or sets the background color of the control's selected column. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SelectedColumnBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_SELECTEDCOLUMNBACKCOLOR), helpstring("Retrieves or sets the background color of the control's selected column. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SelectedColumnBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the visibility of the control's drag image</em>
		///
		/// Retrieves or sets whether the drag image is currently visible or hidden. If set to \c True, it
		/// is visible; otherwise it is hidden.
		///
		/// \sa hDragImageList, SupportOLEDragImages, _IExplorerListViewEvents::DragMouseMove,
		///     _IExplorerListViewEvents::HeaderDragMouseMove
		[propget, id(DISPID_EXLVW_SHOWDRAGIMAGE), helpstring("Retrieves or sets whether the drag image is currently visible."), nonbrowsable]
		HRESULT ShowDragImage([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SHOWDRAGIMAGE), helpstring("Retrieves or sets whether the drag image is currently visible."), nonbrowsable]
		HRESULT ShowDragImage([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control's header control is extended by a filter bar</em>
		///
		/// Retrieves or sets whether the control's header control contains a filter bar in 'Details' view.
		/// If set to \c True, it contains a filter bar; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa hWndHeader, View, IListViewColumn::Filter
		[propget, id(DISPID_EXLVW_SHOWFILTERBAR), helpstring("Retrieves or sets whether the control's header control contains a filterbar in 'Details' view. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT ShowFilterBar([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SHOWFILTERBAR), helpstring("Retrieves or sets whether the control's header control contains a filterbar in 'Details' view. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT ShowFilterBar([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control's items are organized in groups</em>
		///
		/// Retrieves or sets whether the control organizes its items in groups. If set to \c True, item groups
		/// are drawn; otherwise not.
		///
		/// \remarks The 'List' view doesn't support groups.\n
		///          This property should be set to \c False if \c ItemAlignment is set to \c iaLeft.\n
		///          This property should be set to \c False if you want to use working areas.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa Groups, View, ItemAlignment, WorkAreas, IListViewItem::Group
		[propget, id(DISPID_EXLVW_SHOWGROUPS), helpstring("Retrieves or sets whether the control organizes its items in groups. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT ShowGroups([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SHOWGROUPS), helpstring("Retrieves or sets whether the control organizes its items in groups. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT ShowGroups([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the header control displays a chevron if not all column headers can be displayed</em>
		///
		/// Retrieves or sets whether the control's header control displays a chevron button if the column
		/// headers are wider than the control and therefore can't be displayed all together. If set to
		/// \c True, a chevron is drawn; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa GetHeaderChevronRectangle, IListViewColumn::Width, _IExplorerListViewEvents::HeaderChevronClick
		[propget, id(DISPID_EXLVW_SHOWHEADERCHEVRON), helpstring("Retrieves or sets whether the control's header control displays a chevron button if the column headers are wider than the control and therefore can't be displayed all together. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowHeaderChevron([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SHOWHEADERCHEVRON), helpstring("Retrieves or sets whether the control's header control displays a chevron button if the column headers are wider than the control and therefore can't be displayed all together. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowHeaderChevron([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control draws state images into the column headers</em>
		///
		/// Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of
		/// each column header's caption. If set to \c True, the state images are drawn; otherwise not.
		///
		/// \remarks The \c CheckItemOnSelect property overriddes this property. If \c CheckItemOnSelect is set
		///          to \c True, \c ShowHeaderStateImages is also set to \c True automatically. After
		///          \c CheckItemOnSelect has been changed from \c False to \c True, \c ShowHeaderStateImages
		///          can't be set to \c True alone until the control window is recreated.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa hImageList, IListViewColumn::StateImageIndex, ShowStateImages, CheckItemOnSelect
		[propget, id(DISPID_EXLVW_SHOWHEADERSTATEIMAGES), helpstring("Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of each column header's caption. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowHeaderStateImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SHOWHEADERSTATEIMAGES), helpstring("Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of each column header's caption. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowHeaderStateImages([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control draws state images next to the items</em>
		///
		/// Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of
		/// each item. If set to \c True, the state images are drawn; otherwise not.
		///
		/// \remarks With comctl32.dll version 6.0 state images aren't fully supported in 'Tiles' view, i. e.
		///          you can't toggle them using the mouse.
		///
		/// \sa hImageList, IListViewItem::StateImageIndex, SimpleSelect, CheckItemOnSelect,
		///     ShowHeaderStateImages, View
		[propget, id(DISPID_EXLVW_SHOWSTATEIMAGES), helpstring("Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of each item.")]
		HRESULT ShowStateImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SHOWSTATEIMAGES), helpstring("Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of each item.")]
		HRESULT ShowStateImages([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control draws state images next to the sub-items</em>
		///
		/// Retrieves or sets whether the control will draw icons for sub-items in 'Details' view. If set to
		/// \c True, sub-item images will be drawn; otherwise not.
		///
		/// \sa hImageList, IListViewSubItem::IconIndex, View
		[propget, id(DISPID_EXLVW_SHOWSUBITEMIMAGES), helpstring("Retrieves or sets whether the control will draw icons for sub-items in 'Details' view.")]
		HRESULT ShowSubItemImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SHOWSUBITEMIMAGES), helpstring("Retrieves or sets whether the control will draw icons for sub-items in 'Details' view.")]
		HRESULT ShowSubItemImages([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls state image changing</em>
		///
		/// Retrieves or sets whether pressing the spacebar changes the state image for all selected items
		/// or only for the item that has the focus. If set to \c True, all selected items, otherwise only
		/// the focused item will be updated.
		///
		/// \remarks If this property is set to \c True and the state image is toggled using the keyboard,
		///          the state image will be updated for all selected items, but the \c ItemStateImageChanging
		///          and \c ItemStateImageChanged events will be raised for the caret item only.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa ShowStateImages, hImageList, MultiSelect,_IExplorerListViewEvents::ItemStateImageChanging,
		///     _IExplorerListViewEvents::ItemStateImageChanged
		[propget, id(DISPID_EXLVW_SIMPLESELECT), helpstring("Retrieves or sets whether pressing the spacebar changes the state image for all selected items or just for the item that has the focus. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SimpleSelect([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SIMPLESELECT), helpstring("Retrieves or sets whether pressing the spacebar changes the state image for all selected items or just for the item that has the focus. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SimpleSelect([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls arrangement of the control's items</em>
		///
		/// Retrieves or sets whether items are arranged in a single row or column (depending on the setting
		/// for the \c ItemAlignment property) in 'Icons' and 'Small Icons' view. If set to \c True, a single,
		/// otherwise multiple rows/columns are used to display the items.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa ItemAlignment, View
		[propget, id(DISPID_EXLVW_SINGLEROW), helpstring("Retrieves or sets whether items are arranged in a single row or column (depending on the setting for the 'ItemAlignment' property) in 'Icons' and 'Small Icons' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SingleRow([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SINGLEROW), helpstring("Retrieves or sets whether items are arranged in a single row or column (depending on the setting for the 'ItemAlignment' property) in 'Icons' and 'Small Icons' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SingleRow([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls positioning of the control's items</em>
		///
		/// Retrieves or sets whether items are automatically snapped to the nearest grid position in 'Icons',
		/// 'Small Icons', 'Tiles' and 'Extended Tiles' view. If set to \c True, items are snapped to the
		/// nearest grid position; otherwise they can be positioned freely (if the \c AutoArrangeItems property
		/// is not set to \c aaiNormal).
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa AutoArrangeItems, View, ArrangeItems, IListViewItem::SetPosition
		[propget, id(DISPID_EXLVW_SNAPTOGRID), helpstring("Retrieves or sets whether items are automatically snapped to the nearest grid position in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SnapToGrid([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SNAPTOGRID), helpstring("Retrieves or sets whether items are automatically snapped to the nearest grid position in 'Icons', 'Small Icons', 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SnapToGrid([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the control's sorting direction</em>
		///
		/// Retrieves or sets the direction items are sorted in. Any of the values defined by the
		/// \c SortOrderConstants enumeration is valid.
		///
		/// \sa SortItems, SortOrderConstants, _IExplorerListViewEvents::ChangingSortOrder,
		///     _IExplorerListViewEvents::ChangedSortOrder
		[propget, id(DISPID_EXLVW_SORTORDER), helpstring("Retrieves or sets the direction items are sorted in.")]
		HRESULT SortOrder([out, retval] SortOrderConstants* pValue);
		[propput, id(DISPID_EXLVW_SORTORDER), helpstring("Retrieves or sets the direction items are sorted in.")]
		HRESULT SortOrder([in] SortOrderConstants newValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control creates \c IDropTargetHelper and \c IDragSourceHelper
		/// objects, so that a drag image can be displayed during OLE drag'n'drop. If set to \c True, the
		/// control creates the objects; otherwise not.
		///
		/// \remarks Requires shell32.dll version 5.0 or higher.
		///
		/// \sa RegisterForOLEDragDrop, hImageList, ShowDragImage, OLEDragImageStyle, HeaderOLEDragImageStyle,
		///     FinishOLEDragDrop,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646238.aspx">IDropTargetHelper</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646441.aspx">IDragSourceHelper</a>
		[propget, id(DISPID_EXLVW_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates 'IDropTargetHelper' and 'IDragSourceHelper' objects, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates 'IDropTargetHelper' and 'IDragSourceHelper' objects, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's tester(s)</em>
		///
		///   Retrieves the name(s) of the control's tester(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Programmer
		/// \endif
		[propget, id(DISPID_EXLVW_TESTER), hidden]
		HRESULT Tester([out, retval] BSTR* pValue);
		/// \brief <em>Controls the appearance of item labels</em>
		///
		/// Retrieves or sets the item labels' background color. If set to -1, the item labels are transparent.
		///
		/// \sa ForeColor, BackColor, BkImage, HideLabels
		[propget, id(DISPID_EXLVW_TEXTBACKCOLOR), helpstring("Retrieves or sets the item labels' background color.")]
		HRESULT TextBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_TEXTBACKCOLOR), helpstring("Retrieves or sets the item labels' background color.")]
		HRESULT TextBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the control's appearance in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the number of lines with additional details that are displayed in 'Tiles' and
		/// 'Extended Tiles' view for each item.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa View, TileViewTileHeight, TileViewTileWidth, IListViewItem::TileViewColumns
		[propget, id(DISPID_EXLVW_TILEVIEWITEMLINES), helpstring("Retrieves or sets the number of lines with additional details that are displayed in 'Tiles' and 'Extended Tiles' view for each item. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewItemLines([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWITEMLINES), helpstring("Retrieves or sets the number of lines with additional details that are displayed in 'Tiles' and 'Extended Tiles' view for each item. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewItemLines([in] LONG newValue);
		/// \brief <em>Controls the item labels' appearance in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the bottom margin (in pixels) of the control's item labels in 'Tiles' and
		/// 'Extended Tiles' view.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa TileViewLabelMarginLeft, TileViewLabelMarginRight, TileViewLabelMarginTop, TileViewTileHeight,
		///     TileViewTileWidth, View
		[propget, id(DISPID_EXLVW_TILEVIEWLABELMARGINBOTTOM), helpstring("Retrieves or sets the bottom margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginBottom([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWLABELMARGINBOTTOM), helpstring("Retrieves or sets the bottom margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginBottom([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Controls the item labels' appearance in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the left margin (in pixels) of the control's item labels in 'Tiles' and 'Extended
		/// Tiles' view.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa TileViewLabelMarginBottom, TileViewLabelMarginRight, TileViewLabelMarginTop,
		///     TileViewTileHeight, TileViewTileWidth, View
		[propget, id(DISPID_EXLVW_TILEVIEWLABELMARGINLEFT), helpstring("Retrieves or sets the left margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginLeft([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWLABELMARGINLEFT), helpstring("Retrieves or sets the left margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginLeft([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Controls the item labels' appearance in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the right margin (in pixels) of the control's item labels in 'Tiles' and
		/// 'Extended Tiles' view.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa TileViewLabelMarginBottom, TileViewLabelMarginLeft, TileViewLabelMarginTop, TileViewTileHeight,
		///     TileViewTileWidth, View
		[propget, id(DISPID_EXLVW_TILEVIEWLABELMARGINRIGHT), helpstring("Retrieves or sets the right margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginRight([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWLABELMARGINRIGHT), helpstring("Retrieves or sets the right margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginRight([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Controls the item labels' appearance in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the top margin (in pixels) of the control's item labels in 'Tiles' and 'Extended
		/// Tiles' view.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa TileViewLabelMarginBottom, TileViewLabelMarginLeft, TileViewLabelMarginRight,
		///     TileViewTileHeight, TileViewTileWidth, View
		[propget, id(DISPID_EXLVW_TILEVIEWLABELMARGINTOP), helpstring("Retrieves or sets the top margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginTop([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWLABELMARGINTOP), helpstring("Retrieves or sets the top margin (in pixels) of the control's item labels in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewLabelMarginTop([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Specifies the text color of sub-items in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the text color of the sub-items in 'Tiles' and 'Extended Tiles' view. If set to
		/// -1, the system's default is used.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ForeColor, View
		[propget, id(DISPID_EXLVW_TILEVIEWSUBITEMFORECOLOR), helpstring("Retrieves or sets the text color of the sub-items in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT TileViewSubItemForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWSUBITEMFORECOLOR), helpstring("Retrieves or sets the text color of the sub-items in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT TileViewSubItemForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the tiles' size in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the height (in pixels) of the control's tiles in 'Tiles' and 'Extended Tiles'
		/// view. If set to -1, the tiles' height is set to a value calculated automatically.
		///
		/// \remarks This property must be set to -1 for the 'Extended Tiles' view.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa TileViewTileWidth, TileViewLabelMarginBottom, TileViewLabelMarginLeft,
		///     TileViewLabelMarginRight, TileViewLabelMarginTop, View
		[propget, id(DISPID_EXLVW_TILEVIEWTILEHEIGHT), helpstring("Retrieves or sets the height (in pixels) of the control's tiles in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewTileHeight([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWTILEHEIGHT), helpstring("Retrieves or sets the height (in pixels) of the control's tiles in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewTileHeight([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Controls the tiles' size in 'Tiles' and 'Extended Tiles' view</em>
		///
		/// Retrieves or sets the width (in pixels) of the control's tiles in 'Tiles' and 'Extended Tiles'
		/// view. If set to -1, the tiles' width is set to a value calculated automatically.
		///
		/// \remarks This property must be set to -1 for the 'Extended Tiles' view.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa TileViewTileHeight, TileViewLabelMarginBottom, TileViewLabelMarginLeft,
		///     TileViewLabelMarginRight, TileViewLabelMarginTop, View
		[propget, id(DISPID_EXLVW_TILEVIEWTILEWIDTH), helpstring("Retrieves or sets the width (in pixels) of the control's tiles in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewTileWidth([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXLVW_TILEVIEWTILEWIDTH), helpstring("Retrieves or sets the width (in pixels) of the control's tiles in 'Tiles' and 'Extended Tiles' view. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT TileViewTileWidth([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Specifies which kinds of tooltips are displayed</em>
		///
		/// Retrieves or sets which kinds of tooltips the control is displaying. Any combination of the values
		/// defined by the \c ToolTipsConstants enumeration is valid.
		///
		/// \sa hWndToolTip, _IExplorerListViewEvents::ItemGetInfoTipText, ToolTipsConstants
		[propget, id(DISPID_EXLVW_TOOLTIPS), helpstring("Retrieves or sets the kinds of tooltips the control is displaying.")]
		HRESULT ToolTips([out, retval] ToolTipsConstants* pValue);
		[propput, id(DISPID_EXLVW_TOOLTIPS), helpstring("Retrieves or sets the kinds of tooltips the control is displaying.")]
		HRESULT ToolTips([in] ToolTipsConstants newValue);
		/// \brief <em>Specifies which kinds of items are drawn underlined</em>
		///
		/// Retrieves or sets which items are drawn underlined. Any combination of the values defined by the
		/// \c UnderlinedItemsConstants enumeration is valid.
		///
		/// \sa ItemActivationMode, HotTracking, UnderlinedItemsConstants
		[propget, id(DISPID_EXLVW_UNDERLINEDITEMS), helpstring("Retrieves or sets which items are drawn underlined.")]
		HRESULT UnderlinedItems([out, retval] UnderlinedItemsConstants* pValue);
		[propput, id(DISPID_EXLVW_UNDERLINEDITEMS), helpstring("Retrieves or sets which items are drawn underlined.")]
		HRESULT UnderlinedItems([in] UnderlinedItemsConstants newValue);
		/// \brief <em>Specifies whether the control applies the columns' minimum widths</em>
		///
		/// Retrieves or sets whether the control applies the minimum column widths specified by the
		/// \c IListViewColumn::MinimumWidth property. If set to \c True, the user can't resize a column
		/// to a width smaller than the column's minimum width; otherwise the user can do so.
		///
		/// \remarks If this property is set to \c True, it won't be possible to resize any column to a width
		///          of 0. The minimum column width will be 30 pixels then. This is a limitation of the native
		///          list view control.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IListViewColumn::MinimumWidth, IListViewColumn::Width, IListViewColumn::Resizable,
		///     ResizableColumns
		[propget, id(DISPID_EXLVW_USEMINCOLUMNWIDTHS), helpstring("Retrieves or sets whether the control applies the minimum column widths specified by the 'ListViewColumn.MinimumWidth' property. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT UseMinColumnWidths([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_USEMINCOLUMNWIDTHS), helpstring("Retrieves or sets whether the control applies the minimum column widths specified by the 'ListViewColumn.MinimumWidth' property. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT UseMinColumnWidths([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control uses the system font</em>
		///
		/// Retrieves or sets whether the control uses the system's default listview font or the font
		/// specified by the \c Font property. If set to \c True, the system font; otherwise the specified
		/// font is used.
		///
		/// \sa Font
		[propget, id(DISPID_EXLVW_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default listview font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default listview font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control's items are arranged in working areas</em>
		///
		/// Retrieves or sets how the control arranges its items, if the \c AutoArrangeItems property is not
		/// set to \c aaiNone. If \c UseWorkAreas is set to \c True, the items won't be auto-arranged before at
		/// least one working area is defined; otherwise they will be auto-arranged immediately.
		///
		/// \sa AutoArrangeItems, WorkAreas
		[propget, id(DISPID_EXLVW_USEWORKAREAS), helpstring("Retrieves or sets how the control arranges its items, if the 'AutoArrangeItems' property is not set to 'aaiNone'.")]
		HRESULT UseWorkAreas([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_USEWORKAREAS), helpstring("Retrieves or sets how the control arranges its items, if the 'AutoArrangeItems' property is not set to 'aaiNone'.")]
		HRESULT UseWorkAreas([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's version</em>
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_EXLVW_VERSION), helpstring("Retrieves the control's version."), nonbrowsable]
		HRESULT Version([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the control's view mode</em>
		///
		/// Retrieves or sets the control's view mode. Any of the values defined by the \c ViewConstants
		/// enumeration is valid.
		///
		/// \remarks Changing the view mode to 'Extended Tiles' resets any sub-items.
		///
		/// \sa FullRowSelect, GridLines, Columns, Groups, WorkAreas, ViewConstants
		[propget, id(DISPID_EXLVW_VIEW), helpstring("Retrieves or sets the control's view mode.")]
		HRESULT View([out, retval] ViewConstants* pValue);
		[propput, id(DISPID_EXLVW_VIEW), helpstring("Retrieves or sets the control's view mode.")]
		HRESULT View([in] ViewConstants newValue);
		/// \brief <em>Specifies the number of items in virtual mode</em>
		///
		/// Retrieves or sets the number of items in the control if the \c VirtualMode property is set to
		/// \c True.
		///
		/// \param[in] noScroll If set to \c True, the control won't change the scrolling position when
		///            changing this property. Otherwise it will reset the scrolling position.\n
		///            This parameter is ignored when retrieving this property.
		/// \param[in] noInvalidateAll If set to \c True, the control will repaint only if changing this
		///            property affects the items currently in view. Otherwise it will definitely repaint.\n
		///            This parameter is ignored when retrieving this property.
		///
		/// \sa VirtualMode
		[propget, id(DISPID_EXLVW_VIRTUALITEMCOUNT), helpstring("Retrieves or sets the number of items in the control if the 'VirtualMode' property is set to 'True'.")]
		HRESULT VirtualItemCount([in, defaultvalue(0)] VARIANT_BOOL noScroll, [in, defaultvalue(-1)] VARIANT_BOOL noInvalidateAll, [out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_VIRTUALITEMCOUNT), helpstring("Retrieves or sets the number of items in the control if the 'VirtualMode' property is set to 'True'.")]
		HRESULT VirtualItemCount([in, defaultvalue(0)] VARIANT_BOOL noScroll, [in, defaultvalue(-1)] VARIANT_BOOL noInvalidateAll, [in] LONG newValue);
		/// \brief <em>Specifies whether data-management is done by the application instead of the control</em>
		///
		/// Retrieves or sets whether the data-management for the control is done by your application or
		/// by the control itself. If set to \c True, data-management is done by your application; otherwise
		/// it's done by the control.
		///
		/// \remarks Using your own data-management system may increase performance, especially if the
		///          listview contains many items. However, virtual listview controls have several
		///          limitations (list may be incomplete):\n
		///          - With comctl32.dll version 6.0 'Tiles' view is not fully supported.
		///          - With comctl32.dll version 6.0 groups are not supported.
		///          - Working areas are not supported.
		///          - Item sorting is not supported.
		///          - Clicks on state images won't be recognized in 'Icons', 'Small Icons' and 'Tiles' view.
		///          - \c IListViewItem::IconIndex is read-only and must be set using the
		///            \c _IExplorerListViewEvents::ItemGetDisplayInfo event.
		///          - \c IListViewSubItem::IconIndex is read-only and must be set using the
		///            \c _IExplorerListViewEvents::ItemGetDisplayInfo event.
		///          - \c IListViewItem::ID is not supported.
		///          - \c IListViewItem::Indent is read-only and must be set using the
		///            \c _IExplorerListViewEvents::ItemGetDisplayInfo event.
		///          - \c IListViewItem::ItemData is not supported.
		///          - \c IListViewItem::OverlayIndex is supported as a callback property only. Look up the
		///            \c CallBackMask property for details.
		///          - \c IListViewSubItem::OverlayIndex is supported as a callback property only. Look up the
		///            \c CallBackMask property for details.
		///          - \c IListViewItem::StateImageIndex is supported as a callback property only. Look up the
		///            \c CallBackMask property for details.
		///          - \c IListViewSubItem::StateImageIndex is supported as a callback property only. Look up
		///            the \c CallBackMask property for details.
		///          - \c IListViewItem::Text is read-only and must be set using the
		///            \c _IExplorerListViewEvents::ItemGetDisplayInfo event.
		///          - \c IListViewSubItem::Text is read-only and must be set using the
		///            \c _IExplorerListViewEvents::ItemGetDisplayInfo event.
		///          - \c IListViewItem::TileViewColumns is read-only and must be set using the
		///            \c _IExplorerListViewEvents::ItemGetDisplayInfo event.
		///
		/// \attention Changing this property destroys and recreates the control window.
		///
		/// \sa VirtualItemCount, ShowGroups, CallBackMask, _IExplorerListViewEvents::CacheItemsHint,
		///     _IExplorerListViewEvents::ItemGetDisplayInfo, _IExplorerListViewEvents::SelectedItemRange,
		///     _IExplorerListViewEvents::FindVirtualItem
		[propget, id(DISPID_EXLVW_VIRTUALMODE), helpstring("Retrieves or sets whether the data-management for the control is done by your application or by the control itself. Changing this property destroys and recreates the control window.")]
		HRESULT VirtualMode([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXLVW_VIRTUALMODE), helpstring("Retrieves or sets whether the data-management for the control is done by your application or by the control itself. Changing this property destroys and recreates the control window.")]
		HRESULT VirtualMode([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's working areas</em>
		///
		/// Retrieves a collection object wrapping the control's working areas.
		///
		/// \remarks The 'List' and 'Details' views don't support working areas.\n
		///          Working areas can't be used together with groups.\n
		///          This property is read-only.
		///
		/// \sa View, ShowGroups, AutoArrangeItems, UseWorkAreas, IListViewWorkAreas, IListViewItem::WorkArea
		[propget, id(DISPID_EXLVW_WORKAREAS), helpstring("Retrieves a collection object wrapping the control's working areas."), nonbrowsable]
		HRESULT WorkAreas([out, retval] IListViewWorkAreas** ppWorkAreas);

		/// \brief <em>Displays the control's credits</em>
		///
		/// Displays some information about this control and its author.
		[id(DISPID_EXLVW_ABOUT), helpstring("Displays some information about this control and its author.")]
		HRESULT About(void);
		/// \brief <em>Approximates the listview's optimal size</em>
		///
		/// Calculates the control's approximate width and height required to display the specified number of
		/// items. Setting the size of the control based on the dimensions provided by this method can
		/// optimize redraw and reduce flicker.
		///
		/// \param[in] numberOfItems The number of items to be displayed in the control. If set to -1, the
		///            control's total number of items is used.
		/// \param[in,out] proposedWidth The approximated width (in pixels) needed to display the items. If
		///                set to -1 on entry, the control's current width will be used as base to calculate
		///                the optimal width.
		/// \param[in,out] proposedHeight The approximated height (in pixels) needed to display the items. If
		///                set to -1 on entry, the control's current height will be used as base to calculate
		///                the optimal height.
		///
		/// \sa GetViewRectangle
		[id(DISPID_EXLVW_APPROXIMATEVIEWRECTANGLE), helpstring("Calculates the control's approximate width and height required to display the specified number of items.")]
		HRESULT ApproximateViewRectangle([in, defaultvalue(-1)] LONG numberOfItems, [in, out, defaultvalue(0)] OLE_XSIZE_PIXELS* proposedWidth, [in, out, defaultvalue(0)] OLE_YSIZE_PIXELS* proposedHeight);
		/// \brief <em>Arranges the listview's items</em>
		///
		/// Arranges the control's items in 'Icons', 'Small Icons', 'Tiles' or 'Extended Tiles' view.
		///
		/// \param[in] arrangementStyle Specifies how the items will be arranged. Any of the values
		///            defined by the \c ArrangementStyleConstants enumeration is valid.
		///
		/// \sa AutoArrangeItems, SnapToGrid, View, IListViewItem::SetPosition, ArrangementStyleConstants
		[id(DISPID_EXLVW_ARRANGEITEMS), helpstring("Arranges the control's items in 'Icons', 'Small Icons', 'Tiles' or 'Extended Tiles' view.")]
		HRESULT ArrangeItems([in, defaultvalue(astDefault)] ArrangementStyleConstants arrangementStyle);
		/// \brief <em>Enters drag'n'drop mode</em>
		///
		/// \param[in] draggedItems A collection object containing the items to drag.
		/// \param[in] hDragImageList The imagelist containing the drag image that shall be used to
		///            visualize the drag'n'drop operation. If -1, the control creates the drag image
		///            itself; if 0, no drag image is used.
		/// \param[in,out] xHotSpot The x-coordinate (in pixels) of the drag image's hotspot relative to the
		///                drag image's upper-left corner. If the \c hDragImageList parameter is set to -1 or
		///                0, this parameter is ignored. This parameter will be changed to the value that
		///                finally was used by the method.
		/// \param[in,out] yHotSpot The y-coordinate (in pixels) of the drag image's hotspot relative to the
		///                drag image's upper-left corner. If the \c hDragImageList parameter is set to -1 or
		///                0, this parameter is ignored. This parameter will be changed to the value that
		///                finally was used by the method.
		///
		/// \sa OLEDrag, DraggedItems, EndDrag, HeaderBeginDrag, hDragImageList,
		///     _IExplorerListViewEvents::ItemBeginDrag, _IExplorerListViewEvents::ItemBeginRDrag,
		///     IListViewItem::CreateDragImage, IListViewItemContainer::CreateDragImage
		[id(DISPID_EXLVW_BEGINDRAG), helpstring("Enters drag'n'drop mode.")]
		HRESULT BeginDrag([in] IListViewItemContainer* draggedItems, [in, defaultvalue(0)] OLE_HANDLE hDragImageList, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xHotSpot, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yHotSpot);
		/// \brief <em>Calculates the maximum number of entirely visible items within the listview</em>
		///
		/// Retrieves the number of items that fit entirely into the control's client area.
		///
		/// \return The maximum number of simultaneous visible items.
		///
		/// \remarks This method is valid for 'List' and 'Details' view only.
		///
		/// \sa IListViewItems::Count, View
		[id(DISPID_EXLVW_COUNTVISIBLE), helpstring("Retrieves the number of items that fit entirely into the control's client area.")]
		HRESULT CountVisible([out, retval] LONG* pValue);
		/// \brief <em>Creates a new \c ListViewItemContainer object</em>
		///
		/// Retrieves a new \c ListViewItemContainer object and fills it with the specified items.
		///
		/// \param[in] items The item(s) to add to the collection. May be either \c Empty, an item ID, a
		///            \c ListViewItem object or a \c ListViewItems collection.
		///
		/// \return The created \c ListViewItemContainer object.
		///
		/// \sa IListViewItemContainer::Clone, IListViewItemContainer::Add
		[id(DISPID_EXLVW_CREATEITEMCONTAINER), helpstring("Retrieves a new 'ListViewItemContainer' object and fills it with 'items'.")]
		HRESULT CreateItemContainer([in, optional] VARIANT items, [out, retval] IListViewItemContainer** ppContainer);
		/// \brief <em>Exits drag'n'drop mode</em>
		///
		/// \param[in] abort If \c True, the drag'n'drop operation will be treated as aborted; otherwise
		///            it will be treated as a drop.
		///
		/// \sa DraggedItems, BeginDrag, HeaderEndDrag, _IExplorerListViewEvents::AbortedDrag,
		///     _IExplorerListViewEvents::Drop
		[id(DISPID_EXLVW_ENDDRAG), helpstring("Exits drag'n'drop mode.")]
		HRESULT EndDrag([in] VARIANT_BOOL abort);
		/// \brief <em>Ends label-editing</em>
		///
		/// Ends editing the item's text.
		///
		/// \param[in] discard Specifies whether to apply or discard the text contained by the label-edit
		///            control at the time this method is called. If set to \c True, the text is
		///            discarded and the edited item's text remains the same; otherwise the edited item's
		///            text is changed to the text contained by the label-edit control at the time this
		///            method is called.
		///
		/// \sa IListViewItem::StartLabelEditing, _IExplorerListViewEvents::RenamedItem,
		///     _IExplorerListViewEvents::ItemSetText
		[id(DISPID_EXLVW_ENDLABELEDIT), helpstring("Ends editing the item's text.")]
		HRESULT EndLabelEdit([in] VARIANT_BOOL discard);
		/// \brief <em>Finds an item with the specified characteristics</em>
		///
		/// Retrieves an item with the specified characteristics.
		///
		/// \param[in] searchMode A value specifying the meaning of the \c searchFor parameter. Any of the
		///            values defined by the \c SearchModeConstants enumeration is valid.
		/// \param[in] searchFor The criterion that the item must fulfill to be returned by this method. This
		///            parameter's format depends on the \c searchMode parameter:
		///            - \c smItemData An integer value.
		///            - \c smText A string value.
		///            - \c smPartialText A string value.
		///            - \c smNearestPosition An array containing two integer values. The first one
		///              specifies the x-coordinate, the second one the y-coordinate (both in pixels and
		///              relative to the control's upper-left corner).
		/// \param[in] searchDirection A value specifying the direction to search. Any of the values
		///            defined by the \c SearchDirectionConstants enumeration is valid. This parameter is
		///            ignored if the \c searchFor parameter is not set to \c smNearestPosition.
		/// \param[in] wrapAtLastItem If set to \c True, the search will be continued with the first item
		///            if the last item is reached. This parameter is ignored if \c searchMode is set to
		///            \c smNearestPosition.
		///
		/// \return The item with the specified characteristics. \c Nothing if no matching item was found.
		///
		/// \sa IListViewItem::FindNextItem, SearchModeConstants, SearchDirectionConstants,
		///     _IExplorerListViewEvents::FindVirtualItem
		[id(DISPID_EXLVW_FINDITEM), helpstring("Retrieves an item with the specified characteristics.")]
		HRESULT FindItem([in] SearchModeConstants searchMode, [in] VARIANT searchFor, [in, defaultvalue(sdNoneSpecific)] SearchDirectionConstants searchDirection, [in, defaultvalue(-1)] VARIANT_BOOL wrapAtLastItem, [out, retval] IListViewItem** ppFoundItem);
		/// \brief <em>Proposes a position for the control's insertion mark</em>
		///
		/// Retrieves the insertion mark position that is closest to the specified point.
		///
		/// \param[in] x The x-coordinate (in pixels) of the point for which to retrieve the closest
		///            insertion mark position. It must be relative to the control's upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the point for which to retrieve the closest
		///            insertion mark position. It must be relative to the control's upper-left corner.
		/// \param[out] relativePosition The insertion mark's position relative to the specified item. The
		///             following values, defined by the \c InsertMarkPositionConstants enumeration, are
		///             valid: \c impBefore, \c impAfter, \c impNowhere.
		/// \param[out] listItem The item at which the insertion mark should be displayed.
		///
		/// \remarks An insertion mark can be used only if the control is in 'Icons', 'Small Icons', 'Tiles' or
		///          'Extended Tiles' view, is not in group-view mode, and has \c AutoArrangeItems set to
		///          \c aaiNormal.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa SetInsertMarkPosition, GetInsertMarkPosition, AutoArrangeItems, ShowGroups, View,
		///     InsertMarkPositionConstants
		[id(DISPID_EXLVW_GETCLOSESTINSERTMARKPOSITION), helpstring("Retrieves the insertion mark position that is closest to the specified point. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT GetClosestInsertMarkPosition([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y, [in, out] InsertMarkPositionConstants* relativePosition, [in, out] IListViewItem** listItem);
		/// \brief <em>Retrieves the bounding rectangle of the control's footer area</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's client area) of the control's
		/// footer area.
		///
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ShowFooter, IListViewFooterItem::GetRectangle
		[id(DISPID_EXLVW_GETFOOTERRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's client area) of the control's footer area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetFooterRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
		/// \brief <em>Retrieves the bounding rectangle of the column header's chevron button</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the header control's upper-left corner) of
		/// the column header's chevron button which is displayed if the column headers are wider than the
		/// control and therefore can't be displayed all together.
		///
		/// \param[in,out] left The x-coordinate (in pixels) of the upper-left corner of the chevron button's
		///                bounding rectangle relative to the header control's upper-left corner.
		/// \param[in,out] top The y-coordinate (in pixels) of the upper-left corner of the chevron button's
		///                bounding rectangle relative to the header control's upper-left corner.
		/// \param[in,out] right The x-coordinate (in pixels) of the lower-right corner of the chevron button's
		///                bounding rectangle relative to the header control's upper-left corner.
		/// \param[in,out] bottom The y-coordinate (in pixels) of the lower-right corner of the chevron
		///                button's bounding rectangle relative to the header control's upper-left corner.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ShowHeaderChevron
		[id(DISPID_EXLVW_GETHEADERCHEVRONRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the header control's client area) of the column header's chevron button. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetHeaderChevronRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Left, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Top, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Right, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Bottom);
		/// \brief <em>Determines the spacing between items in 'Icons' or 'Small Icons' view</em>
		///
		/// Determines an item's width and height (including the space beneath it) in 'Icons' or
		/// 'Small Icons' view in pixels.
		///
		/// \param[in] viewMode The view for which to determine the spacing. The following values,
		///            defined by the \c ViewConstants enumeration, are valid: \c vIcons, \c vSmallIcons.
		/// \param[out] itemWidth The item's width (including the space beneath it) in pixels.
		/// \param[out] itemHeight The item's height (including the space beneath it) in pixels.
		///
		/// \sa SetIconSpacing, View, ViewConstants
		[id(DISPID_EXLVW_GETICONSPACING), helpstring("Determines an item's width and height (including the space beneath it) in 'Icons' or 'Small Icons' view in pixels.")]
		HRESULT GetIconSpacing([in] ViewConstants viewMode, [in, out, defaultvalue(0)] OLE_XSIZE_PIXELS* itemWidth, [in, out, defaultvalue(0)] OLE_YSIZE_PIXELS* itemHeight);
		/// \brief <em>Retrieves the position of the control's insertion mark</em>
		///
		/// \param[out] relativePosition The insertion mark's position relative to the specified item. The
		///             following values, defined by the \c InsertMarkPositionConstants enumeration, are
		///             valid: \c impBefore, \c impAfter, \c impNowhere.
		/// \param[out] listItem The item at which the insertion mark is displayed.
		///
		/// \remarks An insertion mark can be used only if the control is in 'Icons', 'Small Icons', 'Tiles' or
		///          'Extended Tiles' view, is not in group-view mode, and has \c AutoArrangeItems set to
		///          \c aaiNormal.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa SetInsertMarkPosition, GetClosestInsertMarkPosition, GetInsertMarkRectangle, AutoArrangeItems,
		///     ShowGroups, View, InsertMarkPositionConstants
		[id(DISPID_EXLVW_GETINSERTMARKPOSITION), helpstring("Retrieves the position of the control's insertion mark. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT GetInsertMarkPosition([in, out] InsertMarkPositionConstants* relativePosition, [in, out] IListViewItem** listItem);
		/// \brief <em>Retrieves the bounding rectangle of the control's insertion mark</em>
		///
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \remarks An insertion mark can be used only if the control is in 'Icons', 'Small Icons', 'Tiles' or
		///          'Extended Tiles' view, is not in group-view mode, and has \c AutoArrangeItems set to
		///          \c aaiNormal.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa GetInsertMarkPosition, SetInsertMarkPosition, AutoArrangeItems, ShowGroups, View
		[id(DISPID_EXLVW_GETINSERTMARKRECTANGLE), helpstring("Retrieves the bounding rectangle of the control's insertion mark. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT GetInsertMarkRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
		/// \brief <em>Retrieves the control's current view origin</em>
		///
		/// \param[out] x The x-coordinate (in pixels) of the view origin relative to the control's
		///             upper-left corner.
		/// \param[out] y The y-coordinate (in pixels) of the view origin relative to the control's
		///             upper-left corner.
		///
		/// \remarks This method will fail if the control is in 'List' or 'Details' view.
		///
		/// \sa Scroll, GetViewRectangle, View
		[id(DISPID_EXLVW_GETORIGIN), helpstring("Retrieves the control's current view origin.")]
		HRESULT GetOrigin([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* x, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* y);
		/// \brief <em>Determines the width of the specified string using the control's current font</em>
		///
		/// Determines the width (in pixels) of the specified string using the control's current font.
		///
		/// \param[in] stringToTest The string for which to determine the width.
		///
		/// \return The string's width in pixels.
		///
		/// \sa IListViewColumn::Width, _IExplorerListViewEvents::CustomDraw
		[id(DISPID_EXLVW_GETSTRINGWIDTH), helpstring("Determines the width (in pixels) of the specified string using the control's current font.")]
		HRESULT GetStringWidth([in] BSTR stringToTest, [out, retval] OLE_XSIZE_PIXELS* pWidth);
		/// \brief <em>Retrieves the bounding rectangle of all items in the control</em>
		///
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \remarks This method will fail if the listview is in 'List' or 'Details' view.
		///
		/// \sa GetOrigin, Scroll, View
		[id(DISPID_EXLVW_GETVIEWRECTANGLE), helpstring("Retrieves the bounding rectangle of all items in the control.")]
		HRESULT GetViewRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
		/// \brief <em>Enters drag'n'drop mode</em>
		///
		/// Enters drag'n'drop mode for the header control.
		///
		/// \param[in] draggedColumn The column header to drag.
		/// \param[in] hDragImageList The imagelist containing the drag image that shall be used to
		///            visualize the drag'n'drop operation. If -1, the control creates the drag image
		///            itself; if 0, no drag image is used.
		/// \param[in,out] xHotSpot The x-coordinate (in pixels) of the drag image's hotspot relative to the
		///                drag image's upper-left corner. If the \c hDragImageList parameter is set to -1 or
		///                0, this parameter is ignored. This parameter will be changed to the value that
		///                finally was used by the method.
		/// \param[in,out] yHotSpot The y-coordinate (in pixels) of the drag image's hotspot relative to the
		///                drag image's upper-left corner. If the \c hDragImageList parameter is set to -1 or
		///                0, this parameter is ignored. This parameter will be changed to the value that
		///                finally was used by the method.
		/// \param[in] restrictDragImage If set to \c True, the drag image will move within the header control
		///            along the x-axis only. If set to \c False, the drag image will be attached to the mouse
		///            cursor and move freely.
		///
		/// \sa HeaderOLEDrag, DraggedColumn, HeaderEndDrag, hDragImageList, BeginDrag,
		///     _IExplorerListViewEvents::ColumnBeginDrag, IListViewColumn::CreateDragImage
		[id(DISPID_EXLVW_HEADERBEGINDRAG), helpstring("Enters drag'n'drop mode for the header control.")]
		HRESULT HeaderBeginDrag([in] IListViewColumn* draggedColumn, [in, defaultvalue(0)] OLE_HANDLE hDragImageList, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xHotSpot, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yHotSpot, [in, defaultvalue(-1)] VARIANT_BOOL restrictDragImage);
		/// \brief <em>Exits drag'n'drop mode</em>
		///
		/// \param[in] abort If \c True, the drag'n'drop operation will be treated as aborted; otherwise
		///            it will be treated as a drop.
		///
		/// \remarks You shouldn't call this method if you've chosen to use automatic drag'n'drop in your
		///          \c ColumnBeginDrag event handler.
		///
		/// \sa DraggedColumn, HeaderBeginDrag, EndDrag, _IExplorerListViewEvents::HeaderAbortedDrag,
		///     _IExplorerListViewEvents::HeaderDrop, _IExplorerListViewEvents::ColumnBeginDrag
		[id(DISPID_EXLVW_HEADERENDDRAG), helpstring("Exits drag'n'drop mode.")]
		HRESULT HeaderEndDrag([in] VARIANT_BOOL abort);
		/// \brief <em>Hit-tests the specified point</em>
		///
		/// Retrieves the header control's parts that lie below the point ('x'; 'y').
		///
		/// \param[in] x The x-coordinate (in pixels) of the point to check. It must be relative to the
		///            header control's upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the point to check. It must be relative to the
		///            header control's upper-left corner.
		/// \param[in,out] hitTestDetails Receives a value specifying the exact part of the header control
		///                the specified point lies in. Any of the values defined by the
		///                \c HeaderHitTestConstants enumeration is valid.
		///
		/// \return The column that the specified point belongs to. \c Nothing, if no column was "hit".
		///
		/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
		///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
		///          point's header coordinates (i. e. relative to the header control's upper-left corner).
		///
		/// \sa HeaderHitTestConstants
		[id(DISPID_EXLVW_HEADERHITTEST), helpstring("Retrieves the header control's parts that lie below the point ('x'; 'y').")]
		HRESULT HeaderHitTest([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y, [in, out] HeaderHitTestConstants* hitTestDetails, [out, retval] IListViewColumn** ppHitColumn);
		/// \brief <em>Enters OLE drag'n'drop mode</em>
		///
		/// \param[in] pDataObject A pointer to the \c IDataObject implementation to use during OLE
		///            drag'n'drop. If not specified, the control's own implementation is used.
		/// \param[in] supportedEffects A bit field defining all drop effects you want to support. Any
		///            combination of the values defined by the \c OLEDropEffectConstants enumeration
		///            (except \c odeScroll) is valid.
		/// \param[in] hWndToAskForDragImage The handle of the window, that will receive the
		///            \c DI_GETDRAGIMAGE message to specify the drag image to use. If -1, the control
		///            creates the drag image itself. If \c SupportOLEDragImages is set to \c False, no
		///            drag image is used.
		/// \param[in] draggedColumnHeader The column header to drag. This parameter is used to generate the
		///            drag image, if \c hWndToAskForDragImage is set to -1.
		/// \param[in] itemCountToDisplay The number to display in the item count label of Aero drag images.
		///            If set to -1, 0 or 1, no item count label is displayed. If set to any value larger than
		///            1, this value is displayed in the item count label.
		///
		/// \return The performed drop effect. Any of the values defined by the \c OLEDropEffectConstants
		///         enumeration (except \c odeScroll) is valid.
		///
		/// \sa HeaderBeginDrag, OLEDrag, _IExplorerListViewEvents::ColumnBeginDrag,
		///     _IExplorerListViewEvents::HeaderOLEStartDrag, _IExplorerListViewEvents::HeaderOLEGiveFeedback,
		///     _IExplorerListViewEvents::HeaderOLEQueryContinueDrag, SupportOLEDragImages,
		///     HeaderOLEDragImageStyle, OLEDropEffectConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646443.aspx">DI_GETDRAGIMAGE</a>
		[id(DISPID_EXLVW_HEADEROLEDRAG), helpstring("Enters OLE drag'n'drop mode.")]
		HRESULT HeaderOLEDrag([in, defaultvalue(NULL)] LONG* pDataObject, [in, defaultvalue(odeCopyOrMove)] OLEDropEffectConstants supportedEffects, [in, defaultvalue(-1)] OLE_HANDLE hWndToAskForDragImage, [in, defaultvalue(NULL)] IListViewColumn* draggedColumnHeader, [in, defaultvalue(-1)] LONG itemCountToDisplay, [out, retval] OLEDropEffectConstants* pPerformedEffects);
		/// \brief <em>Advises the header control to redraw itself</em>
		///
		/// \sa Refresh
		[id(DISPID_EXLVW_HEADERREFRESH), helpstring("Advises the header control to redraw itself.")]
		HRESULT HeaderRefresh(void);
		/// \brief <em>Hit-tests the specified point</em>
		///
		/// Retrieves the control's parts that lie below the point ('x'; 'y').
		///
		/// \param[in] x The x-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[in,out] hitTestDetails Receives a value specifying the exact part of the control the
		///                specified point lies in. Any of the values defined by the \c HitTestConstants
		///                enumeration is valid.
		/// \param[in,out] hitSubItem Receives the sub-item that the specified point belongs to. Will be
		///                \c Nothing, if no sub-item was "hit".
		/// \param[in,out] hitGroup Receives the group that the specified point belongs to. Will be \c Nothing,
		///                if no group was "hit". Requires comctl32.dll version 6.10 or higher.
		/// \param[in,out] hitFooterItem Receives the footer item that the specified point belongs to. Will be
		///                \c Nothing, if no footer item was "hit". Requires comctl32.dll version 6.10 or
		///                higher.
		///
		/// \return The item that the specified point belongs to. \c Nothing, if no item was "hit".
		///
		/// \sa ItemBoundingBoxDefinition, HitTestConstants, ListViewSubItem, ListViewGroup, ListViewFooterItem
		[id(DISPID_EXLVW_HITTEST), helpstring("Retrieves the control's parts that lie below the point ('x'; 'y').")]
		HRESULT HitTest([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y, [in, out] HitTestConstants* hitTestDetails, [in, out, optional] VARIANT* hitSubItem, [in, out, optional] VARIANT* hitGroup, [in, out, optional] VARIANT* hitFooterItem, [out, retval] IListViewItem** ppHitItem);
		/// \brief <em>Retrieves whether the footer area is currently displayed</em>
		///
		/// Retrieves whether the control's footer area is currently displayed.
		///
		/// \return \c True if the footer area is visible; otherwise \c False.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ShowFooter, FooterItems
		[id(DISPID_EXLVW_ISFOOTERVISIBLE), helpstring("Retrieves whether the control's footer area is currently displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT IsFooterVisible([out, retval] VARIANT_BOOL* pVisible);
		/// \brief <em>Loads the control's settings from the specified file</em>
		///
		/// \param[in] file The file to read from.
		///
		/// \return \c True if the settings could be loaded; otherwise \c False.
		///
		/// \sa SaveSettingsToFile
		[id(DISPID_EXLVW_LOADSETTINGSFROMFILE), helpstring("Loads the control's settings from the specified file.")]
		HRESULT LoadSettingsFromFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Enters OLE drag'n'drop mode</em>
		///
		/// \param[in] pDataObject A pointer to the \c IDataObject implementation to use during OLE
		///            drag'n'drop. If not specified, the control's own implementation is used.
		/// \param[in] supportedEffects A bit field defining all drop effects you want to support. Any
		///            combination of the values defined by the \c OLEDropEffectConstants enumeration
		///            (except \c odeScroll) is valid.
		/// \param[in] hWndToAskForDragImage The handle of the window, that will receive the
		///            \c DI_GETDRAGIMAGE message to specify the drag image to use. If -1, the control
		///            creates the drag image itself. If \c SupportOLEDragImages is set to \c False, no
		///            drag image is used.
		/// \param[in] draggedItems A collection object containing the items to drag. This parameter is
		///            used to generate the drag image, if \c hWndToAskForDragImage is set to -1.
		/// \param[in] itemCountToDisplay The number to display in the item count label of Aero drag images.
		///            If set to 0 or 1, no item count label is displayed. If set to -1, the number of items
		///            contained in the \c draggedItems collection is displayed in the item count label. If
		///            set to any value larger than 1, this value is displayed in the item count label.
		///
		/// \return The performed drop effect. Any of the values defined by the \c OLEDropEffectConstants
		///         enumeration (except \c odeScroll) is valid.
		///
		/// \sa BeginDrag, HeaderOLEDrag, _IExplorerListViewEvents::ItemBeginDrag,
		///     _IExplorerListViewEvents::ItemBeginRDrag, _IExplorerListViewEvents::OLEStartDrag,
		///     _IExplorerListViewEvents::OLEGiveFeedback, _IExplorerListViewEvents::OLEQueryContinueDrag,
		///     SupportOLEDragImages, OLEDragImageStyle, OLEDropEffectConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646443.aspx">DI_GETDRAGIMAGE</a>
		[id(DISPID_EXLVW_OLEDRAG), helpstring("Enters OLE drag'n'drop mode.")]
		HRESULT OLEDrag([in, defaultvalue(NULL)] LONG* pDataObject, [in, defaultvalue(odeCopyOrMove)] OLEDropEffectConstants supportedEffects, [in, defaultvalue(-1)] OLE_HANDLE hWndToAskForDragImage, [in, defaultvalue(NULL)] IListViewItemContainer* draggedItems, [in, defaultvalue(-1)] LONG itemCountToDisplay, [out, retval] OLEDropEffectConstants* pPerformedEffects);
		/// \brief <em>Redraws a range of items</em>
		///
		/// \param[in] iFirstItem The index of the first item to redraw.
		/// \param[in] iLastItem The index of the last item to redraw.
		///
		/// \remarks The specified items are not actually redrawn until the control receives a \c WM_PAINT
		///          message to repaint. To repaint immediately, call the \c Refresh method.
		///
		/// \sa Refresh, IListViewItem::Update
		[id(DISPID_EXLVW_REDRAWITEMS), helpstring("Redraws a range of items.")]
		HRESULT RedrawItems([in, defaultvalue(0)] LONG iFirstItem, [in, defaultvalue(-1)] LONG iLastItem);
		/// \brief <em>Advises the control to redraw itself</em>
		///
		/// \sa HeaderRefresh, RedrawItems
		[id(DISPID_EXLVW_REFRESH), helpstring("Advises the control to redraw itself.")]
		HRESULT Refresh(void);
		/// \brief <em>Saves the control's settings to the specified file</em>
		///
		/// \param[in] file The file to write to.
		///
		/// \return \c True if the settings could be saved; otherwise \c False.
		///
		/// \sa LoadSettingsFromFile
		[id(DISPID_EXLVW_SAVESETTINGSTOFILE), helpstring("Saves the control's settings to the specified file.")]
		HRESULT SaveSettingsToFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Scrolls the control's content</em>
		///
		/// \param[in] horizontalDistance The amount of horizontal scrolling in pixels. If the control
		///            is in 'List' view, this value specifies the number of columns to scroll.
		/// \param[in] verticalDistance The amount of vertical scrolling in pixels. If the control is in
		///            'Details' view, this value will be rounded, so that the control is scrolled in
		///            whole line increments.
		///
		/// \sa _IExplorerListViewEvents::BeforeScroll, _IExplorerListViewEvents::AfterScroll,
		///     GetOrigin, GetViewRectangle, View
		[id(DISPID_EXLVW_SCROLL), helpstring("Scrolls the control's content.")]
		HRESULT Scroll([in] OLE_XSIZE_PIXELS horizontalDistance, [in] OLE_YSIZE_PIXELS verticalDistance);
		/// \brief <em>Sets the keyboard focus to the header control</em>
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa CaretColumn, IListViewColumn::Caret
		[id(DISPID_EXLVW_SETFOCUSTOHEADER), helpstring("Sets the keyboard focus to the header control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT SetFocusToHeader(void);
		/// \brief <em>Sets the position of the header control's insertion mark</em>
		///
		/// \param[in] position The zero-based index of the column divider to highlight. The column divider
		///            to the left of the first column is the 0th one. If set to -1, the insertion mark is
		///            removed.
		/// \param[in] x The x-coordinate (in pixels) of a point relative to the header control's upper-left
		///            corner. The header control will highlight the column divider nearest to this point.
		/// \param[in] y The y-coordinate (in pixels) of a point relative to the header control's upper-left
		///            corner. The header control will highlight the column divider nearest to this point.
		///
		/// \return The zero-based index of the column divider that was highlighted.
		///
		/// \remarks If a position is specified as well as a point, the point takes priority over the
		///          position.\n
		///          Scrolling the control moves the header control, so that a point's listview coordinates
		///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
		///          point's header coordinates (i. e. relative to the header control's upper-left corner).
		///
		/// \sa SetInsertMarkPosition, AllowHeaderDragDrop, RegisterForOLEDragDrop
		[id(DISPID_EXLVW_SETHEADERINSERTMARKPOSITION), helpstring("Sets the position of the header control's insertion mark.")]
		HRESULT SetHeaderInsertMarkPosition([in, defaultvalue(0)] LONG position, [in, defaultvalue(0x80000000)] LONG x, [in, defaultvalue(0x80000000)] LONG y, [out, retval] LONG* pPosition);
		/// \brief <em>Sets the spacing between items in 'Icons' view</em>
		///
		/// Sets an item's width and height (including the space beneath it) in 'Icons' view in pixels.
		///
		/// \param[in] itemWidth The item's width (including the space beneath it) in pixels.
		/// \param[in] itemHeight The item's height (including the space beneath it) in pixels.
		///
		/// \remarks Setting both arguments to -1 resets icon spacing to the system defaults.
		///
		/// \sa GetIconSpacing, JustifyIconColumns, View
		[id(DISPID_EXLVW_SETICONSPACING), helpstring("Sets an item's width and height (including the space beneath it) in 'Icons' view in pixels.")]
		HRESULT SetIconSpacing([in] OLE_XSIZE_PIXELS itemWidth, [in] OLE_YSIZE_PIXELS itemHeight);
		/// \brief <em>Sets the position of the control's insertion mark</em>
		///
		/// \param[in] relativePosition The insertion mark's position relative to the specified item. Any
		///            of the values defined by the \c InsertMarkPositionConstants enumeration is valid.
		/// \param[in] listItem The item at which to show the insertion mark. If set to \c Nothing, the
		///            insertion mark will be removed.
		///
		/// \remarks An insertion mark can be used only if the control is in 'Icons', 'Small Icons', 'Tiles' or
		///          'Extended Tiles' view, is not in group-view mode, and has \c AutoArrangeItems set to
		///          \c aaiNormal.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa GetInsertMarkPosition, GetClosestInsertMarkPosition, SetHeaderInsertMarkPosition,
		///     InsertMarkColor, AutoArrangeItems, ShowGroups, View, RegisterForOLEDragDrop,
		///     InsertMarkPositionConstants
		[id(DISPID_EXLVW_SETINSERTMARKPOSITION), helpstring("Sets the position of the control's insertion mark. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SetInsertMarkPosition([in] InsertMarkPositionConstants relativePosition, [in] IListViewItem* listItem);
		/// \brief <em>Displays the footer area</em>
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa FooterIntroText, FooterItems, IsFooterVisible
		[id(DISPID_EXLVW_SHOWFOOTER), helpstring("Displays the footer area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowFooter(void);
		/// \brief <em>Sorts the control's groups</em>
		///
		/// Sorts the control's groups by up to 3 criteria.
		///
		/// \param[in] firstCriterion The first criterion by which to sort. Some of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] secondCriterion The second criterion by which to sort. It is used if two groups are
		///            equivalent regarding the first criterion. Some of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] thirdCriterion The third criterion by which to sort. It is used if two groups are
		///            equivalent regarding the first 2 criteria. Some of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] caseSensitive If \c True, text comparisons will be case sensitive; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa GroupSortOrder, _IExplorerListViewEvents::CompareGroups, SortItems, SortByConstants
		[id(DISPID_EXLVW_SORTGROUPS), helpstring("Sorts the control's groups. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SortGroups([in, defaultvalue(sobShell)] SortByConstants firstCriterion, [in, defaultvalue(sobText)] SortByConstants secondCriterion, [in, defaultvalue(sobNone)] SortByConstants thirdCriterion, [in, defaultvalue(0)] VARIANT_BOOL caseSensitive);
		/// \brief <em>Sorts the control's items</em>
		///
		/// Sorts the control's items by up to 5 criteria.
		///
		/// \param[in] firstCriterion The first criterion by which to sort. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] secondCriterion The second criterion by which to sort. It is used if two items are
		///            equivalent regarding the first criterion. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] thirdCriterion The third criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 2 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] fourthCriterion The fourth criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 3 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] fifthCriterion The fifth criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 4 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] column The column by which to sort if sorting by (sub-)item text.
		/// \param[in] caseSensitive If \c True, text comparisons will be case sensitive; otherwise not.
		///
		/// \sa SortOrder, _IExplorerListViewEvents::CompareItems, SortGroups, SortByConstants
		[id(DISPID_EXLVW_SORTITEMS), helpstring("Sorts the control's items.")]
		HRESULT SortItems([in, defaultvalue(sobShell)] SortByConstants firstCriterion, [in, defaultvalue(sobText)] SortByConstants secondCriterion, [in, defaultvalue(sobNone)] SortByConstants thirdCriterion, [in, defaultvalue(sobNone)] SortByConstants fourthCriterion, [in, defaultvalue(sobNone)] SortByConstants fifthCriterion, [in, optional] VARIANT column, [in, defaultvalue(0)] VARIANT_BOOL caseSensitive);

		/// \brief <em>Specifies which locale to use when sorting groups</em>
		///
		/// Retrieves or sets the unique ID of the locale to use when sorting the list view groups.
		///
		/// \remarks The locale is used when sorting using the \c sobNumericIntText, \c sobNumericFloatText,
		///          \c sobCurrencyText or \c sobDateTimeText sorting criterion.
		///
		/// \sa GroupTextParsingFlags, SortGroups, SortByConstants
		[propget, id(DISPID_EXLVW_GROUPLOCALE), helpstring("Retrieves or sets the unique ID of the locale to use when sorting the list view groups."), nonbrowsable]
		HRESULT GroupLocale([out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_GROUPLOCALE), helpstring("Retrieves or sets the unique ID of the locale to use when sorting the list view groups."), nonbrowsable]
		HRESULT GroupLocale([in] LONG newValue);
		/// \brief <em>Controls how text is parsed when sorting groups</em>
		///
		/// Retrieves or sets the options to apply when parsing the group header text into a numerical or date
		/// value. The parsing results may be used when sorting the list view groups.
		///
		/// \param[in] parsingFunction Specifies the parsing function for which to retrieve or set the options.
		///            Any of the values defined by the \c TextParsingFunctionConstants enumeration is valid.
		///
		/// \remarks The parsing options are used when sorting using the \c sobNumericIntText,
		///          \c sobNumericFloatText, \c sobCurrencyText or \c sobDateTimeText sorting criterion.\n
		///          They are also used when sorting using the \c sobText criterion if a specific locale
		///          identifier has been set for group sorting.
		///
		/// \sa GroupLocale, SortGroups, SortByConstants, TextParsingFunctionConstants
		[propget, id(DISPID_EXLVW_GROUPTEXTPARSINGFLAGS), helpstring("Retrieves or sets the options to apply when parsing the group header text into a numerical or date value. The parsing results may be used when sorting the list view groups."), nonbrowsable]
		HRESULT GroupTextParsingFlags([in] TextParsingFunctionConstants parsingFunction, [out, retval] LONG* pValue);
		[propput, id(DISPID_EXLVW_GROUPTEXTPARSINGFLAGS), helpstring("Retrieves or sets the options to apply when parsing the group header text into a numerical or date value. The parsing results may be used when sorting the list view groups."), nonbrowsable]
		HRESULT GroupTextParsingFlags([in] TextParsingFunctionConstants parsingFunction, [in] LONG newValue);

		/// \brief <em>Finishes a pending drop operation</em>
		///
		/// During a drag'n'drop operation the drag image is displayed until the \c OLEDragDrop (or
		/// \c HeaderOLEDragDrop) event has been handled. This order is intended by Microsoft Windows. However,
		/// if a message box is displayed from within the \c OLEDragDrop (\c HeaderOLEDragDrop) event, or the
		/// drop operation cannot be performed asynchronously and takes a long time, it may be desirable to
		/// remove the drag image earlier.\n
		/// This method will break the intended order and finish the drag'n'drop operation (including removal
		/// of the drag image) immediately.
		///
		/// \remarks This method will fail if not called from the \c OLEDragDrop (\c HeaderOLEDragDrop) event
		///          handler or if no drag images are used.
		///
		/// \sa _IExplorerListViewEvents::OLEDragDrop, _IExplorerListViewEvents::HeaderOLEDragDrop,
		///     SupportOLEDragImages
		[id(DISPID_EXLVW_FINISHOLEDRAGDROP), helpstring("Finishes a pending drop operation from within the 'OLEDragDrop' ('HeaderOLEDragDrop') event, removing the drag image, but breaking the intended order. See documentation for details.")]
		HRESULT FinishOLEDragDrop(void);
	};


	/// \interface _IExplorerListViewEvents
	/// \brief <em>The \c ExplorerListView class' events interface</em>
	///
	/// This interface defines all events the \c ExplorerListView class may raise.
	///
	/// \sa IExplorerListView
	[
		uuid(D86C0AB3-903F-4d5e-AC56-13C918B25272),
		helpstring("IExplorerListView-event-interface")
	]
	dispinterface _IExplorerListViewEvents
	{
		properties:
		methods:
			/// \brief <em>The caret was changed</em>
			///
			/// Will be fired after another item became the caret item. The caret item is the item that has
			/// the focus.
			///
			/// \param[in] previousCaretItem The previous caret item.
			/// \param[in] newCaretItem The new caret item.
			///
			/// \remarks This is the control's default event.
			///
			/// \sa ItemSelectionChanged, IListViewItem::Caret, IExplorerListView::CaretItem
			[id(DISPID_EXLVWE_CARETCHANGED), helpstring("Will be fired after another item became the caret item. The caret item is the item that has the focus.")]
			void CaretChanged(IListViewItem* previousCaretItem, IListViewItem* newCaretItem);
			/// \brief <em>A drag'n'drop operation was aborted</em>
			///
			/// Will be fired if a drag'n'drop operation was aborted.
			///
			/// \sa Drop, HeaderAbortedDrag, IExplorerListView::EndDrag
			[id(DISPID_EXLVWE_ABORTEDDRAG), helpstring("Will be fired if a drag'n'drop operation was aborted.")]
			void AbortedDrag(void);
			/// \brief <em>The control has been scrolled</em>
			///
			/// Will be fired if the control has been scrolled.
			///
			/// \param[in] dx The number of steps that the control was scrolled horizontally.
			/// \param[in] dy The number of steps that the control was scrolled vertically.
			///
			/// \remarks This event is fired only if the scrolling operation is invoked using the mouse.\n
			///          Requires comctl32.dll version 6.0 or higher.
			///
			/// \sa IExplorerListView::ScrollBars, IExplorerListView::Scroll, BeforeScroll
			[id(DISPID_EXLVWE_AFTERSCROLL), helpstring("Will be fired if the control has been scrolled. Requires comctl32.dll version 6.0 or higher.")]
			void AfterScroll(LONG dx, LONG dy);
			/// \brief <em>The control is about to be scrolled</em>
			///
			/// Will be fired if the control is about to be scrolled.
			///
			/// \param[in] dx The number of steps that the control is about to be scrolled horizontally.
			/// \param[in] dy The number of steps that the control is about to be scrolled vertically.
			///
			/// \remarks This event is fired only if the scrolling operation is invoked using the mouse.\n
			///          Requires comctl32.dll version 6.0 or higher.
			///
			/// \sa IExplorerListView::ScrollBars, IExplorerListView::Scroll, AfterScroll
			[id(DISPID_EXLVWE_BEFORESCROLL), helpstring("Will be fired if the control is about to be scrolled. Requires comctl32.dll version 6.0 or higher.")]
			void BeforeScroll(LONG dx, LONG dy);
			/// \brief <em>A column is about to being resized</em>
			///
			/// Will be fired if the user has begun resizing the specified column by dragging the column divider.
			///
			/// \param[in] column The column being resized.
			/// \param[in,out] cancel If set to \c True, column resizing is aborted; otherwise not.
			///
			/// \sa ResizingColumn, EndColumnResizing, IExplorerListView::ResizableColumns,
			///     IListViewColumn::Resizable, IListViewColumn::Width
			[id(DISPID_EXLVWE_BEGINCOLUMNRESIZING), helpstring("Will be fired if the user has begun resizing the specified column by dragging the column divider.")]
			void BeginColumnResizing(IListViewColumn* column, VARIANT_BOOL* cancel);
			/// \brief <em>A marquee selection is about to begin</em>
			///
			/// Will be fired if a bounding box (marquee) selection is about to begin in the control.
			///
			/// \param[in,out] cancel If set to \c True, marquee selection is aborted; otherwise not.
			///
			/// \sa IExplorerListView::MultiSelect, ItemSelectionChanged, SelectedItemRange
			[id(DISPID_EXLVWE_BEGINMARQUEESELECTION), helpstring("Will be fired if a bounding box (marquee) selection is about to begin in the control.")]
			void BeginMarqueeSelection(VARIANT_BOOL* cancel);
			/// \brief <em>The \c ItemGetDisplayInfo event is about to being fired</em>
			///
			/// Will be fired to notify your application of which items the \c ItemGetDisplayInfo event will be
			/// fired for next. To increase performance, your application should cache the display data for
			/// those items.
			///
			/// \param[in] firstItem The first item to cache.
			/// \param[in] lastItem The last item to cache.
			///
			/// \remarks This event won't be fired if \c IExplorerListView::VirtualMode is set to \c False.
			///
			/// \sa ItemGetDisplayInfo, IExplorerListView::VirtualMode
			[id(DISPID_EXLVWE_CACHEITEMSHINT), helpstring("Will be fired to notify your application of which items the 'ItemGetDisplayInfo' event will be fired for next.")]
			void CacheItemsHint(IListViewItem* FirstItem, IListViewItem* lastItem);
			/// \brief <em>Editing a sub-item has been canceled</em>
			///
			/// Will be fired if the user canceled editing the specified sub-item.
			///
			/// \param[in] listSubItem The sub-item that has been edited.
			/// \param[in] editMode Specifies how the label-edit mode has been entered. Any of the values defined
			///            by the \c SubItemEditModeConstants enumeration is valid.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa GetSubItemControl, ConfigureSubItemControl, EndSubItemEdit, SubItemEditModeConstants
			[id(DISPID_EXLVWE_CANCELSUBITEMEDIT), helpstring("Will be fired if the user canceled editing the specified sub-item. Requires comctl32.dll version 6.10 or higher.")]
			void CancelSubItemEdit(IListViewSubItem* listSubItem, SubItemEditModeConstants editMode);
			/// \brief <em>The control's sort order was changed</em>
			///
			/// Will be fired after the control's sort order has been redefined.
			///
			/// \param[in] previousSortOrder The control's old sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			/// \param[in] newSortOrder The control's new sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			///
			/// \sa ChangingSortOrder, IExplorerListView::SortOrder, SortOrderConstants
			[id(DISPID_EXLVWE_CHANGEDSORTORDER), helpstring("Will be fired after the control's sort order has been redefined.")]
			void ChangedSortOrder(SortOrderConstants previousSortOrder, SortOrderConstants newSortOrder);
			/// \brief <em>The working areas were changed</em>
			///
			/// Will be fired after the control's working areas have been redefined.
			///
			/// \param[in] WorkAreas A collection of the new working areas.
			///
			/// \sa ChangingWorkAreas, IListViewWorkAreas
			[id(DISPID_EXLVWE_CHANGEDWORKAREAS), helpstring("Will be fired after the control's working areas have been redefined.")]
			void ChangedWorkAreas(IListViewWorkAreas* WorkAreas);
			/// \brief <em>The control's sort order is about to be changed</em>
			///
			/// Will be fired before the control's sort order is redefined.
			///
			/// \param[in] previousSortOrder The control's old sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			/// \param[in] newSortOrder The control's new sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			/// \param[in,out] cancelChange If set to \c True, redefining is aborted, i. e. the sort order
			///                remains the same. If set to \c False, the sort order is redefined.
			///
			/// \sa ChangedSortOrder, IExplorerListView::SortOrder, SortOrderConstants
			[id(DISPID_EXLVWE_CHANGINGSORTORDER), helpstring("Will be fired before the control's sort order is redefined.")]
			void ChangingSortOrder(SortOrderConstants previousSortOrder, SortOrderConstants newSortOrder, VARIANT_BOOL* cancelChange);
			/// \brief <em>The working areas are about to be changed</em>
			///
			/// Will be fired before the control's working areas are redefined.
			///
			/// \param[in] WorkAreas A collection of the new working areas.
			/// \param[in,out] cancelChanges If set to \c True, redefining is aborted, i. e. the working
			///                areas remain the same. If set to \c False, the working areas are redefined.
			///
			/// \sa ChangedWorkAreas, IVirtualListViewWorkAreas
			[id(DISPID_EXLVWE_CHANGINGWORKAREAS), helpstring("Will be fired before the control's working areas are redefined.")]
			void ChangingWorkAreas(IVirtualListViewWorkAreas* WorkAreas, VARIANT_BOOL* cancelChanges);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the left mouse button.
			///
			/// \param[in] listItem The item that was clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa DblClick, MClick, RClick, XClick, HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_CLICK), helpstring("Will be fired if the user clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void Click(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A group has been collapsed</em>
			///
			/// Will be fired after a collapsible group has been collapsed.
			///
			/// \param[in] group The group that was collapsed.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa ExpandedGroup, IListViewGroup::Collapsible, IListViewGroup::Collapsed
			[id(DISPID_EXLVWE_COLLAPSEDGROUP), helpstring("Will be fired after a collapsible group has been collapsed. Requires comctl32.dll version 6.10 or higher.")]
			void CollapsedGroup(IListViewGroup* Group);
			/// \brief <em>The user seems to want to drag a column's header</em>
			///
			/// Will be fired if the user seems to want to drag a column's header using the left mouse button.
			///
			/// \param[in] column The column header that the user wants to drag.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid, but usually it is just
			///            \c vbLeftButton.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Most of the values defined by the \c HeaderHitTestConstants
			///            enumeration are valid.
			/// \param[in,out] doAutomaticDragDrop If set to \c True, the header control will handle column
			///                drag'n'drop itself and the \c ColumnEndAutoDragDrop event will be raised at the
			///                end of the drag'n'drop operation; otherwise your application takes control over
			///                the drag'n'drop operation.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).
			///
			/// \sa IExplorerListView::HeaderBeginDrag, IExplorerListView::HeaderOLEDrag,
			///     IExplorerListView::AllowHeaderDragDrop, ColumnEndAutoDragDrop, ItemBeginDrag,
			///     HeaderHitTestConstants
			[id(DISPID_EXLVWE_COLUMNBEGINDRAG), helpstring("Will be fired if the user seems to want to drag a column's header using the left mouse button.")]
			void ColumnBeginDrag(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails, VARIANT_BOOL* doAutomaticDragDrop);
			/// \brief <em>The user clicked a column header</em>
			///
			/// Will be fired if the user clicks a column header using the left mouse button. This event should
			/// be used to change the sorting settings.
			///
			/// \param[in] column The column header that was clicked.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was clicked.
			///            Some of the values defined by the \c HeaderHitTestConstants enumeration are valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).
			///
			/// \sa HeaderClick, HeaderHitTestConstants
			[id(DISPID_EXLVWE_COLUMNCLICK), helpstring("Will be fired if the user clicks a column header using the left mouse button. This event should be used to change the sorting settings.")]
			void ColumnClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>A column header's drop-down menu should be displayed</em>
			///
			/// Will be fired if a column header's drop-down menu should be displayed.
			///
			/// \param[in] column The column header whose drop-down menu should be displayed.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in pixels) of the drop-down menu's proposed position relative to
			///            the header control's upper-left corner.
			/// \param[in] y The y-coordinate (in pixels) of the drop-down menu's proposed position relative to
			///            the header control's upper-left corner.
			/// \param[in,out] showDefaultMenu If set to \c True, the default drop-down menu is displayed;
			///                otherwise the control doesn't display any drop-down menu itself, but you may
			///                display your custom menu.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa ColumnClick, IListViewColumn::ShowDropDownButton
			[id(DISPID_EXLVWE_COLUMNDROPDOWN), helpstring("Will be fired if a column header's drop-down menu should be displayed. Requires comctl32.dll version 6.10 or higher.")]
			void ColumnDropDown(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>Automatic column header drag'n'drop ended</em>
			///
			/// Will be fired if <strong>automatic</strong> column header drag'n'drop ended.
			///
			/// \param[in] column The column header that was dragged.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid, but usually it is just
			///            \c vbLeftButton.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Most of the values defined by the \c HeaderHitTestConstants
			///            enumeration are valid.
			/// \param[in,out] doAutomaticDrop If set to \c True, the header control will handle the column
			///                header drop itself; otherwise your application handles the drop.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).
			///
			/// \sa IExplorerListView::AllowHeaderDragDrop, ColumnBeginDrag, HeaderHitTestConstants
			[id(DISPID_EXLVWE_COLUMNENDAUTODRAGDROP), helpstring("Will be fired if *automatic* column header drag'n'drop ended.")]
			void ColumnEndAutoDragDrop(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails, VARIANT_BOOL* doAutomaticDrop);
			/// \brief <em>The mouse cursor was moved into a column header's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor into the specified column header's bounding
			/// rectangle.
			///
			/// \param[in] column The column header that was entered.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Most of the values defined by the \c HeaderHitTestConstants
			///            enumeration are valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa ColumnMouseLeave, HeaderMouseMove, ExtendedMouseButtonConstants, HeaderHitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_COLUMNMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the specified column header's bounding rectangle. This event may be disabled.")]
			void ColumnMouseEnter(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of a column header's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the specified column header's bounding
			/// rectangle.
			///
			/// \param[in] column The column header that was left.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Most of the values defined by the \c HeaderHitTestConstants
			///            enumeration are valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa ColumnMouseEnter, HeaderMouseMove, ExtendedMouseButtonConstants, HeaderHitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_COLUMNMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the specified column header's bounding rectangle. This event may be disabled.")]
			void ColumnMouseLeave(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>A column's state image was changed</em>
			///
			/// Will be fired after a column's state image was changed. The state image is identified by an
			/// one-based index and is part of the control's \c ilHeaderState imagelist. It's drawn next to the
			/// column header and usually a checkbox.
			///
			/// \param[in] column The column whose state image was changed.
			/// \param[in] previousStateImageIndex The column's previous state image index.
			/// \param[in] newStateImageIndex The column's new state image index.
			/// \param[in] causedBy The reason for the state image change. Any of the values defined by
			///            the \c StateImageChangeCausedByConstants enumeration is valid.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa ColumnStateImageChanging, ItemStateImageChanged, IExplorerListView::hImageList,
			///     IListViewColumn::StateImageIndex, StateImageChangeCausedByConstants, ImageListConstants
			[id(DISPID_EXLVWE_COLUMNSTATEIMAGECHANGED), helpstring("Will be fired after a column's state image was changed. Requires comctl32.dll version 6.10 or higher.")]
			void ColumnStateImageChanged(IListViewColumn* column, LONG previousStateImageIndex, LONG newStateImageIndex, StateImageChangeCausedByConstants causedBy);
			/// \brief <em>A column's state image is about to be changed</em>
			///
			/// Will be fired before a column's state image is changed. The state image is identified by an
			/// one-based index and is part of the control's \c ilHeaderState imagelist. It's drawn next to the
			/// column header and usually a checkbox.
			///
			/// \param[in] column The column whose state image shall be changed.
			/// \param[in] previousStateImageIndex The column's previous state image index.
			/// \param[in,out] newStateImageIndex The column's new state image index. You may change this
			///                value.
			/// \param[in] causedBy The reason for the state image change. Any of the values defined by
			///            the \c StateImageChangeCausedByConstants enumeration is valid.
			/// \param[in,out] cancelChange If set to \c True, the state image change is aborted, i. e.
			///                the column's state image remains the same. In this case the
			///                \c ColumnStateImageChanged event isn't fired. If set to \c False, the
			///                state image change is completed.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa ColumnStateImageChanged, ItemStateImageChanging, IExplorerListView::hImageList,
			///     IListViewColumn::StateImageIndex, StateImageChangeCausedByConstants, ImageListConstants
			[id(DISPID_EXLVWE_COLUMNSTATEIMAGECHANGING), helpstring("Will be fired before a column's state image is changed. Requires comctl32.dll version 6.10 or higher.")]
			void ColumnStateImageChanging(IListViewColumn* column, LONG previousStateImageIndex, LONG* newStateImageIndex, StateImageChangeCausedByConstants causedBy, VARIANT_BOOL* cancelChange);
			/// \brief <em>Two groups must be compared</em>
			///
			/// Will be fired during custom sorting if two groups must be compared.
			///
			/// \param[in] firstGroup The first group to compare.
			/// \param[in] secondGroup The second group to compare.
			/// \param[in,out] result The comparison's result. Any of the values defined by the
			///                \c CompareResultConstants enumeration is valid. If \c GroupSortOrder is set to
			///                \c soDescending, the control will invert this value.
			///
			/// \sa IExplorerListView::GroupSortOrder, IExplorerListView::SortGroups, CompareResultConstants
			[id(DISPID_EXLVWE_COMPAREGROUPS), helpstring("Will be fired during custom sorting if two groups must be compared.")]
			void CompareGroups(IListViewGroup* firstGroup, IListViewGroup* secondGroup, CompareResultConstants* result);
			/// \brief <em>Two items must be compared</em>
			///
			/// Will be fired during custom sorting if two items must be compared.
			///
			/// \param[in] firstItem The first item to compare.
			/// \param[in] secondItem The second item to compare.
			/// \param[in,out] result The comparison's result. Any of the values defined by the
			///                \c CompareResultConstants enumeration is valid. If \c SortOrder is set to
			///                \c soDescending, the control will invert this value.
			///
			/// \sa IExplorerListView::SortOrder, IExplorerListView::SortItems, CompareResultConstants
			[id(DISPID_EXLVWE_COMPAREITEMS), helpstring("Will be fired during custom sorting if two items must be compared.")]
			void CompareItems(IListViewItem* FirstItem, IListViewItem* secondItem, CompareResultConstants* result);
			/// \brief <em>The control representing the specified sub-item is needs to be configured</em>
			///
			/// Will be fired if the sub-item control, that represents the specified sub-item, needs to be
			/// configured. The sub-item control has previously been specified in the \c GetSubItemControl
			/// event.\n
			/// Starting with comctl32.dll version 6.10, sub-items can be represented by objects that implement
			/// a special interface (\c IPropertyControlBase). Representation means drawing the sub-item (by
			/// implementing the \c IDrawPropertyControl interface) and/or editing the sub-item in-place (by
			/// implementing the \c IPropertyControl interface, which allows in-place editing with a complex user
			/// interface). The object that represents the sub-item is retrieved dynamically.
			///
			/// \param[in] listSubItem The sub-item that the representation control needs to be configured for.
			/// \param[in] controlKind The kind of representation control being configured. Any of the values
			///            defined by the \c SubItemControlKindConstants enumeration are valid.
			/// \param[in] editMode Specifies how the label-edit mode is being entered. Any of the values defined
			///            by the \c SubItemEditModeConstants enumeration is valid.
			/// \param[in] subItemControl The representation control that needs to be configured. Any of the
			///            values defined by the \c SubItemControlConstants enumeration are valid.
			/// \param[in,out] themeAppName Specifies the application name of the theme to apply when drawing
			///                the sub-item control. For instance this value can be set to "explorer" to make
			///                the sub-item control be drawn like in Windows Explorer.
			/// \param[in,out] themeIDList Specifies a semicolon-separated list of CLSID names to use in place
			///                of the names specified by the window's class. This value is used to refine the
			///                search for a visual style to apply. For instance there might be different visual
			///                styles available for different usages of the same window class.
			/// \param[in,out] hFont Specifies the font to apply to the sub-item control.
			/// \param[in,out] textColor Specifies the text color to apply to the sub-item control.
			/// \param[in,out] pPropertyDescription A pointer to an object that implements the
			///                \c IPropertyDescription interface. This object is used for a more detailed
			///                configuration of the sub-item control. Some built-in sub-item controls like the
			///                \c sicDropList control won't work without specifying an \c IPropertyDescription
			///                implementation.
			/// \param[in,out] pPropertyValue Specifies the address of a \c PROPVARIANT structure that holds the
			///                sub-item's current value. Sub-items can be thought of as representing various
			///                properties of the item that they belong to. These properties can be of any type,
			///                not only strings. The \c PROPVARIANT type is similar to Visual Basic's \c Variant
			///                type and can hold any other type, for instance integer numbers, floating-point
			///                numbers and objects.\n
			///                Use the <a href="https://msdn.microsoft.com/en-us/library/bb762286.aspx">PROPVARIANT
			///                and VARIANT API functions</a> to work with the \c PROPVARIANT data.
			///
			/// \remarks With current versions of comctl32.dll, providing a sub-item control is the only way to
			///          custom-draw sub-items in Tiles view mode.\n
			///          Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa GetSubItemControl, EndSubItemEdit, CancelSubItemEdit, CustomDraw,
			///     SubItemControlKindConstants, SubItemEditModeConstants, SubItemControlConstants,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/ipropertycontrolbase.htm">IPropertyControlBase</a>,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/idrawpropertycontrol.htm">IDrawPropertyControl</a>,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/ipropertycontrol.htm">IPropertyControl</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb761561.aspx">IPropertyDescription</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/aa380072.aspx">PROPVARIANT</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb762286.aspx">PROPVARIANT and VARIANT Functions</a>
			[id(DISPID_EXLVWE_CONFIGURESUBITEMCONTROL), helpstring("Will be fired if the sub-item control, that represents the specified sub-item, needs to be configured. Requires comctl32.dll version 6.10 or higher.")]
			void ConfigureSubItemControl(IListViewSubItem* listSubItem, SubItemControlKindConstants controlKind, SubItemEditModeConstants editMode, SubItemControlConstants subItemControl, BSTR* themeAppName, BSTR* themeIDList, LONG* hFont, OLE_COLOR* textColor, LONG* pPropertyDescription, LONG pPropertyValue);
			/// \brief <em>The context menu should be displayed</em>
			///
			/// Will be fired if the control's context menu should be displayed.
			///
			/// \param[in] listItem The item the context menu refers to. Will be \c Nothing if the context
			///            menu should be displayed for the whole control instead of only for a single item.
			/// \param[in] listSubItem The sub-item the context menu refers to. Will be \c Nothing if the
			///            context menu shouldn't be specific to a sub-item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the menu's proposed position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the control doesn't display any context menu itself, but you may
			///                display your custom menu.
			///
			/// \sa RClick, HitTestConstants
			[id(DISPID_EXLVWE_CONTEXTMENU), helpstring("Will be fired if the control's context menu should be displayed.")]
			void ContextMenu(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The contained edit control was created</em>
			///
			/// Will be fired after the contained edit control was created.
			///
			/// \param[in] hWndEdit The contained edit control's window handle.
			///
			/// \sa DestroyedEditControlWindow, StartingLabelEditing, IExplorerListView::hWndEdit
			[id(DISPID_EXLVWE_CREATEDEDITCONTROLWINDOW), helpstring("Will be fired after the contained edit control was created.")]
			void CreatedEditControlWindow(LONG hWndEdit);
			/// \brief <em>The contained header control was created</em>
			///
			/// Will be fired after the contained header control was created.
			///
			/// \param[in] hWndHeader The contained header control's window handle.
			///
			/// \sa DestroyedHeaderControlWindow, IExplorerListView::hWndHeader
			[id(DISPID_EXLVWE_CREATEDHEADERCONTROLWINDOW), helpstring("Will be fired after the contained header control was created.")]
			void CreatedHeaderControlWindow(LONG hWndHeader);
			/// \brief <em>Custom drawing should be done here</em>
			///
			/// Will be fired after the control processed a \c NM_CUSTOMDRAW notification allowing custom
			/// drawing of the control's content.
			///
			/// \param[in] listItem The item that the notification refers to. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the notification refers to. May be \c Nothing.
			/// \param[in] drawAllItems If \c True, all items are to be drawn.
			/// \param[in,out] textColor The color to draw the item's text in.
			/// \param[in,out] TextBackColor The color to fill the item text's background with.
			/// \param[in] drawStage Specifies the stage of custom drawing this event was raised for. Any of
			///            the values defined by the \c CustomDrawStageConstants enumeration is valid.
			/// \param[in] itemState Specifies the item's current state (focused, selected etc.). Most of
			///            the values defined by the \c CustomDrawItemStateConstants enumeration are valid.
			/// \param[in] hDC The handle of the device context in which all drawing should take place.
			/// \param[in] drawingRectangle The bounding rectangle of the area that must be drawn.
			/// \param[in,out] furtherProcessing Controls further drawing. Most of the values defined by the
			///                \c CustomDrawReturnValuesConstants enumeration are valid.
			///
			/// \remarks The \c drawAllItems parameter is meaningful on Windows 7 and newer only.\n
			///          The text's background color can't be customized if a background bitmap is used.\n
			///          This event may be disabled.
			///
			/// \sa GroupCustomDraw, HeaderCustomDraw, OwnerDrawItem, IExplorerListView::ForeColor,
			///     IExplorerListView::TextBackColor, IExplorerListView::BkImage, RECTANGLE,
			///     CustomDrawStageConstants, CustomDrawItemStateConstants, CustomDrawReturnValuesConstants,
			///     IExplorerListView::DisabledEvents,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb774865.aspx">NM_CUSTOMDRAW (list view)</a>
			[id(DISPID_EXLVWE_CUSTOMDRAW), helpstring("Will be fired after the control processed a 'NM_CUSTOMDRAW' notification allowing custom drawing of the control's content. This event may be disabled.")]
			void CustomDraw(IListViewItem* listItem, IListViewSubItem* listSubItem, VARIANT_BOOL drawAllItems, OLE_COLOR* textColor, OLE_COLOR* TextBackColor, CustomDrawStageConstants drawStage, CustomDrawItemStateConstants itemState, LONG hDC, RECTANGLE* drawingRectangle, CustomDrawReturnValuesConstants* furtherProcessing);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the left mouse
			/// button.
			///
			/// \param[in] listItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa Click, MDblClick, RDblClick, XDblClick, HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_DBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void DblClick(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was destroyed</em>
			///
			/// Will be fired after the control window was destroyed.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa RecreatedControlWindow, IExplorerListView::hWnd
			[id(DISPID_EXLVWE_DESTROYEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed.")]
			void DestroyedControlWindow(LONG hWnd);
			/// \brief <em>The contained edit control was destroyed</em>
			///
			/// Will be fired after the contained edit control was destroyed.
			///
			/// \param[in] hWndEdit The contained edit control's window handle.
			///
			/// \sa CreatedEditControlWindow, StartingLabelEditing, IExplorerListView::hWndEdit,
			///     IExplorerListView::EndLabelEdit
			[id(DISPID_EXLVWE_DESTROYEDEDITCONTROLWINDOW), helpstring("Will be fired after the contained edit control was destroyed.")]
			void DestroyedEditControlWindow(LONG hWndEdit);
			/// \brief <em>The contained header control was destroyed</em>
			///
			/// Will be fired after the contained header control was destroyed.
			///
			/// \param[in] hWndHeader The contained header control's window handle.
			///
			/// \sa CreatedHeaderControlWindow, IExplorerListView::hWndHeader
			[id(DISPID_EXLVWE_DESTROYEDHEADERCONTROLWINDOW), helpstring("Will be fired after the contained header control was destroyed.")]
			void DestroyedHeaderControlWindow(LONG hWndHeader);
			/// \brief <em>The mouse cursor was moved over the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the control's client area during a
			/// drag'n'drop operation.
			///
			/// \param[in,out] dropTarget The item that is the current target of the drag'n'drop operation.
			///                You may set this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \sa MouseMove, OLEDragMouseMove, HeaderDragMouseMove, IExplorerListView::DragScrollTimeBase,
			///     IExplorerListView::DropHilitedItem, IExplorerListView::SetInsertMarkPosition,
			///     IExplorerListView::BeginDrag, HitTestConstants
			[id(DISPID_EXLVWE_DRAGMOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the control's client area during a drag'n'drop operation.")]
			void DragMouseMove(IListViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>A drag'n'drop operation ended successful</em>
			///
			/// Will be fired if a drag'n'drop operation ended successful.
			///
			/// \param[in] dropTarget The item that is the nearest one from the mouse cursor's position. If
			///            the mouse cursor's position lies outside the control's client area, this parameter
			///            will be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \sa AbortedDrag, HeaderDrop, IExplorerListView::EndDrag, HitTestConstants
			[id(DISPID_EXLVWE_DROP), helpstring("Will be fired if a drag'n'drop operation ended successful.")]
			void Drop(IListViewItem* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The contained edit control's text was changed</em>
			///
			/// Will be fired after the text displayed by the contained edit control was changed.
			///
			/// \sa EditKeyPress, IExplorerListView::EditText,
			[id(DISPID_EXLVWE_EDITCHANGE), helpstring("Will be fired after the text displayed by the contained edit control was changed.")]
			void EditChange(void);
			/// \brief <em>The user clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user clicks into the contained edit control's client area using the left
			/// mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditDblClick, EditMClick, EditRClick, EditXClick, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITCLICK), helpstring("Will be fired if the user clicks into the contained edit control's client area using the left mouse button. This event may be disabled.")]
			void EditClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The contained edit control's context menu should be displayed</em>
			///
			/// Will be fired if the contained edit control's context menu should be displayed.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the control doesn't display any context menu itself, but you may
			///                display your custom menu.
			///
			/// \sa EditRClick
			[id(DISPID_EXLVWE_EDITCONTEXTMENU), helpstring("Will be fired if the contained edit control's context menu should be displayed.")]
			void EditContextMenu(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The user double-clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the contained edit control's client area using the
			/// left mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditClick, EditMDblClick, EditRDblClick, EditXDblClick, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITDBLCLICK), helpstring("Will be fired if the user double-clicks into the contained edit control's client area using the left mouse button. This event may be disabled.")]
			void EditDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The focus was set to the contained edit control</em>
			///
			/// Will be fired after the contained edit control gained the keyboard focus.
			///
			/// \sa EditLostFocus
			[id(DISPID_EXLVWE_EDITGOTFOCUS), helpstring("Will be fired after the contained edit control gained the keyboard focus.")]
			void EditGotFocus(void);
			/// \brief <em>A key was pressed while the contained edit control has the focus</em>
			///
			/// Will be fired if the user presses a key while the contained edit control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's \c KeyCodeConstants
			///                enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa EditKeyUp, EditKeyPress, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITKEYDOWN), helpstring("Will be fired if the user presses a key while the contained edit control has the focus. This event may be disabled.")]
			void EditKeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the contained edit control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the contained edit
			/// control has the focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa EditKeyDown, EditKeyUp, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITKEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the contained edit control has the focus. This event may be disabled.")]
			void EditKeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the contained edit control has the focus</em>
			///
			/// Will be fired if the user releases a key while the contained edit control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa EditKeyDown, EditKeyPress, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITKEYUP), helpstring("Will be fired if the user releases a key while the contained edit control has the focus. This event may be disabled.")]
			void EditKeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>The contained edit control lost the focus</em>
			///
			/// Will be fired after the contained edit control lost the keyboard focus.
			///
			/// \sa EditGotFocus
			[id(DISPID_EXLVWE_EDITLOSTFOCUS), helpstring("Will be fired after the contained edit control lost the keyboard focus.")]
			void EditLostFocus(void);
			/// \brief <em>The user clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user clicks into the contained edit control's client area using the middle
			/// mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMDblClick, EditClick, EditRClick, EditXClick, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMCLICK), helpstring("Will be fired if the user clicks into the contained edit control's client area using the middle mouse button. This event may be disabled.")]
			void EditMClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the contained edit control's client area using the
			/// middle mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMClick, EditDblClick, EditRDblClick, EditXDblClick, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMDBLCLICK), helpstring("Will be fired if the user double-clicks into the contained edit control's client area using the middle mouse button. This event may be disabled.")]
			void EditMDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>A mouse button was pressed over the contained edit control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// contained edit control's client area.
			///
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseUp, EditClick, EditMClick, EditRClick, EditXClick, ExtendedMouseButtonConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the contained edit control's client area. This event may be disabled.")]
			void EditMouseDown(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved into the contained edit control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the contained edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseLeave, EditMouseHover, EditMouseMove, ExtendedMouseButtonConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the contained edit control's client area. This event may be disabled.")]
			void EditMouseEnter(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved into the contained edit control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the contained edit control's client area
			/// for the number of milliseconds specified by the \c IExplorerListView::EditHoverTime property.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseEnter, EditMouseLeave, EditMouseMove, IExplorerListView::EditHoverTime,
			///     ExtendedMouseButtonConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the contained edit control's client area for the number of milliseconds specified by the 'EditHoverTime' property. This event may be disabled.")]
			void EditMouseHover(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved out of the contained edit control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the contained edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseEnter, EditMouseHover, EditMouseMove, ExtendedMouseButtonConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the contained edit control's client area. This event may be disabled.")]
			void EditMouseLeave(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved over the contained edit control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the contained edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseEnter, EditMouseLeave, EditMouseDown, EditMouseUp, EditMouseWheel,
			///     ExtendedMouseButtonConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the contained edit control's client area. This event may be disabled.")]
			void EditMouseMove(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>A mouse button was released over the contained edit control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// contained edit control's client area.
			///
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseDown, EditClick, EditMClick, EditRClick, EditXClick, ExtendedMouseButtonConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the contained edit control's client area. This event may be disabled.")]
			void EditMouseUp(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse wheel was rotated over the contained edit control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the contained edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseMove, MouseWheel, HeaderMouseWheel, ExtendedMouseButtonConstants,
			///     ScrollAxisConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITMOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the contained edit control's client area. This event may be disabled.")]
			void EditMouseWheel(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, ScrollAxisConstants scrollAxis, SHORT wheelDelta);
			/// \brief <em>The user clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user clicks into the contained edit control's client area using the right
			/// mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditContextMenu, EditRDblClick, EditClick, EditMClick, EditXClick,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITRCLICK), helpstring("Will be fired if the user clicks into the contained edit control's client area using the right mouse button. This event may be disabled.")]
			void EditRClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the contained edit control's client area using the
			/// right mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditRClick, EditDblClick, EditMDblClick, EditXDblClick, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITRDBLCLICK), helpstring("Will be fired if the user double-clicks into the contained edit control's client area using the right mouse button. This event may be disabled.")]
			void EditRDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user clicks into the contained edit control's client area using one of the
			/// extended mouse buttons.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditXDblClick, EditClick, EditMClick, EditRClick, ExtendedMouseButtonConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITXCLICK), helpstring("Will be fired if the user clicks into the contained edit control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void EditXClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the contained edit control's client area using one
			/// of the extended mouse buttons.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditXClick, EditDblClick, EditMDblClick, EditRDblClick, ExtendedMouseButtonConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_EDITXDBLCLICK), helpstring("Will be fired if the user double-clicks into the contained edit control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void EditXDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user clicked a link in the empty markup text</em>
			///
			/// Will be fired if the user clicks a link in the text that is displayed if the control does not
			/// contain any items.
			///
			/// \param[in] linkIndex The zero-based index of the link that was clicked.
			/// \param[in] button The mouse button that was pressed during the click. Any of the values defined
			///            by VB's \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa IExplorerListView::EmptyMarkupText, Click, HitTestConstants
			[id(DISPID_EXLVWE_EMPTYMARKUPTEXTLINKCLICK), helpstring("Will be fired if the user clicks a link in the text that is displayed if the control does not contain any items.. Requires comctl32.dll version 6.10 or higher.")]
			void EmptyMarkupTextLinkClick(LONG linkIndex, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A column was resized</em>
			///
			/// Will be fired if the user has finished resizing the specified column by dragging the column
			/// divider.
			///
			/// \param[in] column The column that was resized.
			///
			/// \sa BeginColumnResizing, ResizingColumn, IListViewColumn::Width
			[id(DISPID_EXLVWE_ENDCOLUMNRESIZING), helpstring("Will be fired if the user has finished resizing the specified column by dragging the column divider.")]
			void EndColumnResizing(IListViewColumn* column);
			/// \brief <em>Editing a sub-item has been completed</em>
			///
			/// Will be fired if the user completed editing the specified sub-item.
			///
			/// \param[in] listSubItem The sub-item that has been edited.
			/// \param[in] editMode Specifies how the label-edit mode has been entered. Any of the values defined
			///            by the \c SubItemEditModeConstants enumeration is valid.
			/// \param[in] pPropertyKey Specifies the address of a \c PROPERTYKEY structure that identifies the
			///            property that the secified sub-item is representing. This is the \c PROPERTYKEY
			///            structure that has been retrieved by the \c GetPropertyKey method of the
			///            \c IPropertyDescription object that previously has been provided by the
			///            \c ConfigureSubItemControl event handler.
			/// \param[in] pPropertyValue Specifies the address of a \c PROPVARIANT structure that holds the
			///            sub-item's new value. Sub-items can be thought of as representing various properties
			///            of the item that they belong to. These properties can be of any type, not only
			///            strings. The \c PROPVARIANT type is similar to Visual Basic's \c Variant type and can
			///            hold any other type, for instance integer numbers, floating-point numbers and
			///            objects.\n
			///            Use the <a href="https://msdn.microsoft.com/en-us/library/bb762286.aspx">PROPVARIANT
			///            and VARIANT API functions</a> to work with the \c PROPVARIANT data.
			/// \param[in,out] cancel If set to \c True, the editing of the sub-item won't be processed any
			///                further. Currently this parameter is not used, but in future releases it might be
			///                used to control whether \c ExplorerListView informs the attached \c ShellListView
			///                control that sub-item editing has been ended successfully. \c ShellListView then
			///                could persist the changed value to the coresponding shell item.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa GetSubItemControl, ConfigureSubItemControl, CancelSubItemEdit, SubItemEditModeConstants,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb761561.aspx">IPropertyDescription</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb773381.aspx">PROPERTYKEY</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/aa380072.aspx">PROPVARIANT</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb762286.aspx">PROPVARIANT and VARIANT Functions</a>
			[id(DISPID_EXLVWE_ENDSUBITEMEDIT), helpstring("Will be fired if the user completed editing the specified sub-item. Requires comctl32.dll version 6.10 or higher.")]
			void EndSubItemEdit(IListViewSubItem* listSubItem, SubItemEditModeConstants editMode, LONG pPropertyKey, LONG pPropertyValue, VARIANT_BOOL* Cancel);
			/// \brief <em>A group has been expanded</em>
			///
			/// Will be fired after a collapsible group has been expanded.
			///
			/// \param[in] group The group that was expanded.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa CollapsedGroup, IListViewGroup::Collapsible, IListViewGroup::Collapsed
			[id(DISPID_EXLVWE_EXPANDEDGROUP), helpstring("Will be fired after a collapsible group has been expanded. Requires comctl32.dll version 6.10 or higher.")]
			void ExpandedGroup(IListViewGroup* Group);
			/// \brief <em>The user clicked on an 'Apply Filter' button</em>
			///
			/// Will be fired if the user clicks one of the header control's 'Apply Filter' buttons using the
			/// left mouse button.
			///
			/// \param[in] column The column header whose 'Apply Filter' button was clicked.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] filterButtonRectangle The bounding rectangle of the clicked button's client area
			///            (in pixels).
			/// \param[in,out] raiseFilterChanged If set to \c True, the \c FilterChanged event will be fired;
			///                otherwise not.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          Requires comctl32.dll version 5.80 or higher.
			///
			/// \sa FilterChanged, HeaderClick, RECTANGLE, IExplorerListView::ShowFilterBar
			[id(DISPID_EXLVWE_FILTERBUTTONCLICK), helpstring("Will be fired if the user clicks one of the header control's 'Apply Filter' buttons using the left mouse button. Requires comctl32.dll version 5.80 or higher.")]
			void FilterButtonClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, RECTANGLE* filterButtonRectangle, VARIANT_BOOL* raiseFilterChanged);
			/// \brief <em>A column's filter was changed</em>
			///
			/// Will be fired if the specified column's filter was changed.
			///
			/// \param[in] column The column whose filter was changed. If \c Nothing, all columns' filters
			///            were changed.
			///
			/// \remarks Requires comctl32.dll version 5.80 or higher.
			///
			/// \sa FilterButtonClick, EditChange, IExplorerListView::ShowFilterBar,
			///     IExplorerListView::FilterChangedTimeout
			[id(DISPID_EXLVWE_FILTERCHANGED), helpstring("Will be fired if the specified column's filter was changed. Requires comctl32.dll version 5.80 or higher.")]
			void FilterChanged(IListViewColumn* column);
			/// \brief <em>A particular item must be found</em>
			///
			/// Will be fired if the (virtual) listview needs your application to find a particular item.
			///
			/// \param[in] itemToStartWith The item at which the search should start.
			/// \param[in] searchMode A value specifying the meaning of the \c searchFor parameter. Any of the
			///            values defined by the \c SearchModeConstants enumeration is valid.
			/// \param[in] searchFor The criterion that the returned item should fulfill. This parameter's
			///            format depends on the \c searchMode parameter:
			///            - \c smItemData An integer value.
			///            - \c smText A string value.
			///            - \c smPartialText A string value.
			///            - \c smNearestPosition An array containing two integer values. The first one
			///              specifies the x-coordinate, the second one the y-coordinate (both in pixels and
			///              relative to the control's upper-left corner).
			/// \param[in] searchDirection A value specifying the direction to search. Any of the values
			///            defined by the \c SearchDirectionConstants enumeration is valid. This parameter should
			///            be ignored if the \c searchMode parameter is not set to \c smNearestPosition.
			/// \param[in] wrapAtLastItem If set to \c True, the search should be continued with the first item
			///            if the last item is reached. This parameter should be ignored if \c searchMode is set
			///            to \c smNearestPosition.
			/// \param[out] foundItem An item matching the specified characteristics. May be \c Nothing.
			///
			/// \remarks This event won't be fired if \c IExplorerListView::VirtualMode is set to \c False.
			///
			/// \sa IExplorerListView::FindItem, IListViewItem::FindNextItem, SearchModeConstants,
			///     SearchDirectionConstants, IExplorerListView::VirtualMode
			[id(DISPID_EXLVWE_FINDVIRTUALITEM), helpstring("Will be fired if the (virtual) listview needs your application to find a particular item.")]
			void FindVirtualItem(IListViewItem* itemToStartWith, SearchModeConstants searchMode, VARIANT* searchFor, SearchDirectionConstants searchDirection, VARIANT_BOOL wrapAtLastItem, IListViewItem** foundItem);
			/// \brief <em>The user clicked a footer item</em>
			///
			/// Will be fired if the user clicks a footer item using the left mouse button.
			///
			/// \param[in] footerItem The footer item that was clicked.
			/// \param[in] button The mouse buttons that were pressed during the click. Any of the values defined
			///            by VB's \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] removeFooterArea If set to \c True, the footer area is removed; otherwise not.
			///
			/// \remarks With current versions of comctl32.dll this event won't be raised if the footer item's
			///          \c ItemData property is set to 0.\n
			///          Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa IListViewFooterItem::ItemData, HitTestConstants
			[id(DISPID_EXLVWE_FOOTERITEMCLICK), helpstring("Will be fired if the user clicks a footer item using the left mouse button. Requires comctl32.dll version 6.10 or higher.")]
			void FooterItemClick(IListViewFooterItem* footerItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, VARIANT_BOOL* removeFooterArea);
			/// \brief <em>Any data associated with a column should be freed</em>
			///
			/// Will be fired if any data associated with the specified column should be freed.
			///
			/// \param[in] column The column for which to free the data.
			///
			/// \remarks On program termination the application probably won't receive this event anymore,
			///          because Visual Basic shuts down the event receiver too early. So if you use this
			///          event to free any data, you should also add an event handler for \c Form_Unload (or
			///          similar) in which you iterate all columns freeing their associated data.\n
			///          This event may be disabled.
			///
			/// \sa RemovingColumn, RemovedColumn, IListViewColumn::ColumnData, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_FREECOLUMNDATA), helpstring("Will be fired if any data associated with the specified column should be freed. This event may be disabled.")]
			void FreeColumnData(IListViewColumn* column);
			/// \brief <em>Any data associated with a footer item should be freed</em>
			///
			/// Will be fired if any data associated with the specified footer item should be freed.
			///
			/// \param[in] footerItem The footer item for which to free the data.
			/// \param[in] itemData The data associated with the footer item.
			///
			/// \remarks On program termination the application probably won't receive this event anymore,
			///          because Visual Basic shuts down the event receiver too early. So if you use this
			///          event to free any data, you should also add an event handler for \c Form_Unload (or
			///          similar) in which you iterate all footer items freeing their associated data.\n
			///          With current versions of comctl32.dll this event won't be raised if the footer item's
			///          \c ItemData property is set to 0.\n
			///          Requires comctl32.dll version 6.10 or higher.\n
			///          This event may be disabled.
			///
			/// \sa IListViewFooterItem::ItemData, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_FREEFOOTERITEMDATA), helpstring("Will be fired if any data associated with the specified footer item should be freed. Requires comctl32.dll version 6.10 or higher. This event may be disabled.")]
			void FreeFooterItemData(IListViewFooterItem* footerItem, LONG ItemData);
			/// \brief <em>Any data associated with an item should be freed</em>
			///
			/// Will be fired if any data associated with the specified item should be freed.
			///
			/// \param[in] listItem The item for which to free the data.
			///
			/// \remarks On program termination the application probably won't receive this event anymore,
			///          because Visual Basic shuts down the event receiver too early. So if you use this
			///          event to free any data, you should also add an event handler for \c Form_Unload (or
			///          similar) in which you iterate all items freeing their associated data.\n
			///          This event may be disabled.
			///
			/// \sa RemovingItem, RemovedItem, IListViewItem::ItemData, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_FREEITEMDATA), helpstring("Will be fired if any data associated with the specified item should be freed. This event may be disabled.")]
			void FreeItemData(IListViewItem* listItem);
			/// \brief <em>The control representing the specified sub-item is required</em>
			///
			/// Will be fired if the control needs the object that represents the specified sub-item.\n
			/// Starting with comctl32.dll version 6.10, sub-items can be represented by objects that implement
			/// a special interface (\c IPropertyControlBase). Representation means drawing the sub-item (by
			/// implementing the \c IDrawPropertyControl interface) and/or editing the sub-item in-place (by
			/// implementing the \c IPropertyControl interface, which allows in-place editing with a complex user
			/// interface). The object that represents the sub-item is retrieved dynamically.
			///
			/// \param[in] listSubItem The sub-item that the representation control is requested for.
			/// \param[in] controlKind The kind of representation control being requested. Any of the values
			///            defined by the \c SubItemControlKindConstants enumeration are valid.
			/// \param[in] editMode Specifies how the label-edit mode is being entered. Any of the values defined
			///            by the \c SubItemEditModeConstants enumeration is valid.
			/// \param[in,out] subItemControl The representation control to use for the specified sub-item. Any
			///                of the values defined by the \c SubItemControlConstants enumeration are valid.
			///
			/// \remarks With current versions of comctl32.dll, providing a sub-item control is the only way to
			///          custom-draw sub-items in Tiles view mode.\n
			///          Requires comctl32.dll version 6.10 or higher.\n
			///          This event may be disabled.
			///
			/// \sa ConfigureSubItemControl, CustomDraw, SubItemControlKindConstants, SubItemEditModeConstants,
			///     SubItemControlConstants,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/ipropertycontrolbase.htm">IPropertyControlBase</a>,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/idrawpropertycontrol.htm">IDrawPropertyControl</a>,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/ipropertycontrol.htm">IPropertyControl</a>
			[id(DISPID_EXLVWE_GETSUBITEMCONTROL), helpstring("Will be fired if the control needs the object that represents the specified sub-item. Requires comctl32.dll version 6.10 or higher. This event may be disabled.")]
			void GetSubItemControl(IListViewSubItem* listSubItem, SubItemControlKindConstants controlKind, SubItemEditModeConstants editMode, SubItemControlConstants* subItemControl);
			/// \brief <em>Drawing a group's icon asynchronously failed</em>
			///
			/// Will be fired if drawing a group's icon asynchronously failed.
			///
			/// \param[in] group The group whose image failed to be drawn.
			/// \param[in] imageDetails Details about the failed drawing operation.
			/// \param[in] failureReason The reason why the drawing operation failed. Any of the values defined
			///            by the \c ImageDrawingFailureReasonConstants enumeration are valid.
			/// \param[in,out] furtherProcessing Controls further drawing of the image. Any of the values defined
			///                by the \c FailedAsyncDrawReturnValuesConstants enumeration are valid.
			/// \param[in,out] newImageToDraw The zero-based index within the control's imagelist of the new
			///                image to draw. This value is ignored if the \c furtherProcessing parameter is not
			///                set to \c fadrvDrawNewImageAsynchronously.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa ItemAsynchronousDrawFailed, IExplorerListView::DrawImagesAsynchronously, FAILEDIMAGEDETAILS,
			///     ImageDrawingFailureReasonConstants, FailedAsyncDrawReturnValuesConstants
			[id(DISPID_EXLVWE_GROUPASYNCHRONOUSDRAWFAILED), helpstring("Will be fired if drawing a group's icon asynchronously failed. Requires comctl32.dll version 6.10 or higher.")]
			void GroupAsynchronousDrawFailed(IListViewGroup* Group, FAILEDIMAGEDETAILS* imageDetails, ImageDrawingFailureReasonConstants failureReason, FailedAsyncDrawReturnValuesConstants* furtherProcessing, LONG* newImageToDraw);
			/// \brief <em>Custom drawing of the control's groups should be done here</em>
			///
			/// Will be fired after the control processed a \c NM_CUSTOMDRAW notification allowing custom
			/// drawing of the control's groups.
			///
			/// \param[in] group The group that the notification refers to.
			/// \param[in,out] textColor The color to draw the group's text in.
			/// \param[in,out] headerAlignment The alignment to draw the group's header text with. Any of the
			///                values defined by the \c AlignmentConstants enumeration is valid.
			/// \param[in,out] footerAlignment The alignment to draw the group's footer text with. Any of the
			///                values defined by the \c AlignmentConstants enumeration is valid.
			/// \param[in] drawStage Specifies the stage of custom drawing this event was raised for. Any of
			///            the values defined by the \c CustomDrawStageConstants enumeration is valid.
			/// \param[in] groupState Specifies the group's current state (focused, selected etc.). Most of
			///            the values defined by the \c CustomDrawItemStateConstants enumeration are valid.
			/// \param[in] hDC The handle of the device context in which all drawing should take place.
			/// \param[in] drawingRectangle The bounding rectangle of the area that must be drawn.
			/// \param[in] textRectangle The bounding rectangle of the area in which the group's text is to
			///            be drawn.
			/// \param[in,out] furtherProcessing Controls further drawing. Most of the values defined by the
			///                \c CustomDrawReturnValuesConstants enumeration are valid.
			///
			/// \remarks Requires comctl32.dll version 6.0 or higher.\n
			///          This event may be disabled.
			///
			/// \sa CustomDraw, HeaderCustomDraw, IExplorerListView::GroupFooterForeColor,
			///     IExplorerListView::GroupHeaderForeColor, RECTANGLE, AlignmentConstants,
			///     CustomDrawStageConstants, CustomDrawItemStateConstants, CustomDrawReturnValuesConstants,
			///     IExplorerListView::DisabledEvents,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb774865.aspx">NM_CUSTOMDRAW (list view)</a>
			[id(DISPID_EXLVWE_GROUPCUSTOMDRAW), helpstring("Will be fired after the control processed a 'NM_CUSTOMDRAW' notification allowing custom drawing of the control's groups. This event may be disabled.")]
			void GroupCustomDraw(IListViewGroup* Group, OLE_COLOR* textColor, AlignmentConstants* headerAlignment, AlignmentConstants* footerAlignment, CustomDrawStageConstants drawStage, CustomDrawItemStateConstants groupState, LONG hDC, RECTANGLE* drawingRectangle, RECTANGLE* textRectangle, CustomDrawReturnValuesConstants* furtherProcessing);
			/// \brief <em>A group has received the keyboad focus</em>
			///
			/// Will be fired after a group has received the keyboad focus.
			///
			/// \param[in] group The group that has received the keyboard focus.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa GroupLostFocus, GroupSelectionChanged, IExplorerListView::get_CaretGroup,
			///     IListViewGroup::Caret
			[id(DISPID_EXLVWE_GROUPGOTFOCUS), helpstring("Will be fired after a group has received the keyboad focus. Requires comctl32.dll version 6.10 or higher.")]
			void GroupGotFocus(IListViewGroup* Group);
			/// \brief <em>A group has lost the keyboad focus</em>
			///
			/// Will be fired after a group has lost the keyboad focus.
			///
			/// \param[in] group The group that has lost the keyboard focus.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa GroupGotFocus, IExplorerListView::get_CaretGroup, IListViewGroup::Caret
			[id(DISPID_EXLVWE_GROUPLOSTFOCUS), helpstring("Will be fired after a group has lost the keyboad focus. Requires comctl32.dll version 6.10 or higher.")]
			void GroupLostFocus(IListViewGroup* Group);
			/// \brief <em>A group's selection state has been changed</em>
			///
			/// Will be fired after a group's selection state has been changed.
			///
			/// \param[in] group The group that has been selected/unselected.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa IListViewGroup::Selected, GroupGotFocus, ItemSelectionChanged
			[id(DISPID_EXLVWE_GROUPSELECTIONCHANGED), helpstring("Will be fired after a group's selection state has been changed. Requires comctl32.dll version 6.10 or higher.")]
			void GroupSelectionChanged(IListViewGroup* Group);
			/// \brief <em>The user clicked a group's task link</em>
			///
			/// Will be fired if the user clicks a group's task link using the left mouse button.
			///
			/// \param[in] group The group whose task link was clicked.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa IListViewGroup::TaskText, Click, HitTestConstants
			[id(DISPID_EXLVWE_GROUPTASKLINKCLICK), helpstring("Will be fired if the user clicks a group's task link using the left mouse button. Requires comctl32.dll version 6.10 or higher.")]
			void GroupTaskLinkClick(IListViewGroup* Group, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A drag'n'drop operation was aborted</em>
			///
			/// Will be fired if a drag'n'drop operation involving the header control was aborted.
			///
			/// \sa HeaderDrop, AbortedDrag, IExplorerListView::HeaderEndDrag
			[id(DISPID_EXLVWE_HEADERABORTEDDRAG), helpstring("Will be fired if a drag'n'drop operation involving the header control was aborted.")]
			void HeaderAbortedDrag(void);
			/// \brief <em>The user clicked onto the header control's chevron button</em>
			///
			/// Will be fired if the user clicks onto the header control's chevron button using the left mouse
			/// button.
			///
			/// \param[in] firstOverflownColumn The first overflown column.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in,out] showDefaultMenu If set to \c True, the default overflow menu is displayed;
			///                otherwise the control doesn't display any overflow menu itself, but you may
			///                display your custom menu.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa HeaderClick, IExplorerListView::ShowHeaderChevron
			[id(DISPID_EXLVWE_HEADERCHEVRONCLICK), helpstring("Will be fired if the user clicks onto the header control's chevron button using the left mouse button. Requires comctl32.dll version 6.10 or higher.")]
			void HeaderChevronClick(IListViewColumn* firstOverflownColumn, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The user clicked into the header control's client area</em>
			///
			/// Will be fired if the user clicks into the header control's client area using the left mouse
			/// button.
			///
			/// \param[in] column The column header that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderDblClick, HeaderMClick, HeaderRClick, HeaderXClick, ColumnClick,
			///     HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERCLICK), helpstring("Will be fired if the user clicks into the header control's client area using the left mouse button. This event may be disabled.")]
			void HeaderClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The context menu should be displayed</em>
			///
			/// Will be fired if the header control's context menu should be displayed.
			///
			/// \param[in] column The column header the context menu refers to. Will be \c Nothing if the
			///            context menu should be displayed for the whole header control instead of only for
			///            a single column header.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the menu's proposed
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the control doesn't display any context menu itself, but you may
			///                display your custom menu.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).
			///
			/// \sa HeaderRClick, HeaderHitTestConstants
			[id(DISPID_EXLVWE_HEADERCONTEXTMENU), helpstring("Will be fired if the header control's context menu should be displayed.")]
			void HeaderContextMenu(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>Custom drawing of the column headers should be done here</em>
			///
			/// Will be fired after the control processed a \c NM_CUSTOMDRAW notification allowing custom
			/// drawing of the header control's content.
			///
			/// \param[in] column The column header that the notification refers to. May be \c Nothing.
			/// \param[in] drawStage Specifies the stage of custom drawing this event was raised for. Most of
			///            the values defined by the \c CustomDrawStageConstants enumeration is valid.
			/// \param[in] columnState Specifies the column header's current state (focused, selected etc.).
			///            Some of the values defined by the \c CustomDrawItemStateConstants enumeration are
			///            valid.
			/// \param[in] hDC The handle of the device context in which all drawing should take place.
			/// \param[in] drawingRectangle The bounding rectangle of the area that must be drawn.
			/// \param[in,out] furtherProcessing Controls further drawing. Most of the values defined by the
			///                \c CustomDrawReturnValuesConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CustomDraw, GroupCustomDraw, HeaderOwnerDrawItem, RECTANGLE, CustomDrawStageConstants,
			///     CustomDrawItemStateConstants, CustomDrawReturnValuesConstants,
			///     IExplorerListView::DisabledEvents,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms671991.aspx">NM_CUSTOMDRAW (header)</a>
			[id(DISPID_EXLVWE_HEADERCUSTOMDRAW), helpstring("Will be fired after the control processed a 'NM_CUSTOMDRAW' notification allowing custom drawing of the header control's content. This event may be disabled.")]
			void HeaderCustomDraw(IListViewColumn* column, CustomDrawStageConstants drawStage, CustomDrawItemStateConstants columnState, LONG hDC, RECTANGLE* drawingRectangle, CustomDrawReturnValuesConstants* furtherProcessing);
			/// \brief <em>The user double-clicked into the header control's client area</em>
			///
			/// Will be fired if the user double-clicks into the header control's client area using the left
			/// mouse button.
			///
			/// \param[in] column The column header that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was double-clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderClick, HeaderMDblClick, HeaderRDblClick, HeaderXDblClick, HeaderHitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERDBLCLICK), helpstring("Will be fired if the user double-clicks into the header control's client area using the left mouse button. This event may be disabled.")]
			void HeaderDblClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked on a column divider</em>
			///
			/// Will be fired if the user double-clicks on the specified column's column divider using the left
			/// mouse button.
			///
			/// \param[in] column The column header that the double-clicked column divider belongs to.
			/// \param[in,out] autoSizeColumn If set to \c True, the specified column is auto-sized;
			///                otherwise not.
			///
			/// \sa HeaderDblClick, ResizingColumn, IListViewColumn::Width
			[id(DISPID_EXLVWE_HEADERDIVIDERDBLCLICK), helpstring("Will be fired if the user double-clicks on the specified column's column divider using the left mouse button.")]
			void HeaderDividerDblClick(IListViewColumn* column, VARIANT_BOOL* autoSizeColumn);
			/// \brief <em>The mouse cursor was moved over the header control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the header control's client area during
			/// a drag'n'drop operation.
			///
			/// \param[in,out] dropTarget The column header that is the current target of the drag'n'drop
			///                operation. You may set this parameter to another column header.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            listview control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            listview control's upper-left corner.
			/// \param[in] xListView The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] yListView The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///
			/// \sa HeaderMouseMove, HeaderOLEDragMouseMove, DragMouseMove,
			///     IExplorerListView::DragScrollTimeBase, IExplorerListView::SetHeaderInsertMarkPosition,
			///     IExplorerListView::HeaderBeginDrag, HeaderHitTestConstants
			[id(DISPID_EXLVWE_HEADERDRAGMOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the header control's client area during a drag'n'drop operation.")]
			void HeaderDragMouseMove(IListViewColumn** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, OLE_XPOS_PIXELS xListView, OLE_YPOS_PIXELS yListView, HeaderHitTestConstants hitTestDetails, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>A drag'n'drop operation ended successful</em>
			///
			/// Will be fired if a drag'n'drop operation involving the header control ended successful.
			///
			/// \param[in] dropTarget The column header that is the nearest one from the mouse cursor's position.
			///            If the mouse cursor's position lies outside the header control's client area (the
			///            y-coordinate may also lie some pixels above or below the client area), this parameter
			///            will be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).
			///
			/// \sa HeaderAbortedDrag, Drop, IExplorerListView::HeaderEndDrag, HeaderHitTestConstants
			[id(DISPID_EXLVWE_HEADERDROP), helpstring("Will be fired if a drag'n'drop operation involving the header control ended successful.")]
			void HeaderDrop(IListViewColumn* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The focus was set to the contained header control</em>
			///
			/// Will be fired after the contained header control gained the keyboard focus.
			///
			/// \sa HeaderLostFocus, IExplorerListView::IncludeHeaderInTabOrder
			[id(DISPID_EXLVWE_HEADERGOTFOCUS), helpstring("Will be fired after the contained header control gained the keyboard focus.")]
			void HeaderGotFocus(void);
			/// \brief <em>A column header's icon or caption is required</em>
			///
			/// Will be fired if a column header's \c IconIndex property was set to -1 or its \c Caption property
			/// was set to \c vbNullString and now the property's value is required.
			///
			/// \param[in] column The column header that the value is required for.
			/// \param[in] requestedInfo Specifies which properties' values are required. Some combinations of
			///            the values defined by the \c RequestedInfoConstants enumeration are valid.
			/// \param[out] iconIndex Set this parameter to the zero-based index of the icon to use. The
			///             icon is taken from the control's \c ilHeader imagelist. If the \c requestedInfo
			///             parameter doesn't include \c riIconIndex, this value is ignored.
			/// \param[in] maxColumnCaptionLength The maximum number of characters the column header's text may
			///            consist of. If the \c requestedInfo parameter doesn't include \c riItemText, this
			///            value is ignored.
			/// \param[out] columnCaption Set this parameter to the text to use for the specified column header.
			///             If the \c requestedInfo parameter doesn't include \c riItemText, this value is
			///             ignored.
			/// \param[in,out] dontAskAgain If set to \c True, this event won't be fired again for the
			///                specified column header. Instead the specified values will be persisted.
			///
			/// \sa IListViewColumn::IconIndex, IExplorerListView::hImageList, IListViewColumn::Caption,
			///     RequestedInfoConstants, ImageListConstants
			[id(DISPID_EXLVWE_HEADERITEMGETDISPLAYINFO), helpstring("Will be fired if a column header's 'IconIndex' or 'Text' property was set to a callback value and now the property's value is required.")]
			void HeaderItemGetDisplayInfo(IListViewColumn* column, RequestedInfoConstants requestedInfo, LONG* IconIndex, LONG maxColumnCaptionLength, BSTR* columnCaption, VARIANT_BOOL* dontAskAgain);
			/// \brief <em>A key was pressed while the contained header control has the focus</em>
			///
			/// Will be fired if the user presses a key while the contained header control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's \c KeyCodeConstants
			///                enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          Requires comctl32.dll version 6.10 or higher.\n
			///          This event may be disabled.
			///
			/// \sa HeaderKeyUp, HeaderKeyPress, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERKEYDOWN), helpstring("Will be fired if the user presses a key while the contained header control has the focus. Requires comctl32.dll version 6.10 or higher. This event may be disabled.")]
			void HeaderKeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the contained header control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the contained header
			/// control has the focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          Requires comctl32.dll version 6.10 or higher.\n
			///          This event may be disabled.
			///
			/// \sa HeaderKeyDown, HeaderKeyUp, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERKEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the contained header control has the focus. Requires comctl32.dll version 6.10 or higher. This event may be disabled.")]
			void HeaderKeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the contained header control has the focus</em>
			///
			/// Will be fired if the user releases a key while the contained header control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          Requires comctl32.dll version 6.10 or higher.\n
			///          This event may be disabled.
			///
			/// \sa HeaderKeyDown, HeaderKeyPress, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERKEYUP), helpstring("Will be fired if the user releases a key while the contained header control has the focus. Requires comctl32.dll version 6.10 or higher. This event may be disabled.")]
			void HeaderKeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>The contained header control lost the focus</em>
			///
			/// Will be fired after the contained header control lost the keyboard focus.
			///
			/// \sa HeaderGotFocus, IExplorerListView::IncludeHeaderInTabOrder
			[id(DISPID_EXLVWE_HEADERLOSTFOCUS), helpstring("Will be fired after the contained header control lost the keyboard focus.")]
			void HeaderLostFocus(void);
			/// \brief <em>The user clicked into the header control's client area</em>
			///
			/// Will be fired if the user clicks into the header control's client area using the middle mouse
			/// button.
			///
			/// \param[in] column The column header that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMDblClick, HeaderClick, HeaderRClick, HeaderXClick, HeaderHitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMCLICK), helpstring("Will be fired if the user clicks into the header control's client area using the middle mouse button. This event may be disabled.")]
			void HeaderMClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the header control's client area</em>
			///
			/// Will be fired if the user double-clicks into the header control's client area using the middle
			/// mouse button.
			///
			/// \param[in] column The column header that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was double-clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMClick, HeaderDblClick, HeaderRDblClick, HeaderXDblClick, HeaderHitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMDBLCLICK), helpstring("Will be fired if the user double-clicks into the header control's client area using the middle mouse button. This event may be disabled.")]
			void HeaderMDblClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was pressed over the header control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// header control's client area.
			///
			/// \param[in] column The column header that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMouseUp, HeaderClick, HeaderMClick, HeaderRClick, HeaderXClick,
			///     ExtendedMouseButtonConstants, HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the header control's client area. This event may be disabled.")]
			void HeaderMouseDown(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the header control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the header control's client area.
			///
			/// \param[in] column The column header that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMouseLeave, ColumnMouseEnter, HeaderMouseHover, HeaderMouseMove,
			///     ExtendedMouseButtonConstants, HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the header control's client area. This event may be disabled.")]
			void HeaderMouseEnter(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the header control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the header control's client area for
			/// the number of milliseconds specified by the \c IExplorerListView::HeaderHoverTime property.
			///
			/// \param[in] column The column header that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMouseEnter, HeaderMouseLeave, HeaderMouseMove, IExplorerListView::HeaderHoverTime,
			///     ExtendedMouseButtonConstants, HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the header control's client area for the number of milliseconds specified by the 'HeaderHoverTime' property. This event may be disabled.")]
			void HeaderMouseHover(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of the header control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor out of the header control's client area.
			///
			/// \param[in] column The column header that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMouseEnter, ColumnMouseLeave, HeaderMouseHover, HeaderMouseMove,
			///     ExtendedMouseButtonConstants, HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMOUSELEAVE), helpstring("Will be fired if the user moves the mouse cursor out of the header control's client area. This event may be disabled.")]
			void HeaderMouseLeave(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved over the header control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the header control's client area.
			///
			/// \param[in] column The column header that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMouseEnter, HeaderMouseLeave, HeaderMouseDown, HeaderMouseUp, HeaderMouseWheel,
			///     ExtendedMouseButtonConstants, HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the header control's client area. This event may be disabled.")]
			void HeaderMouseMove(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was released over the header control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// header control's client area.
			///
			/// \param[in] column The column header that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMouseDown, HeaderClick, HeaderMClick, HeaderRClick, HeaderXClick,
			///     ExtendedMouseButtonConstants, HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the header control's client area. This event may be disabled.")]
			void HeaderMouseUp(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The mouse wheel was rotated over the header control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the header control's client area.
			///
			/// \param[in] column The column header that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderMouseMove, MouseWheel, EditMouseWheel, ExtendedMouseButtonConstants,
			///     HeaderHitTestConstants, ScrollAxisConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERMOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the header control's client area. This event may be disabled.")]
			void HeaderMouseWheel(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails, ScrollAxisConstants scrollAxis, SHORT wheelDelta);
			/// \brief <em>An OLE drag'n'drop operation was completed</em>
			///
			/// Will be fired after OLE drag'n'drop if the drag'n'drop operation was completed successfully.
			///
			/// \param[in] data The object that holds the dragged data. The drop target may have added data to
			///            it.
			/// \param[in] performedEffect The performed drop effect. Any of the values (except \c odeScroll)
			///            defined by the \c OLEDropEffectConstants enumeration is valid.
			///
			/// \sa IExplorerListView::HeaderOLEDrag, HeaderOLEStartDrag, OLECompleteDrag,
			///     IOLEDataObject::GetData
			[id(DISPID_EXLVWE_HEADEROLECOMPLETEDRAG), helpstring("Will be fired after OLE drag'n'drop if the drag'n'drop operation was completed successfully.")]
			void HeaderOLECompleteDrag(IOLEDataObject* data, OLEDropEffectConstants performedEffect);
			/// \brief <em>The data was dropped onto the header control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor
			/// is located over the header control's client area.
			///
			/// \param[in] data The dropped data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target finally
			///                executed.
			/// \param[in] dropTarget The column header that is the nearest one from the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] xListView The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] yListView The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          Don't forget to release any references that you hold to the data object.
			///
			/// \sa HeaderOLEDragEnter, HeaderOLEDragMouseMove, HeaderOLEDragLeave, HeaderMouseUp,
			///     OLEDragDrop, IExplorerListView::RegisterForOLEDragDrop, IExplorerListView::FinishOLEDragDrop,
			///     OLEDropEffectConstants, IExplorerListView::SetHeaderInsertMarkPosition,
			///     HeaderHitTestConstants
			[id(DISPID_EXLVWE_HEADEROLEDRAGDROP), helpstring("Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor is located over the header control's client area.")]
			void HeaderOLEDragDrop(IOLEDataObject* data, OLEDropEffectConstants* effect, IListViewColumn* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, OLE_XPOS_PIXELS xListView, OLE_YPOS_PIXELS yListView, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged into the header control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the header
			/// control's client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in,out] dropTarget The column header that is the current target of the drag'n'drop
			///                operation. You may set this parameter to another column header.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] xListView The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] yListView The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).
			///
			/// \sa HeaderOLEDragMouseMove, HeaderOLEDragLeave, HeaderOLEDragDrop, HeaderMouseEnter,
			///     OLEDragEnter, IExplorerListView::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IExplorerListView::DragScrollTimeBase, IExplorerListView::SetHeaderInsertMarkPosition,
			///     HeaderHitTestConstants
			[id(DISPID_EXLVWE_HEADEROLEDRAGENTER), helpstring("Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the header control's client area.")]
			void HeaderOLEDragEnter(IOLEDataObject* data, OLEDropEffectConstants* effect, IListViewColumn** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, OLE_XPOS_PIXELS xListView, OLE_YPOS_PIXELS yListView, HeaderHitTestConstants hitTestDetails, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>The user has dragged the data into a potential drop target window during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user dragged the mouse cursor into a potential drop
			/// target window.
			///
			/// \param[in] hWndPotentialTarget The potential drop target window's handle.
			///
			/// \remarks Requires Windows Vista or newer.
			///
			/// \sa HeaderOLEDragLeavePotentialTarget, OLEDragEnterPotentialTarget,
			///     IExplorerListView::HeaderOLEDrag
			[id(DISPID_EXLVWE_HEADEROLEDRAGENTERPOTENTIALTARGET), helpstring("Will be fired during OLE drag'n'drop if the user dragged the mouse cursor into a potential drop target window. Requires Windows Vista or newer.")]
			void HeaderOLEDragEnterPotentialTarget(LONG hWndPotentialTarget);
			/// \brief <em>The data was dragged out of the header control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor out of the header
			/// control's client area or if the user canceled the drag'n'drop operation.
			///
			/// \param[in] data The dragged data.
			/// \param[in] dropTarget The column header that is the current target of the drag'n'drop operation.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] xListView The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] yListView The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          Don't forget to release any references that you hold to the data object.
			///
			/// \sa HeaderOLEDragEnter, HeaderOLEDragMouseMove, HeaderOLEDragDrop, HeaderMouseLeave,
			///     OLEDragLeave, IExplorerListView::RegisterForOLEDragDrop,
			///     IExplorerListView::SetHeaderInsertMarkPosition, HeaderHitTestConstants
			[id(DISPID_EXLVWE_HEADEROLEDRAGLEAVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the header control's client area or if the user canceled the drag'n'drop operation.")]
			void HeaderOLEDragLeave(IOLEDataObject* data, IListViewColumn* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, OLE_XPOS_PIXELS xListView, OLE_YPOS_PIXELS yListView, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The user has dragged the data out of a potential drop target window during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user dragged the mouse cursor out of a potential drop
			/// target window.
			///
			/// \remarks Requires Windows Vista or newer.
			///
			/// \sa HeaderOLEDragEnterPotentialTarget, OLEDragLeavePotentialTarget,
			///     IExplorerListView::HeaderOLEDrag
			[id(DISPID_EXLVWE_HEADEROLEDRAGLEAVEPOTENTIALTARGET), helpstring("Will be fired during OLE drag'n'drop if the user dragged the mouse cursor out of a potential drop target window. Requires Windows Vista or newer.")]
			void HeaderOLEDragLeavePotentialTarget(void);
			/// \brief <em>The data was dragged over the header control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the header
			/// control's client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in,out] dropTarget The column header that is the current target of the drag'n'drop
			///                operation. You may set this parameter to another column header.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the header
			///            control's upper-left corner.
			/// \param[in] xListView The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] yListView The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that the mouse cursor's
			///            position lies in. Any of the values defined by the \c HeaderHitTestConstants
			///            enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).
			///
			/// \sa HeaderOLEDragEnter, HeaderOLEDragLeave, HeaderOLEDragDrop, HeaderMouseMove, OLEDragMouseMove,
			///     IExplorerListView::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IExplorerListView::DragScrollTimeBase, IExplorerListView::SetHeaderInsertMarkPosition,
			///     HeaderHitTestConstants
			[id(DISPID_EXLVWE_HEADEROLEDRAGMOUSEMOVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the header control's client area.")]
			void HeaderOLEDragMouseMove(IOLEDataObject* data, OLEDropEffectConstants* effect, IListViewColumn** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, OLE_XPOS_PIXELS xListView, OLE_YPOS_PIXELS yListView, HeaderHitTestConstants hitTestDetails, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>The mouse cursor needs to be updated during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the mouse cursor should be updated to visualize the
			/// current drop effect.
			///
			/// \param[in] effect The current drop effect. It is chosen by the potential drop target.
			///            Any of the values defined by the \c OLEDropEffectConstants enumeration is valid.
			/// \param[in,out] useDefaultCursors If set to \c True, the system's default mouse cursors are
			///                used to visualize the various drop effects. If set to \c False, custom
			///                mouse cursors are used. You must set the custom cursor within the handler of
			///                this event.
			///
			/// \sa IExplorerListView::HeaderOLEDrag, HeaderOLEQueryContinueDrag, OLEGiveFeedback,
			///     OLEDropEffectConstants
			[id(DISPID_EXLVWE_HEADEROLEGIVEFEEDBACK), helpstring("Will be fired during OLE drag'n'drop if the mouse cursor should be updated.")]
			void HeaderOLEGiveFeedback(OLEDropEffectConstants effect, VARIANT_BOOL* useDefaultCursors);
			/// \brief <em>The mouse cursor needs to be updated during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the keyboard or mouse button state has changed. It
			/// gives the drag source the chance to cancel or complete the drag'n'drop operation.
			///
			/// \param[in] pressedEscape If \c True, the user has pressed the \c ESC key since the last time
			///            this event was fired.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in,out] actionToContinueWith Indicates whether to continue, cancel or complete the
			///                drag'n'drop operation. Any of the values defined by the
			///                \c OLEActionToContinueWithConstants enumeration is valid.
			///
			/// \sa IExplorerListView::HeaderOLEDrag, HeaderOLEGiveFeedback, OLEQueryContinueDrag,
			///     OLEActionToContinueWithConstants
			[id(DISPID_EXLVWE_HEADEROLEQUERYCONTINUEDRAG), helpstring("Will be fired during OLE drag'n'drop if the keyboard or mouse button state has changed.")]
			void HeaderOLEQueryContinueDrag(VARIANT_BOOL pressedEscape, SHORT button, SHORT shift, OLEActionToContinueWithConstants* actionToContinueWith);
			/// \brief <em>Data has been stored in the data object</em>
			///
			/// Will be fired during OLE drag'n'drop if data in the specified format has been written into the
			/// dragged data object.
			///
			/// \param[in] data The object that holds the dragged data.
			/// \param[in] formatID An integer value specifying the format the data object has received data for.
			///            Valid values are those defined by VB's \c ClipBoardConstants enumeration, but also any
			///            other format that has been registered using the \c RegisterClipboardFormat API
			///            function.
			/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's
			///            \c lindex member. Usually it is -1, but some formats like \c CFSTR_FILECONTENTS
			///            require multiple \c FORMATETC structs for the same format. In such cases each struct
			///            of this format will have a separate index.
			/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
			///            struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
			///            Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c HeaderOLEDrag method.
			///
			/// \sa OLEReceivedNewData, HeaderOLESetData, IOLEDataObject::GetData,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
			[id(DISPID_EXLVWE_HEADEROLERECEIVEDNEWDATA), helpstring("Will be fired during OLE drag'n'drop if data in the specified format has been written into the dragged data object.")]
			void HeaderOLEReceivedNewData(IOLEDataObject* data, LONG formatID, LONG Index, LONG dataOrViewAspect);
			/// \brief <em>Data is requested from the data object</em>
			///
			/// Will be fired during OLE drag'n'drop if data is requested from the dragged data object in a data
			/// format, that you've chosen to support (in the \c HeaderOLEStartDrag event), but for which you
			/// didn't provide any data so far.\n
			/// Call the provided object's \c SetData method to provide the data. If you chose to not support
			/// this data format, simply do nothing.
			///
			/// \param[in] data The object that holds the dragged data.
			/// \param[in] formatID An integer value specifying the format the drop target is requesting data
			///            for. Valid values are those defined by VB's \c ClipBoardConstants enumeration, but
			///            also any other format that has been registered using the \c RegisterClipboardFormat
			///            API function.
			/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's
			///            \c lindex member. Usually it is -1, but some formats like \c CFSTR_FILECONTENTS
			///            require multiple \c FORMATETC structs for the same format. In such cases each struct
			///            of this format will have a separate index.
			/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
			///            struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
			///            Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c HeaderOLEDrag method.
			///
			/// \sa HeaderOLEStartDrag, OLESetData, IOLEDataObject::SetData,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
			[id(DISPID_EXLVWE_HEADEROLESETDATA), helpstring("Will be fired during OLE drag'n'drop if data is requested from the dragged data object in a data format, that you've chosen to support (in the 'HeaderOLEStartDrag' event), but for which you didn't provide any data so far.")]
			void HeaderOLESetData(IOLEDataObject* data, LONG formatID, LONG index, LONG dataOrViewAspect);
			/// \brief <em>The container holding the dragged data needs to be filled up</em>
			///
			/// Will be fired after you called the \c HeaderOLEDrag method to determine the data you're offering.
			/// You must call the provided object's \c SetData method for each data format you're offering data
			/// in.
			///
			/// \param[in] data The object that holds the dragged data.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c HeaderOLEDrag method.
			///
			/// \sa IExplorerListView::HeaderOLEDrag, HeaderOLESetData, HeaderOLECompleteDrag, OLEStartDrag,
			///     IOLEDataObject::SetData
			[id(DISPID_EXLVWE_HEADEROLESTARTDRAG), helpstring("Will be fired after you called the 'HeaderOLEDrag' method to determine the data you're offering.")]
			void HeaderOLEStartDrag(IOLEDataObject* data);
			/// \brief <em>An owner-drawn column header must be drawn</em>
			///
			/// Will be fired if a column header must be drawn and its \c OwnerDrawn property is set to \c True.
			///
			/// \param[in] column The column header to draw.
			/// \param[in] columnState Specifies the column header's current state (focused, selected etc.). Some
			///            of the values defined by the \c OwnerDrawItemStateConstants enumeration are valid.
			/// \param[in] hDC The handle of the device context in which all drawing should take place.
			/// \param[in] drawingRectangle The bounding rectangle of the area that must be drawn.
			///
			/// \sa HeaderCustomDraw, OwnerDrawItem, IListViewColumn::OwnerDrawn, RECTANGLE,
			///     OwnerDrawItemStateConstants
			[id(DISPID_EXLVWE_HEADEROWNERDRAWITEM), helpstring("Will be fired if a column header must be drawn and its 'OwnerDrawn' property is set to 'True'.")]
			void HeaderOwnerDrawItem(IListViewColumn* column, OwnerDrawItemStateConstants columnState, LONG hDC, RECTANGLE* drawingRectangle);
			/// \brief <em>The user clicked into the header control's client area</em>
			///
			/// Will be fired if the user clicks into the header control's client area using the right mouse button.
			///
			/// \param[in] column The column header that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderContextMenu, HeaderRDblClick, HeaderClick, HeaderMClick, HeaderXClick,
			///     HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERRCLICK), helpstring("Will be fired if the user clicks into the header control's client area using the right mouse button. This event may be disabled.")]
			void HeaderRClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the header control's client area</em>
			///
			/// Will be fired if the user double-clicks into the header control's client area using the right
			/// mouse button.
			///
			/// \param[in] column The column header that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was double-clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderRClick, HeaderDblClick, HeaderMDblClick, HeaderXDblClick, HeaderHitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERRDBLCLICK), helpstring("Will be fired if the user double-clicks into the header control's client area using the right mouse button. This event may be disabled.")]
			void HeaderRDblClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The user clicked into the header control's client area</em>
			///
			/// Will be fired if the user clicks into the header control's client area using one of the extended
			/// mouse buttons.
			///
			/// \param[in] column The column header that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderXDblClick, HeaderClick, HeaderMClick, HeaderRClick, ExtendedMouseButtonConstants,
			///     HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERXCLICK), helpstring("Will be fired if the user clicks into the header control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void HeaderXClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the header control's client area</em>
			///
			/// Will be fired if the user double-clicks into the header control's client area using one of the
			/// extended mouse buttons.
			///
			/// \param[in] column The column header that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the header
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the header control that was double-clicked.
			///            Any of the values defined by the \c HeaderHitTestConstants enumeration is valid.
			///
			/// \remarks Scrolling the control moves the header control, so that a point's listview coordinates
			///          (i. e. relative to the control's upper-left corner) don't necessarily equal the same
			///          point's header coordinates (i. e. relative to the header control's upper-left corner).\n
			///          This event may be disabled.
			///
			/// \sa HeaderXClick, HeaderDblClick, HeaderMDblClick, HeaderRDblClick, ExtendedMouseButtonConstants,
			///     HeaderHitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_HEADERXDBLCLICK), helpstring("Will be fired if the user double-clicks into the header control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void HeaderXDblClick(IListViewColumn* column, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HeaderHitTestConstants hitTestDetails);
			/// \brief <em>The control's hot item was changed</em>
			///
			/// Will be fired after another item became the control's hot item. Usually the hot item is
			/// underlined and/or highlighted.
			///
			/// \param[in] previousHotItem The previous hot item. May be \c Nothing.
			/// \param[in] newHotItem The new hot item. May be \c Nothing.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa IExplorerListView::HotItem, IExplorerListView::HotTracking, HotItemChanging
			[id(DISPID_EXLVWE_HOTITEMCHANGED), helpstring("Will be fired after another item became the control's hot item. Usually the hot item is underlined and/or highlighted. This event may be disabled.")]
			void HotItemChanged(IListViewItem* previousHotItem, IListViewItem* newHotItem);
			/// \brief <em>The control's hot item is about to change</em>
			///
			/// Will be fired before another item becomes the control's hot item. Usually the hot item is
			/// underlined and/or highlighted.
			///
			/// \param[in] previousHotItem The previous hot item. May be \c Nothing.
			/// \param[in] newHotItem The new hot item. May be \c Nothing.
			/// \param[in,out] cancelChange If set to \c True, the hot item change is aborted, i. e. the
			///                current hot item remains the hot item. In this case the \c HotItemChanged event
			///                isn't fired. If set to \c False, the hot item change is completed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa IExplorerListView::HotItem, IExplorerListView::HotTracking, HotItemChanged
			[id(DISPID_EXLVWE_HOTITEMCHANGING), helpstring("Will be fired before another item becomes the control's hot item. Usually the hot item is underlined and/or highlighted. This event may be disabled.")]
			void HotItemChanging(IListViewItem* previousHotItem, IListViewItem* newHotItem, VARIANT_BOOL* cancelChange);
			/// \brief <em>An item is searched based on the incremental search string</em>
			///
			/// Will be fired after the control's incremental search-string has changed and before a matching
			/// item is selected. The incremental search-string is used to select an item based on characters
			/// entered by the user.
			///
			/// \param[in] currentSearchString The control's current incremental search-string.
			/// \param[in,out] itemToSelect The zero-based index of the item to select. If set to -1, the control
			///                searches an appropriate item based on the search string. If set to -2, the search
			///                is aborted with an error beep. If set to -3, incremental search string processing
			///                is stopped.
			///
			/// \remarks Requires comctl32.dll version 5.80 or higher.\n
			///          This event may be disabled.
			///
			/// \sa IncrementalSearchStringChanging, IExplorerListView::IncrementalSearchString,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INCREMENTALSEARCHING), helpstring("Will be fired after the control's incremental search-string has changed and before a matching item is selected. Requires comctl32.dll version 5.80 or higher. This event may be disabled.")]
			void IncrementalSearching(BSTR currentSearchString, LONG* itemToSelect);
			/// \brief <em>The incremental search-string is about to be changed</em>
			///
			/// Will be fired before the control's incremental search-string is changed. This string is used
			/// to select an item based on characters entered by the user.
			///
			/// \param[in] currentSearchString The control's current incremental search-string.
			/// \param[in] keyCodeOfCharToBeAdded The key code of the character to be added to the
			///            search-string. Most of the values defined by VB's \c KeyCodeConstants enumeration
			///            are valid.
			/// \param[in,out] cancelChange If set to \c True, the character is discarded, i. e. the
			///                search-string remains the same. If set to \c False, the character is added
			///                to the search-string.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa KeyPress, IncrementalSearching, IExplorerListView::IncrementalSearchString,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INCREMENTALSEARCHSTRINGCHANGING), helpstring("Will be fired before the control's incremental search-string is changed. This string is used to select an item based on characters entered by the user. This event may be disabled.")]
			void IncrementalSearchStringChanging(BSTR currentSearchString, SHORT keyCodeOfCharToBeAdded, VARIANT_BOOL* cancelChange);
			/// \brief <em>A column was inserted</em>
			///
			/// Will be fired after a new column was inserted.
			///
			/// \param[in] column The column that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertingColumn, RemovedColumn, IListViewColumn, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INSERTEDCOLUMN), helpstring("Will be fired after a new column was inserted. This event may be disabled.")]
			void InsertedColumn(IListViewColumn* column);
			/// \brief <em>A group was inserted</em>
			///
			/// Will be fired after a new group was inserted.
			///
			/// \param[in] group The group that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertingGroup, RemovedGroup, IListViewGroup, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INSERTEDGROUP), helpstring("Will be fired after a new group was inserted. This event may be disabled.")]
			void InsertedGroup(IListViewGroup* Group);
			/// \brief <em>An item was inserted</em>
			///
			/// Will be fired after a new item was inserted.
			///
			/// \param[in] listItem The item that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertingItem, RemovedItem, IListViewItem, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INSERTEDITEM), helpstring("Will be fired after a new item was inserted. This event may be disabled.")]
			void InsertedItem(IListViewItem* listItem);
			/// \brief <em>A column is about to be inserted</em>
			///
			/// Will be fired before a new column is inserted.
			///
			/// \param[in] column The column that is about to be inserted.
			/// \param[in,out] cancelInsertion If set to \c True, insertion is aborted, i. e. the column
			///                isn't inserted. If set to \c False, the column is inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedColumn, RemovingColumn, IVirtualListViewColumn, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INSERTINGCOLUMN), helpstring("Will be fired before a new column is inserted. This event may be disabled.")]
			void InsertingColumn(IVirtualListViewColumn* column, VARIANT_BOOL* cancelInsertion);
			/// \brief <em>A group is about to be inserted</em>
			///
			/// Will be fired before a new group is inserted.
			///
			/// \param[in] group The group that is about to be inserted.
			/// \param[in,out] cancelInsertion If set to \c True, insertion is aborted, i. e. the group
			///                isn't inserted. If set to \c False, the group is inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedGroup, RemovingGroup, IVirtualListViewGroup, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INSERTINGGROUP), helpstring("Will be fired before a new group is inserted. This event may be disabled.")]
			void InsertingGroup(IVirtualListViewGroup* group, VARIANT_BOOL* cancelInsertion);
			/// \brief <em>An item is about to be inserted</em>
			///
			/// Will be fired before a new item is inserted.
			///
			/// \param[in] listItem The item that is about to be inserted.
			/// \param[in,out] cancelInsertion If set to \c True, insertion is aborted, i. e. the item
			///                isn't inserted. If set to \c False, the item is inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedItem, RemovingItem, IVirtualListViewItem, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_INSERTINGITEM), helpstring("Will be fired before a new item is inserted. This event may be disabled.")]
			void InsertingItem(IVirtualListViewItem* listItem, VARIANT_BOOL* cancelInsertion);
			/// \brief <em>A sub-item control has invoked an action on the specified item</em>
			///
			/// Will be fired if a sub-item control has invoked an action, identified by the specified verb, on
			/// the specified item. A typical user action that leads to invocation of such an action is the user
			/// clicking a sub-item that is displayed as a link by using the \c sicHyperlink sub-item control.\n
			/// Starting with comctl32.dll version 6.10, sub-items can be represented by objects that implement
			/// a special interface (\c IPropertyControlBase). Representation means drawing the sub-item (by
			/// implementing the \c IDrawPropertyControl interface) and/or editing the sub-item in-place (by
			/// implementing the \c IPropertyControl interface, which allows in-place editing with a complex user
			/// interface). The object that represents the sub-item is retrieved dynamically.
			///
			/// \param[in] listItem The item on which the action has been invoked.
			/// \param[in] verb A string representing the invoked action. For the \c sicHyperlink sub-item
			///            control this is the value of the \c id attribute of the hyperlink tag that specifies
			///            the link.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa GetSubItemControl, ConfigureSubItemControl, SubItemControlConstants,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/ipropertycontrolbase.htm">IPropertyControlBase</a>,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/idrawpropertycontrol.htm">IDrawPropertyControl</a>,
			///     <a href="https://www.geoffchappell.com/studies/windows/shell/shell32/interfaces/ipropertycontrol.htm">IPropertyControl</a>
			[id(DISPID_EXLVWE_INVOKEVERBFROMSUBITEMCONTROL), helpstring("Will be fired if a sub-item control has invoked an action, identified by the specified verb, on the specified item. Requires comctl32.dll version 6.10 or higher.")]
			void InvokeVerbFromSubItemControl(IListViewItem* listItem, BSTR verb);
			/// \brief <em>An item or sub-item is being activated</em>
			///
			/// Will be fired if the user is activating an item or sub-item.
			///
			/// \param[in] listItem The item being activated.
			/// \param[in] listSubItem The sub-item being activated. May be \ Nothing.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in pixels) of the mouse cursor's position relative to the
			///            control's upper-left corner. Will be -1 if the item is activated using the keyboard
			///            instead of the mouse.
			/// \param[in] y The y-coordinate (in pixels) of the mouse cursor's position relative to the
			///            control's upper-left corner. Will be -1 if the item is activated using the keyboard
			///            instead of the mouse.
			///
			/// \sa IExplorerListView::ItemActivationMode, IListViewItem::Activating,
			///     IListViewSubItem::Activating
			[id(DISPID_EXLVWE_ITEMACTIVATE), helpstring("Will be fired if the user is activating an item or sub-item.")]
			void ItemActivate(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT shift, LONG x, LONG y);
			/// \brief <em>Drawing an item's icon asynchronously failed</em>
			///
			/// Will be fired if drawing an item's icon asynchronously failed.
			///
			/// \param[in] listItem The item whose image failed to be drawn.
			/// \param[in] listSubItem The sub-item whose image failed to be drawn. May be \ Nothing.
			/// \param[in] imageDetails Details about the failed drawing operation.
			/// \param[in] failureReason The reason why the drawing operation failed. Any of the values defined
			///            by the \c ImageDrawingFailureReasonConstants enumeration are valid.
			/// \param[in,out] furtherProcessing Controls further drawing of the image. Any of the values defined
			///                by the \c FailedAsyncDrawReturnValuesConstants enumeration are valid.
			/// \param[in,out] newImageToDraw The zero-based index within the control's imagelist of the new
			///                image to draw. This value is ignored if the \c furtherProcessing parameter is not
			///                set to \c fadrvDrawNewImageAsynchronously.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa GroupAsynchronousDrawFailed, IExplorerListView::DrawImagesAsynchronously, FAILEDIMAGEDETAILS,
			///     ImageDrawingFailureReasonConstants, FailedAsyncDrawReturnValuesConstants
			[id(DISPID_EXLVWE_ITEMASYNCHRONOUSDRAWFAILED), helpstring("Will be fired if drawing an item's icon asynchronously failed. Requires comctl32.dll version 6.10 or higher.")]
			void ItemAsynchronousDrawFailed(IListViewItem* listItem, IListViewSubItem* listSubItem, FAILEDIMAGEDETAILS* imageDetails, ImageDrawingFailureReasonConstants failureReason, FailedAsyncDrawReturnValuesConstants* furtherProcessing, LONG* newImageToDraw);
			/// \brief <em>The user seems to want to drag an item</em>
			///
			/// Will be fired if the user seems to want to drag an item using the left mouse button.
			///
			/// \param[in] listItem The item that the user wants to drag.
			/// \param[in] listSubItem The sub-item that the user wants to drag. May be \ Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid, but usually it is just
			///            \c vbLeftButton.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \sa IExplorerListView::BeginDrag, IExplorerListView::OLEDrag, ItemBeginRDrag, ColumnBeginDrag,
			///     HitTestConstants
			[id(DISPID_EXLVWE_ITEMBEGINDRAG), helpstring("Will be fired if the user seems to want to drag an item using the left mouse button.")]
			void ItemBeginDrag(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user seems to want to drag an item</em>
			///
			/// Will be fired if the user seems to want to drag an item using the right mouse button.
			///
			/// \param[in] listItem The item that the user wants to drag.
			/// \param[in] listSubItem The sub-item that the user wants to drag. May be \ Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid, but usually it is just
			///            \c vbRightButton.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \sa IExplorerListView::BeginDrag, IExplorerListView::OLEDrag, ItemBeginDrag, HitTestConstants
			[id(DISPID_EXLVWE_ITEMBEGINRDRAG), helpstring("Will be fired if the user seems to want to drag an item using the right mouse button.")]
			void ItemBeginRDrag(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The value of an item's or sub-item's property is required</em>
			///
			/// Will be fired if an item or sub-item property was set-up to use a callback and now this
			/// property's value is required.
			///
			/// \param[in] listItem The item that the value is required for.
			/// \param[in] listSubItem The sub-item that the value is required for. May be \ Nothing.
			/// \param[in] requestedInfo Specifies which properties' values are required. Any combination of
			///            the values defined by the \c RequestedInfoConstants enumeration is valid.
			/// \param[out] iconIndex Set this parameter to the zero-based index of the icon to use for the
			///             specified item or sub-item. The icon is taken from the control's \c ilSmall,
			///             \c ilLarge, \c ilExtraLarge and \c ilHighResolution imagelists. If the
			///             \c requestedInfo parameter doesn't include \c riIconIndex, this value is ignored.
			/// \param[out] indent Set this parameter to the item's indentation in 'Details' view in image
			///             widths. If the \c requestedInfo parameter doesn't include \c riIndent, this value
			///             is ignored.
			/// \param[out] groupID Set this parameter to the unique ID of the listview group in which the item
			///             shall be displayed. If the \c requestedInfo parameter doesn't include \c riGroupID,
			///             this value is ignored.
			/// \param[out] tileViewColumns Set this parameter to an array of \c TILEVIEWSUBITEM structs which
			///             define the sub-items that will be displayed below the item's text in 'Tiles' and
			///             'Extended Tiles' view. If set to an empty array, no details will be displayed. If the
			///             \c requestedInfo parameter doesn't include \c riTileViewColumns, this value is
			///             ignored.
			/// \param[in] maxItemTextLength The maximum number of characters the item's or sub-item's text may
			///            consist of. If the \c requestedInfo parameter doesn't include \c riItemText, this
			///            value is ignored.
			/// \param[out] itemText Set this parameter to the text to use for the specified item or sub-item.
			///             If the \c requestedInfo parameter doesn't include \c riItemText, this value is
			///             ignored.
			/// \param[out] overlayIndex Set this parameter to the zero-based index of the overlay icon to use
			///             for the specified item or sub-item. The overlay icon is taken from the control's
			///             \c ilSmall, \c ilLarge, \c ilExtraLarge and \c ilHighResolution imagelists. If the
			///             \c requestedInfo parameter doesn't include \c riOverlayIndex, this value is ignored.
			/// \param[out] stateImageIndex Set this parameter to the one-based index of the state image to use
			///             for the specified item or sub-item. The state image is taken from the control's
			///             \c ilState imagelist. If the \c requestedInfo parameter doesn't include
			///             \c riStateImageIndex, this value is ignored.
			/// \param[out] itemStates Set this property to a bit field specifying which of the following item or
			///             sub-item properties are equal to \c True: \n
			///             - \c IListViewItem::Activating, IListViewSubItem::Activating
			///             - \c IListViewItem::Caret
			///             - \c IListViewItem::DropHilited
			///             - \c IListViewItem::Ghosted, IListViewSubItem::Ghosted
			///             - \c IListViewItem::Glowing, IListViewSubItem::Glowing
			///             - \c IListViewItem::Selected
			///
			///             Any combination of the following values defined by the \c ItemStateConstants
			///             enumeration is valid:\n
			///             - \c isActivating If the \c requestedInfo parameter doesn't include \c riActivating,
			///               this flag is ignored.
			///             - \c isCaret If the \c requestedInfo parameter doesn't include \c riCaret, this flag
			///               is ignored.
			///             - \c isDropHilited If the \c requestedInfo parameter doesn't include
			///               \c riDropHilited, this flag is ignored.
			///             - \c isGhosted If the \c requestedInfo parameter doesn't include \c riGhosted, this
			///               flag is ignored.
			///             - \c isGlowing If the \c requestedInfo parameter doesn't include \c riGlowing, this
			///               flag is ignored.
			///             - \c isSelected If the \c requestedInfo parameter doesn't include \c riSelected, this
			///               flag is ignored.
			/// \param[in,out] dontAskAgain If set to \c True, this event won't be fired again for the
			///                specified item or sub-item. Instead the specified values will be persisted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa IListViewItem::IconIndex, IListViewSubItem::IconIndex, IExplorerListView::hImageList,
			///     IExplorerListView::ShowSubItemImages, IListViewItem::Indent, IListViewItem::Group,
			///     IListViewItem::TileViewColumns, TILEVIEWSUBITEM, IExplorerListView::TileViewItemLines,
			///     IListViewItem::Text, IListViewSubItem::Text, IListViewItem::OverlayIndex,
			///     IListViewSubItem::OverlayIndex, IListViewItem::StateImageIndex,
			///     IListViewSubItem::StateImageIndex, IExplorerListView::CallBackMask,
			///     IExplorerListView::VirtualMode, RequestedInfoConstants, ItemStateConstants, ItemSetText,
			///     ImageListConstants
			[id(DISPID_EXLVWE_ITEMGETDISPLAYINFO), helpstring("Will be fired if an item or sub-item property was set-up to use a callback and now this property's value is required. This event may be disabled.")]
			void ItemGetDisplayInfo(IListViewItem* listItem, IListViewSubItem* listSubItem, RequestedInfoConstants requestedInfo, LONG* IconIndex, LONG* Indent, LONG* groupID, SAFEARRAY(TILEVIEWSUBITEM)* TileViewColumns, LONG maxItemTextLength, BSTR* itemText, LONG* OverlayIndex, LONG* StateImageIndex, ItemStateConstants* itemStates, VARIANT_BOOL* dontAskAgain);
			/// \brief <em>The control needs to know into which group to place the specified occurrence of the specified item</em>
			///
			/// Will be fired to retrieve the zero-based index of the listview group that contains the specified
			/// occurrence of the specified item. By returning different group indexes for different occurrences,
			/// it is possible to display the same item in multiple groups.
			///
			/// \param[in] itemIndex The item's zero-based (control-wide) index.
			/// \param[in] occurrenceIndex The zero-based index of the item's copy for which the group membership
			///            is retrieved.
			/// \param[out] groupIndex Must be set to the zero-based index of the listview group that shall
			///             contain the specified copy of the specified item.
			///
			/// \remarks This event won't be fired if \c IExplorerListView::VirtualMode is set to \c False.
			///
			/// \sa ItemGetOccurrencesCount, IExplorerListView::VirtualMode
			[id(DISPID_EXLVWE_ITEMGETGROUP), helpstring("Will be fired to retrieve the zero-based index of the listview group that contains the specified occurrence of the specified item.")]
			void ItemGetGroup(LONG itemIndex, LONG occurrenceIndex, LONG* GroupIndex);
			/// \brief <em>The control is about to show the item's info tip and the text to display is required</em>
			///
			/// Will be fired if the control is about to popup a tooltip to display some information about the
			/// specified item and requests the text to display.
			///
			/// \param[in] listItem The item that the tooltip will be displayed for.
			/// \param[in] maxInfoTipLength The maximum number of characters the info tip text may consist of.
			/// \param[out] infoTipText Set this parameter to the text to display in the tooltip control.
			/// \param[in,out] abortToolTip If set to \c True, the tooltip won't be displayed.
			///
			/// \sa IExplorerListView::ToolTips, IListViewItem::SetInfoTipText, SettingItemInfoTipText
			[id(DISPID_EXLVWE_ITEMGETINFOTIPTEXT), helpstring("Will be fired if the control is about to popup a tooltip to display some information about the specified item and requests the text to display.")]
			void ItemGetInfoTipText(IListViewItem* listItem, LONG maxInfoTipLength, BSTR* infoTipText, VARIANT_BOOL* abortToolTip);
			/// \brief <em>The control needs to know how often the specified item occurs in the control</em>
			///
			/// Will be fired to retrieve the number of copies of the specified item that are to be displayed by
			/// the listview control. This event can be used to display an item more than once.
			///
			/// \param[in] itemIndex The item's zero-based (control-wide) index.
			/// \param[out] occurrencesCount Must be set to the number of occurrences of the item in the listview
			///             control.
			///
			/// \remarks This event won't be fired if \c IExplorerListView::VirtualMode is set to \c False.\n
			///          Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa ItemGetGroup, IExplorerListView::VirtualMode
			[id(DISPID_EXLVWE_ITEMGETOCCURRENCESCOUNT), helpstring("Will be fired to retrieve the number of copies of the specified item that are to be displayed by the listview control. Requires comctl32.dll version 6.10 or higher.")]
			void ItemGetOccurrencesCount(LONG itemIndex, LONG* occurrencesCount);
			/// \brief <em>The mouse cursor was moved into an item's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor into the specified item's bounding rectangle.
			///
			/// \param[in] listItem The item that was entered.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ItemMouseLeave, SubItemMouseEnter, MouseMove, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_ITEMMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the specified item's bounding rectangle. This event may be disabled.")]
			void ItemMouseEnter(IListViewItem* listItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of an item's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the specified item's bounding rectangle.
			///
			/// \param[in] listItem The item that was left.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ItemMouseEnter, SubItemMouseLeave, MouseMove, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_ITEMMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the specified item's bounding rectangle. This event may be disabled.")]
			void ItemMouseLeave(IListViewItem* listItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>An item's selection state was changed</em>
			///
			/// Will be fired after an item's selection state was changed.
			///
			/// \param[in] listItem The item that was selected/unselected.
			///
			/// \sa IListViewItem::Selected, BeginMarqueeSelection, SelectedItemRange, CaretChanged,
			///     IExplorerListView::MultiSelect, GroupSelectionChanged
			[id(DISPID_EXLVWE_ITEMSELECTIONCHANGED), helpstring("Will be fired after an item's 'Selected' property was changed.")]
			void ItemSelectionChanged(IListViewItem* listItem);
			/// \brief <em>An item's text was changed</em>
			///
			/// Will be fired if an item's text was set to \c vbNullString and now has been changed by
			/// label-editing.
			///
			/// \param[in] listItem The item that was changed.
			/// \param[in] itemText The item's new text.
			///
			/// \sa ItemGetDisplayInfo, IListViewItem::Text
			[id(DISPID_EXLVWE_ITEMSETTEXT), helpstring("Will be fired if an item's text was set to 'vbNullString' and now has been changed by label-editing.")]
			void ItemSetText(IListViewItem* listItem, BSTR itemText);
			/// \brief <em>An item's state image was changed</em>
			///
			/// Will be fired after an item's state image was changed. The state image is identified by an
			/// one-based index and is part of the control's \c ilState imagelist. It's drawn next to the item
			/// and usually a checkbox.
			///
			/// \param[in] listItem The item whose state image was changed.
			/// \param[in] previousStateImageIndex The item's previous state image index.
			/// \param[in] newStateImageIndex The item's new state image index.
			/// \param[in] causedBy The reason for the state image change. Any of the values defined by
			///            the \c StateImageChangeCausedByConstants enumeration is valid.
			///
			/// \remarks If the \c SimpleSelect property is set to \c True and the state image is toggled using
			///          the keyboard, the state image will be updated for all selected items, but this event
			///          will be raised for the caret item only.
			///
			/// \sa ItemStateImageChanging, ColumnStateImageChanged, IExplorerListView::hImageList,
			///     IExplorerListView::SimpleSelect, IListViewItem::StateImageIndex,
			///     StateImageChangeCausedByConstants, ImageListConstants
			[id(DISPID_EXLVWE_ITEMSTATEIMAGECHANGED), helpstring("Will be fired after an item's state image was changed.")]
			void ItemStateImageChanged(IListViewItem* listItem, LONG previousStateImageIndex, LONG newStateImageIndex, StateImageChangeCausedByConstants causedBy);
			/// \brief <em>An item's state image is about to be changed</em>
			///
			/// Will be fired before an item's state image is changed. The state image is identified by an
			/// one-based index and is part of the control's \c ilState imagelist. It's drawn next to the item
			/// and usually a checkbox.
			///
			/// \param[in] listItem The item whose state image shall be changed.
			/// \param[in] previousStateImageIndex The item's previous state image index.
			/// \param[in,out] newStateImageIndex The item's new state image index. You may change this
			///                value.
			/// \param[in] causedBy The reason for the state image change. Any of the values defined by
			///            the \c StateImageChangeCausedByConstants enumeration is valid.
			/// \param[in,out] cancelChange If set to \c True, the state image change is aborted, i. e.
			///                the item's state image remains the same. In this case the
			///                \c ItemStateImageChanged event isn't fired. If set to \c False, the
			///                state image change is completed.
			///
			/// \remarks If the \c SimpleSelect property is set to \c True and the state image is toggled using
			///          the keyboard, the state image will be updated for all selected items, but this event
			///          will be raised for the caret item only.
			///
			/// \sa ItemStateImageChanged, ColumnStateImageChanging, IExplorerListView::hImageList,
			///     IExplorerListView::SimpleSelect, IListViewItem::StateImageIndex,
			///     StateImageChangeCausedByConstants, ImageListConstants
			[id(DISPID_EXLVWE_ITEMSTATEIMAGECHANGING), helpstring("Will be fired before an item's state image is changed.")]
			void ItemStateImageChanging(IListViewItem* listItem, LONG previousStateImageIndex, LONG* newStateImageIndex, StateImageChangeCausedByConstants causedBy, VARIANT_BOOL* cancelChange);
			/// \brief <em>A key was pressed while the control has the focus</em>
			///
			/// Will be fired if the user presses a key while the control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyUp, KeyPress, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_KEYDOWN), helpstring("Will be fired if the user presses a key while the control has the focus. This event may be disabled.")]
			void KeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the control has the
			/// focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa IncrementalSearchStringChanging, KeyDown, KeyUp, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_KEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the control has the focus. This event may be disabled.")]
			void KeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the control has the focus</em>
			///
			/// Will be fired if the user releases a key while the control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyDown, KeyPress, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_KEYUP), helpstring("Will be fired if the user releases a key while the control has the focus. This event may be disabled.")]
			void KeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>A combination of group-wide item index and group index needs to be translated into a total item index</em>
			///
			/// Will be fired to retrieve an item's zero-based total (control-wide) item index from the item's
			/// zero-based group-wide item index and the zero-based index of the listview group in which it is
			/// displayed.
			///
			/// \param[in] groupIndex The zero-based index of the item's listview group.
			/// \param[in] groupWideItemIndex The item's zero-based group-wide index.
			/// \param[out] totalItemIndex Must be set to the item's zero-based total index.
			///
			/// \remarks This event won't be fired if \c IExplorerListView::VirtualMode is set to \c False.
			///
			/// \sa ItemGetDisplayInfo, IExplorerListView::VirtualMode
			[id(DISPID_EXLVWE_MAPGROUPWIDETOTOTALITEMINDEX), helpstring("Will be fired to retrieve an item's zero-based total (control-wide) item index from the item's zero-based group-wide item index and the zero-based index of the listview group in which it is displayed.")]
			void MapGroupWideToTotalItemIndex(LONG GroupIndex, LONG groupWideItemIndex, LONG* totalItemIndex);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the middle mouse button.
			///
			/// \param[in] listItem The item that was clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MDblClick, Click, RClick, XClick, HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MCLICK), helpstring("Will be fired if the user clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MClick(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the middle mouse
			/// button.
			///
			/// \param[in] listItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MClick, DblClick, RDblClick, XDblClick, HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MDblClick(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was pressed over the control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] listItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseUp, Click, MClick, RClick, XClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseDown(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the control's client area.
			///
			/// \param[in] listItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseLeave, ItemMouseEnter, MouseHover, MouseMove, ExtendedMouseButtonConstants,
			///     HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the control's client area. This event may be disabled.")]
			void MouseEnter(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the control's client area for the number
			/// of milliseconds specified by the \c IExplorerListView::HoverTime property.
			///
			/// \param[in] listItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseMove, IExplorerListView::HoverTime,
			///     ExtendedMouseButtonConstants, HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the control's client area for the number of milliseconds specified by the 'HoverTime' property. This event may be disabled.")]
			void MouseHover(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor out of the control's client area.
			///
			/// \param[in] listItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, ItemMouseLeave, MouseHover, MouseMove, ExtendedMouseButtonConstants,
			///     HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MOUSELEAVE), helpstring("Will be fired if the user moves the mouse cursor out of the control's client area. This event may be disabled.")]
			void MouseLeave(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved over the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the control's client area.
			///
			/// \param[in] listItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseDown, MouseUp, MouseWheel, ExtendedMouseButtonConstants,
			///     HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the control's client area. This event may be disabled.")]
			void MouseMove(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was released over the control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] listItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseDown, Click, MClick, RClick, XClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseUp(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse wheel was rotated over the control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the control's client area.
			///
			/// \param[in] listItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseMove, EditMouseWheel, HeaderMouseWheel, ExtendedMouseButtonConstants, HitTestConstants,
			///     ScrollAxisConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_MOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the control's client area. This event may be disabled.")]
			void MouseWheel(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, ScrollAxisConstants scrollAxis, SHORT wheelDelta);
			/// \brief <em>An OLE drag'n'drop operation was completed</em>
			///
			/// Will be fired after OLE drag'n'drop if the drag'n'drop operation was completed successfully.
			///
			/// \param[in] data The object that holds the dragged data. The drop target may have added data to
			///            it.
			/// \param[in] performedEffect The performed drop effect. Any of the values (except \c odeScroll)
			///            defined by the \c OLEDropEffectConstants enumeration is valid.
			///
			/// \sa IExplorerListView::OLEDrag, OLEStartDrag, HeaderOLECompleteDrag, IOLEDataObject::GetData
			[id(DISPID_EXLVWE_OLECOMPLETEDRAG), helpstring("Will be fired after OLE drag'n'drop if the drag'n'drop operation was completed successfully.")]
			void OLECompleteDrag(IOLEDataObject* data, OLEDropEffectConstants performedEffect);
			/// \brief <em>The data was dropped onto the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor
			/// is located over the control's client area.
			///
			/// \param[in] data The dropped data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target finally
			///                executed.
			/// \param[in,out] dropTarget The item that is the target of the drag'n'drop operation. You may set
			///                this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragLeave, MouseUp, HeaderOLEDragDrop,
			///     IExplorerListView::RegisterForOLEDragDrop, IExplorerListView::FinishOLEDragDrop,
			///     OLEDropEffectConstants, IExplorerListView::DropHilitedItem,
			///     IExplorerListView::SetInsertMarkPosition, HitTestConstants
			[id(DISPID_EXLVWE_OLEDRAGDROP), helpstring("Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor is located over the control's client area.")]
			void OLEDragDrop(IOLEDataObject* data, OLEDropEffectConstants* effect, IListViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged into the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in,out] dropTarget The item that is the current target of the drag'n'drop operation.
			///                You may set this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \sa OLEDragMouseMove, OLEDragLeave, OLEDragDrop, MouseEnter, HeaderOLEDragEnter,
			///     IExplorerListView::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IExplorerListView::DragScrollTimeBase, IExplorerListView::DropHilitedItem,
			///     IExplorerListView::SetInsertMarkPosition, HitTestConstants
			[id(DISPID_EXLVWE_OLEDRAGENTER), helpstring("Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's client area.")]
			void OLEDragEnter(IOLEDataObject* data, OLEDropEffectConstants* effect, IListViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>The user has dragged the data into a potential drop target window during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user dragged the mouse cursor into a potential drop
			/// target window.
			///
			/// \param[in] hWndPotentialTarget The potential drop target window's handle.
			///
			/// \remarks Requires Windows Vista or newer.
			///
			/// \sa OLEDragLeavePotentialTarget, HeaderOLEDragEnterPotentialTarget, IExplorerListView::OLEDrag
			[id(DISPID_EXLVWE_OLEDRAGENTERPOTENTIALTARGET), helpstring("Will be fired during OLE drag'n'drop if the user dragged the mouse cursor into a potential drop target window. Requires Windows Vista or newer.")]
			void OLEDragEnterPotentialTarget(LONG hWndPotentialTarget);
			/// \brief <em>The data was dragged out of the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor out of the control's
			/// client area or if the user canceled the drag'n'drop operation.
			///
			/// \param[in] data The dragged data.
			/// \param[in] dropTarget The item that is the current target of the drag'n'drop operation.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragDrop, MouseLeave, HeaderOLEDragLeave,
			///     IExplorerListView::RegisterForOLEDragDrop, IExplorerListView::DropHilitedItem,
			///     IExplorerListView::SetInsertMarkPosition, HitTestConstants
			[id(DISPID_EXLVWE_OLEDRAGLEAVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area or if the user canceled the drag'n'drop operation.")]
			void OLEDragLeave(IOLEDataObject* data, IListViewItem* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user has dragged the data out of a potential drop target window during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user dragged the mouse cursor out of a potential drop
			/// target window.
			///
			/// \remarks Requires Windows Vista or newer.
			///
			/// \sa OLEDragEnterPotentialTarget, HeaderOLEDragLeavePotentialTarget, IExplorerListView::OLEDrag
			[id(DISPID_EXLVWE_OLEDRAGLEAVEPOTENTIALTARGET), helpstring("Will be fired during OLE drag'n'drop if the user dragged the mouse cursor out of a potential drop target window. Requires Windows Vista or newer.")]
			void OLEDragLeavePotentialTarget(void);
			/// \brief <em>The data was dragged over the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in,out] dropTarget The item that is the current target of the drag'n'drop operation.
			///                You may set this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \sa OLEDragEnter, OLEDragLeave, OLEDragDrop, MouseMove, HeaderOLEDragMouseMove,
			///     IExplorerListView::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IExplorerListView::DragScrollTimeBase, IExplorerListView::DropHilitedItem,
			///     IExplorerListView::SetInsertMarkPosition, HitTestConstants
			[id(DISPID_EXLVWE_OLEDRAGMOUSEMOVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area.")]
			void OLEDragMouseMove(IOLEDataObject* data, OLEDropEffectConstants* effect, IListViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>The mouse cursor needs to be updated during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the mouse cursor should be updated to visualize the
			/// current drop effect.
			///
			/// \param[in] effect The current drop effect. It is chosen by the potential drop target.
			///            Any of the values defined by the \c OLEDropEffectConstants enumeration is valid.
			/// \param[in,out] useDefaultCursors If set to \c True, the system's default mouse cursors are
			///                used to visualize the various drop effects. If set to \c False, custom
			///                mouse cursors are used. You must set the custom cursor within the handler of
			///                this event.
			///
			/// \sa IExplorerListView::OLEDrag, OLEQueryContinueDrag, HeaderOLEGiveFeedback,
			///     OLEDropEffectConstants
			[id(DISPID_EXLVWE_OLEGIVEFEEDBACK), helpstring("Will be fired during OLE drag'n'drop if the mouse cursor should be updated.")]
			void OLEGiveFeedback(OLEDropEffectConstants effect, VARIANT_BOOL* useDefaultCursors);
			/// \brief <em>The drag source should decide how to proceed with the OLE drag'n'drop operation</em>
			///
			/// Will be fired during OLE drag'n'drop if the keyboard or mouse button state has changed. It
			/// gives the drag source the chance to cancel or complete the drag'n'drop operation.
			///
			/// \param[in] pressedEscape If \c True, the user has pressed the \c ESC key since the last time
			///            this event was fired.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in,out] actionToContinueWith Indicates whether to continue, cancel or complete the
			///                drag'n'drop operation. Any of the values defined by the
			///                \c OLEActionToContinueWithConstants enumeration is valid.
			///
			/// \sa IExplorerListView::OLEDrag, OLEGiveFeedback, HeaderOLEQueryContinueDrag,
			///     OLEActionToContinueWithConstants
			[id(DISPID_EXLVWE_OLEQUERYCONTINUEDRAG), helpstring("Will be fired during OLE drag'n'drop if the keyboard or mouse button state has changed.")]
			void OLEQueryContinueDrag(VARIANT_BOOL pressedEscape, SHORT button, SHORT shift, OLEActionToContinueWithConstants* actionToContinueWith);
			/// \brief <em>Data has been stored in the data object</em>
			///
			/// Will be fired during OLE drag'n'drop if data in the specified format has been written into the
			/// dragged data object.
			///
			/// \param[in] data The object that holds the dragged data.
			/// \param[in] formatID An integer value specifying the format the data object has received data for.
			///            Valid values are those defined by VB's \c ClipBoardConstants enumeration, but also any
			///            other format that has been registered using the \c RegisterClipboardFormat API
			///            function.
			/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's
			///            \c lindex member. Usually it is -1, but some formats like \c CFSTR_FILECONTENTS
			///            require multiple \c FORMATETC structs for the same format. In such cases each struct
			///            of this format will have a separate index.
			/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
			///            struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
			///            Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c OLEDrag method.
			///
			/// \sa HeaderOLEReceivedNewData, OLESetData, IOLEDataObject::GetData,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
			[id(DISPID_EXLVWE_OLERECEIVEDNEWDATA), helpstring("Will be fired during OLE drag'n'drop if data in the specified format has been written into the dragged data object.")]
			void OLEReceivedNewData(IOLEDataObject* data, LONG formatID, LONG Index, LONG dataOrViewAspect);
			/// \brief <em>Data is requested from the data object</em>
			///
			/// Will be fired during OLE drag'n'drop if data is requested from the dragged data object in a data
			/// format, that you've chosen to support (in the \c OLEStartDrag event), but for which you didn't
			/// provide any data so far.\n
			/// Call the provided object's \c SetData method to provide the data. If you chose to not support
			/// this data format, simply do nothing.
			///
			/// \param[in] data The object that holds the dragged data.
			/// \param[in] formatID An integer value specifying the format the drop target is requesting data
			///            for. Valid values are those defined by VB's \c ClipBoardConstants enumeration, but
			///            also any other format that has been registered using the \c RegisterClipboardFormat
			///            API function.
			/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's
			///            \c lindex member. Usually it is -1, but some formats like \c CFSTR_FILECONTENTS
			///            require multiple \c FORMATETC structs for the same format. In such cases each struct
			///            of this format will have a separate index.
			/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
			///            struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
			///            Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c OLEDrag method.
			///
			/// \sa OLEStartDrag, HeaderOLESetData, IOLEDataObject::SetData,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
			[id(DISPID_EXLVWE_OLESETDATA), helpstring("Will be fired during OLE drag'n'drop if data is requested from the dragged data object in a data format, that you've chosen to support (in the 'OLEStartDrag' event), but for which you didn't provide any data so far.")]
			void OLESetData(IOLEDataObject* data, LONG formatID, LONG index, LONG dataOrViewAspect);
			/// \brief <em>The container holding the dragged data needs to be filled up</em>
			///
			/// Will be fired after you called the \c OLEDrag method to determine the data you're offering. You
			/// must call the provided object's \c SetData method for each data format you're offering data in.
			///
			/// \param[in] data The object that holds the dragged data.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c OLEDrag method.
			///
			/// \sa IExplorerListView::OLEDrag, OLESetData, OLECompleteDrag, HeaderOLEStartDrag,
			///     IOLEDataObject::SetData
			[id(DISPID_EXLVWE_OLESTARTDRAG), helpstring("Will be fired after you called the 'OLEDrag' method to determine the data you're offering.")]
			void OLEStartDrag(IOLEDataObject* data);
			/// \brief <em>An item must be drawn in an owner-drawn listview</em>
			///
			/// Will be fired if the \c OwnerDrawn property is set to \c True and a listview item must be drawn
			/// in 'Details' view.
			///
			/// \param[in] listItem The item to draw.
			/// \param[in] itemState Specifies the item's current state (focused, selected etc.). Most of
			///            the values defined by the \c OwnerDrawItemStateConstants enumeration are valid.
			/// \param[in] hDC The handle of the device context in which all drawing should take place.
			/// \param[in] drawingRectangle The bounding rectangle of the area that must be drawn.
			///
			/// \sa CustomDraw, HeaderOwnerDrawItem, IExplorerListView::ItemHeight,
			///     IExplorerListView::OwnerDrawn, IExplorerListView::View, RECTANGLE,
			///     OwnerDrawItemStateConstants
			[id(DISPID_EXLVWE_OWNERDRAWITEM), helpstring("Will be fired if the 'OwnerDrawn' property is set to 'True' and a listview item must be drawn in 'Details' view.")]
			void OwnerDrawItem(IListViewItem* listItem, OwnerDrawItemStateConstants itemState, LONG hDC, RECTANGLE* drawingRectangle);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the right mouse button.
			///
			/// \param[in] listItem The item that was clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ContextMenu, RDblClick, Click, MClick, XClick, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_RCLICK), helpstring("Will be fired if the user clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RClick(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the right mouse
			/// button.
			///
			/// \param[in] listItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RClick, DblClick, MDblClick, XDblClick, HitTestConstants, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_RDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RDblClick(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was recreated</em>
			///
			/// Will be fired after the control window was destroyed and recreated.\n
			/// Some properties can't be changed after the control window was created. If such a property is
			/// changed and the control window already exists, it is destroyed and recreated.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa DestroyedControlWindow, IExplorerListView::hWnd
			[id(DISPID_EXLVWE_RECREATEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed and recreated.")]
			void RecreatedControlWindow(LONG hWnd);
			/// \brief <em>A column was removed</em>
			///
			/// Will be fired after a column was removed.
			///
			/// \param[in] column The column that was removed. If \c Nothing, all columns were removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingColumn, InsertedColumn, IVirtualListViewColumn, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_REMOVEDCOLUMN), helpstring("Will be fired after a column was removed. If 'column' is 'Nothing', all columns were removed. This event may be disabled.")]
			void RemovedColumn(IVirtualListViewColumn* column);
			/// \brief <em>A group was removed</em>
			///
			/// Will be fired after a group was removed.
			///
			/// \param[in] group The group that was removed. If \c Nothing, all groups were removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingGroup, InsertedGroup, IVirtualListViewGroup, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_REMOVEDGROUP), helpstring("Will be fired after a group was removed. If 'group' is 'Nothing', all groups were removed. This event may be disabled.")]
			void RemovedGroup(IVirtualListViewGroup* group);
			/// \brief <em>An item was removed</em>
			///
			/// Will be fired after an item was removed.
			///
			/// \param[in] listItem The item that was removed. If \c Nothing, all items were removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingItem, InsertedItem, IVirtualListViewItem, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_REMOVEDITEM), helpstring("Will be fired after an item was removed. If 'listItem' is 'Nothing', all items were removed. This event may be disabled.")]
			void RemovedItem(IVirtualListViewItem* listItem);
			/// \brief <em>A column is about to be removed</em>
			///
			/// Will be fired before a column is removed.
			///
			/// \param[in] column The column that is about to be removed. If \c Nothing, all columns are removed.
			/// \param[in,out] cancelDeletion If set to \c True, deletion is aborted, i. e. the column isn't
			///                removed. If set to \c False, the column is removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovedColumn, InsertingColumn, IListViewColumn, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_REMOVINGCOLUMN), helpstring("Will be fired before a column is removed. If 'column' is 'Nothing', all columns are removed. This event may be disabled.")]
			void RemovingColumn(IListViewColumn* column, VARIANT_BOOL* cancelDeletion);
			/// \brief <em>A group is about to be removed</em>
			///
			/// Will be fired before a group is removed.
			///
			/// \param[in] group The group that is about to be removed. If \c Nothing, all groups are removed.
			/// \param[in,out] cancelDeletion If set to \c True, deletion is aborted, i. e. the group isn't
			///                removed. If set to \c False, the group is removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovedGroup, InsertingGroup, IListViewGroup, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_REMOVINGGROUP), helpstring("Will be fired before a group is removed. If 'group' is 'Nothing', all groups are removed. This event may be disabled.")]
			void RemovingGroup(IListViewGroup* group, VARIANT_BOOL* cancelDeletion);
			/// \brief <em>An item is about to be removed</em>
			///
			/// Will be fired before an item is removed.
			///
			/// \param[in] listItem The item that is about to be removed. If \c Nothing, all items are removed.
			/// \param[in,out] cancelDeletion If set to \c True, deletion is aborted, i. e. the item isn't
			///                removed. If set to \c False, the item is removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovedItem, InsertingItem, IListViewItem, IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_REMOVINGITEM), helpstring("Will be fired before an item is removed. If 'listItem' is 'Nothing', all items are removed. This event may be disabled.")]
			void RemovingItem(IListViewItem* listItem, VARIANT_BOOL* cancelDeletion);
			/// \brief <em>An item was renamed via label-editing</em>
			///
			/// Will be fired after an item was renamed via label-editing.
			///
			/// \param[in] listItem The item that was renamed.
			/// \param[in] previousItemText The item's previous text.
			/// \param[in] newItemText The item's new text.
			///
			/// \sa RenamingItem, StartingLabelEditing, DestroyedEditControlWindow, IListViewItem
			[id(DISPID_EXLVWE_RENAMEDITEM), helpstring("Will be fired after an item was renamed via label-editing.")]
			void RenamedItem(IListViewItem* listItem, BSTR previousItemText, BSTR newItemText);
			/// \brief <em>An item is about to be renamed via label-editing</em>
			///
			/// Will be fired before an item is renamed via label-editing.
			///
			/// \param[in] listItem The item that is about to be renamed.
			/// \param[in] previousItemText The item's current text.
			/// \param[in] newItemText The item's new text.
			/// \param[in,out] cancelRenaming If set to \c True, renaming is aborted, i. e. the item keeps
			///                its text. If set to \c False, the item is renamed.
			///
			/// \sa RenamedItem, StartingLabelEditing, DestroyedEditControlWindow, IListViewItem
			[id(DISPID_EXLVWE_RENAMINGITEM), helpstring("Will be fired before an item is renamed via label-editing.")]
			void RenamingItem(IListViewItem* listItem, BSTR previousItemText, BSTR newItemText, VARIANT_BOOL* cancelRenaming);
			/// \brief <em>The control window was resized</em>
			///
			/// Will be fired after the control window was resized.
			[id(DISPID_EXLVWE_RESIZEDCONTROLWINDOW), helpstring("Will be fired after the control window was resized.")]
			void ResizedControlWindow(void);
			/// \brief <em>A column is being resized</em>
			///
			/// Will be fired if the specified column is resized.
			///
			/// \param[in] column The column being resized.
			/// \param[in] newColumnWidth The column's new width in pixels. You may change this value.
			/// \param[in,out] abortResizing If set to \c True, column resizing is aborted; otherwise not.
			///
			/// \sa BeginColumnResizing, EndColumnResizing, IListViewColumn::Width
			[id(DISPID_EXLVWE_RESIZINGCOLUMN), helpstring("Will be fired if the specified column is resized.")]
			void ResizingColumn(IListViewColumn* column, LONG* newColumnWidth, VARIANT_BOOL* abortResizing);
			/// \brief <em>A range of items was selected</em>
			///
			/// Will be fired after a range of items was selected.
			///
			/// \param[in] firstItem The first item that was selected.
			/// \param[in] lastItem The last item that was selected.
			///
			/// \remarks This event won't be fired if \c IExplorerListView::VirtualMode is set to \c False.
			///
			/// \sa ItemSelectionChanged, BeginMarqueeSelection, IExplorerListView::VirtualMode
			[id(DISPID_EXLVWE_SELECTEDITEMRANGE), helpstring("Will be fired after a range of items was selected.")]
			void SelectedItemRange(IListViewItem* FirstItem, IListViewItem* lastItem);
			/// \brief <em>The control is about to show the item's info tip in response to \c IListViewItem::SetInfoTipText being called</em>
			///
			/// Will be fired if an item's info tip text has been set by calling \c IListViewItem::SetInfoTipText
			/// (or by using the Win32 API directly). The event is fired before the message, that actually sets
			/// the info tip text, is forwarded to the control.
			///
			/// \param[in] listItem The item that the info tip text is being set for.
			/// \param[in,out] infoTipText The info tip text being set. It may be changed by the event handler.
			/// \param[in,out] abortInfoTip If set to \c True, the message, that would actually set the info tip
			///                text, won't be forwarded to the control.
			///
			/// \sa ItemGetInfoTipText, IListViewItem::SetInfoTipText
			[id(DISPID_EXLVWE_SETTINGITEMINFOTIPTEXT), helpstring("Will be fired if an item's info tip text has been set by calling 'ListViewItem.SetInfoTipText' (or by using the Win32 API directly). The event is fired before the message, that actually sets the info tip text, is forwarded to the control.")]
			void SettingItemInfoTipText(IListViewItem* listItem, BSTR* infoTipText, VARIANT_BOOL* abortInfoTip);
			/// \brief <em>An item is about to be renamed via label-editing</em>
			///
			/// Will be fired before item-renaming via label-editing starts.
			///
			/// \param[in] listItem The item that is about to be edited.
			/// \param[in,out] cancelEditing If set to \c True, editing is aborted, i. e. the label-edit
			///                control isn't displayed. If set to \c False, the item label-editing continues.
			///
			/// \sa RenamingItem, CreatedEditControlWindow, IListViewItem, IExplorerListView::AllowLabelEditing
			[id(DISPID_EXLVWE_STARTINGLABELEDITING), helpstring("Will be fired before item-renaming via label-editing starts.")]
			void StartingLabelEditing(IListViewItem* listItem, VARIANT_BOOL* cancelEditing);
			/// \brief <em>The mouse cursor was moved into a sub-item's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor into the specified sub-item's bounding
			/// rectangle.
			///
			/// \param[in] listSubItem The sub-item that was entered.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa SubItemMouseLeave, ItemMouseEnter, MouseMove, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_SUBITEMMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the specified item's bounding rectangle. This event may be disabled.")]
			void SubItemMouseEnter(IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of a sub-item's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the specified sub-item's bounding
			/// rectangle.
			///
			/// \param[in] listSubItem The sub-item that was left.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa SubItemMouseEnter, ItemMouseLeave, MouseMove, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_SUBITEMMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the specified item's bounding rectangle. This event may be disabled.")]
			void SubItemMouseLeave(IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using one of the extended mouse
			/// buttons.
			///
			/// \param[in] listItem The item that was clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XDblClick, Click, MClick, RClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_XCLICK), helpstring("Will be fired if the user clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XClick(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using one of the extended
			/// mouse buttons.
			///
			/// \param[in] listItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] listSubItem The sub-item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XClick, DblClick, MDblClick, RDblClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerListView::DisabledEvents
			[id(DISPID_EXLVWE_XDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XDblClick(IListViewItem* listItem, IListViewSubItem* listSubItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
	};


	/// \brief <em>The \c ExplorerListView class</em>
	///
	/// The control's main COM class. It implements the \c IExplorerListView and
	/// \c _IExplorerListViewEvents interfaces.
	///
	/// \sa ListViewItems, ListViewItem, VirtualListViewItem, IExplorerListView, _IExplorerListViewEvents
	[
		uuid(A6775031-3808-4b8b-A4DE-1246AEC78B02),
		version(1.7),
		helpstring("ExplorerListView Control 1.7 (Unicode)")
	]
	coclass ExplorerListView
	{
		[default] interface IExplorerListView;
		[default, source] dispinterface _IExplorerListViewEvents;
	};


	/// \interface _IVirtualListViewColumnEvents
	/// \brief <em>The \c VirtualListViewColumn class' events interface</em>
	///
	/// This interface defines all events the \c VirtualListViewColumn class may raise.
	///
	/// \sa IVirtualListViewColumn
	[
		uuid(325CC012-DA83-4e1f-91DC-8FB8040C86C1),
		helpstring("IVirtualListViewColumn-event-interface")
	]
	dispinterface _IVirtualListViewColumnEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c VirtualListViewColumn class</em>
	///
	/// This COM class implements the \c IVirtualListViewColumn and \c _IVirtualListViewColumnEvents
	/// interfaces.
	///
	/// \sa IVirtualListViewColumn, _IVirtualListViewColumnEvents, ExplorerListView, ListViewColumn
	[
		uuid(CAF4299F-3871-4cb1-9D67-D46F3C183932),
		version(1.7),
		noncreatable,
		helpstring("VirtualListViewColumn Class 1.7 (Unicode)")
	]
	coclass VirtualListViewColumn
	{
		[default] interface IVirtualListViewColumn;
		[default, source] dispinterface _IVirtualListViewColumnEvents;
	};


	/// \interface _IListViewColumnEvents
	/// \brief <em>The \c ListViewColumn class' events interface</em>
	///
	/// This interface defines all events the \c ListViewColumn class may raise.
	///
	/// \sa IListViewColumn
	[
		uuid(2C65CCE1-1994-4246-BE07-3D78BA138F69),
		helpstring("IListViewColumn-event-interface")
	]
	dispinterface _IListViewColumnEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewColumn class</em>
	///
	/// This COM class implements the \c IListViewColumn and \c _IListViewColumnEvents interfaces.
	///
	/// \sa IListViewColumn, _IListViewColumnEvents, ExplorerListView, ListViewColumns
	[
		uuid(738883BD-B142-4fee-A99B-735631EB3447),
		version(1.7),
		noncreatable,
		helpstring("ListViewColumn Class 1.7 (Unicode)")
	]
	coclass ListViewColumn
	{
		[default] interface IListViewColumn;
		[default, source] dispinterface _IListViewColumnEvents;
	};


	/// \interface _IListViewColumnsEvents
	/// \brief <em>The \c ListViewColumns class' events interface</em>
	///
	/// This interface defines all events the \c ListViewColumns class may raise.
	///
	/// \sa IListViewColumns
	[
		uuid(9A33816A-C4FB-4c22-86B5-E478ED82AFC3),
		helpstring("IListViewColumns-event-interface")
	]
	dispinterface _IListViewColumnsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewColumns class</em>
	///
	/// This COM class implements the \c IListViewColumns and \c _IListViewColumnsEvents interfaces.
	///
	/// \sa IListViewColumns, _IListViewColumnsEvents, ExplorerListView, ListViewColumn
	[
		uuid(F5627B95-E516-4c22-852A-21282E35C325),
		version(1.7),
		noncreatable,
		helpstring("ListViewColumns Class 1.7 (Unicode)")
	]
	coclass ListViewColumns
	{
		[default] interface IListViewColumns;
		[default, source] dispinterface _IListViewColumnsEvents;
	};


	/// \interface _IListViewFooterItemEvents
	/// \brief <em>The \c ListViewFooterItem class' events interface</em>
	///
	/// This interface defines all events the \c ListViewFooterItem class may raise.
	///
	/// \remarks Requires comctl32.dll version 6.10 or higher.
	///
	/// \sa IListViewFooterItem
	[
		uuid(F99D28F2-4EDE-4673-9261-985742DA7DB1),
		helpstring("IListViewFooterItem-event-interface")
	]
	dispinterface _IListViewFooterItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewFooterItem class</em>
	///
	/// This COM class implements the \c IListViewFooterItem and \c _IListViewFooterItemEvents interfaces.
	///
	/// \remarks Requires comctl32.dll version 6.10 or higher.
	///
	/// \sa IListViewFooterItem, _IListViewFooterItemEvents, ExplorerListView, ListViewFooterItems
	[
		uuid(94C0A90B-8989-4efe-98F5-173659E9AAAE),
		version(1.7),
		noncreatable,
		helpstring("ListViewFooterItem Class 1.7 (Unicode)")
	]
	coclass ListViewFooterItem
	{
		[default] interface IListViewFooterItem;
		[default, source] dispinterface _IListViewFooterItemEvents;
	};


	/// \interface _IListViewFooterItemsEvents
	/// \brief <em>The \c ListViewFooterItems class' events interface</em>
	///
	/// This interface defines all events the \c ListViewFooterItems class may raise.
	///
	/// \remarks Requires comctl32.dll version 6.10 or higher.
	///
	/// \sa IListViewFooterItems
	[
		uuid(3766D0AD-A41B-401c-8F40-927078C41757),
		helpstring("IListViewFooterItems-event-interface")
	]
	dispinterface _IListViewFooterItemsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewFooterItems class</em>
	///
	/// This COM class implements the \c IListViewFooterItems and \c _IListViewFooterItemsEvents interfaces.
	///
	/// \remarks Requires comctl32.dll version 6.10 or higher.
	///
	/// \sa IListViewFooterItems, _IListViewFooterItemsEvents, ExplorerListView, ListViewFooterItem
	[
		uuid(C05564EC-4964-4adf-A9FD-DB9348345A75),
		version(1.7),
		noncreatable,
		helpstring("ListViewFooterItems Class 1.7 (Unicode)")
	]
	coclass ListViewFooterItems
	{
		[default] interface IListViewFooterItems;
		[default, source] dispinterface _IListViewFooterItemsEvents;
	};


	/// \interface _IVirtualListViewGroupEvents
	/// \brief <em>The \c VirtualListViewGroup class' events interface</em>
	///
	/// This interface defines all events the \c VirtualListViewGroup class may raise.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa IVirtualListViewGroup
	[
		uuid(0FDB9AE7-6053-4f21-87BB-F65B89059664),
		helpstring("IVirtualListViewGroup-event-interface")
	]
	dispinterface _IVirtualListViewGroupEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c VirtualListViewGroup class</em>
	///
	/// This COM class implements the \c IVirtualListViewGroup and \c _IVirtualListViewGroupEvents
	/// interfaces.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa IVirtualListViewGroup, _IVirtualListViewGroupEvents, ExplorerListView, ListViewGroup
	[
		uuid(0F649F6C-AC1B-4e7e-890B-3AF6C5AD2EC8),
		version(1.7),
		noncreatable,
		helpstring("VirtualListViewGroup Class 1.7 (Unicode)")
	]
	coclass VirtualListViewGroup
	{
		[default] interface IVirtualListViewGroup;
		[default, source] dispinterface _IVirtualListViewGroupEvents;
	};


	/// \interface _IListViewGroupEvents
	/// \brief <em>The \c ListViewGroup class' events interface</em>
	///
	/// This interface defines all events the \c ListViewGroup class may raise.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa IListViewGroup
	[
		uuid(1891BCBA-C120-491c-908A-69F730F6FBCA),
		helpstring("IListViewGroup-event-interface")
	]
	dispinterface _IListViewGroupEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewGroup class</em>
	///
	/// This COM class implements the \c IListViewGroup and \c _IListViewGroupEvents interfaces.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa IListViewGroup, _IListViewGroupEvents, ExplorerListView, ListViewGroups
	[
		uuid(D0A457EE-1008-419f-93BE-B347A00277BB),
		version(1.7),
		noncreatable,
		helpstring("ListViewGroup Class 1.7 (Unicode)")
	]
	coclass ListViewGroup
	{
		[default] interface IListViewGroup;
		[default, source] dispinterface _IListViewGroupEvents;
	};


	/// \interface _IListViewGroupsEvents
	/// \brief <em>The \c ListViewGroups class' events interface</em>
	///
	/// This interface defines all events the \c ListViewGroups class may raise.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa IListViewGroups
	[
		uuid(20EA89BF-DF89-4302-B954-E93C13FAE3B0),
		helpstring("IListViewGroups-event-interface")
	]
	dispinterface _IListViewGroupsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewGroups class</em>
	///
	/// This COM class implements the \c IListViewGroups and \c _IListViewGroupsEvents interfaces.
	///
	/// \remarks Requires comctl32.dll version 6.0 or higher.
	///
	/// \sa IListViewGroups, _IListViewGroupsEvents, ExplorerListView, ListViewGroup
	[
		uuid(72E341FB-EE75-42ce-9147-D1B7DE57817E),
		version(1.7),
		noncreatable,
		helpstring("ListViewGroups Class 1.7 (Unicode)")
	]
	coclass ListViewGroups
	{
		[default] interface IListViewGroups;
		[default, source] dispinterface _IListViewGroupsEvents;
	};


	/// \interface _IVirtualListViewItemEvents
	/// \brief <em>The \c VirtualListViewItem class' events interface</em>
	///
	/// This interface defines all events the \c VirtualListViewItem class may raise.
	///
	/// \sa IVirtualListViewItem
	[
		uuid(3B13CE27-8E17-430e-A045-5E313E7B2759),
		helpstring("IVirtualListViewItem-event-interface")
	]
	dispinterface _IVirtualListViewItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c VirtualListViewItem class</em>
	///
	/// This COM class implements the \c IVirtualListViewItem and \c _IVirtualListViewItemEvents
	/// interfaces.
	///
	/// \sa IVirtualListViewItem, _IVirtualListViewItemEvents, ExplorerListView, ListViewItem
	[
		uuid(4615B9BE-D110-4c8b-8108-B056910D3431),
		version(1.7),
		noncreatable,
		helpstring("VirtualListViewItem Class 1.7 (Unicode)")
	]
	coclass VirtualListViewItem
	{
		[default] interface IVirtualListViewItem;
		[default, source] dispinterface _IVirtualListViewItemEvents;
	};


	/// \interface _IListViewItemEvents
	/// \brief <em>The \c ListViewItem class' events interface</em>
	///
	/// This interface defines all events the \c ListViewItem class may raise.
	///
	/// \sa IListViewItem
	[
		uuid(12BE0B6B-EA2A-468d-92ED-A77CBDA5FAB9),
		helpstring("IListViewItem-event-interface")
	]
	dispinterface _IListViewItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewItem class</em>
	///
	/// This COM class implements the \c IListViewItem and \c _IListViewItemEvents interfaces.
	///
	/// \sa IListViewItem, _IListViewItemEvents, ExplorerListView, ListViewItems
	[
		uuid(205B6F8A-041A-494b-B801-45AE0616099A),
		version(1.7),
		noncreatable,
		helpstring("ListViewItem Class 1.7 (Unicode)")
	]
	coclass ListViewItem
	{
		[default] interface IListViewItem;
		[default, source] dispinterface _IListViewItemEvents;
	};


	/// \interface _IListViewItemsEvents
	/// \brief <em>The \c ListViewItems class' events interface</em>
	///
	/// This interface defines all events the \c ListViewItems class may raise.
	///
	/// \sa IListViewItems
	[
		uuid(008E5C0C-964E-46fb-8EAE-1DE036506CC1),
		helpstring("IListViewItems-event-interface")
	]
	dispinterface _IListViewItemsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewItems class</em>
	///
	/// This COM class implements the \c IListViewItems and \c _IListViewItemsEvents interfaces.
	///
	/// \sa IListViewItems, _IListViewItemsEvents, ExplorerListView, ListViewItem
	[
		uuid(CF36B06D-BC7E-4fdd-AC00-A550AC9AF59B),
		version(1.7),
		noncreatable,
		helpstring("ListViewItems Class 1.7 (Unicode)")
	]
	coclass ListViewItems
	{
		[default] interface IListViewItems;
		[default, source] dispinterface _IListViewItemsEvents;
	};


	/// \interface _IListViewItemContainerEvents
	/// \brief <em>The \c ListViewItemContainer class' events interface</em>
	///
	/// This interface defines all events the \c ListViewItemContainer class may raise.
	///
	/// \sa IListViewItemContainer
	[
		uuid(8B4F2CB5-5E6D-46ef-96A3-3ADA44D0F844),
		helpstring("IListViewItemContainer-event-interface")
	]
	dispinterface _IListViewItemContainerEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewItemContainer class</em>
	///
	/// This COM class implements the \c IListViewItemContainer and \c _IListViewItemContainerEvents
	/// interfaces.
	///
	/// \sa IListViewItemContainer, _IListViewItemContainerEvents, ExplorerListView, ListViewItem
	[
		uuid(FD991D7E-1297-481b-B85F-9A4B5A91EC5A),
		version(1.7),
		noncreatable,
		helpstring("ListViewItemContainer Class 1.7 (Unicode)")
	]
	coclass ListViewItemContainer
	{
		[default] interface IListViewItemContainer;
		[default, source] dispinterface _IListViewItemContainerEvents;
	};


	/// \interface _IListViewSubItemEvents
	/// \brief <em>The \c ListViewSubItem class' events interface</em>
	///
	/// This interface defines all events the \c ListViewSubItem class may raise.
	///
	/// \sa IListViewSubItem
	[
		uuid(7BADED00-2983-4435-859B-9C1AD0D124D1),
		helpstring("IListViewSubItem-event-interface")
	]
	dispinterface _IListViewSubItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewSubItem class</em>
	///
	/// This COM class implements the \c IListViewSubItem and \c _IListViewSubItemEvents interfaces.
	///
	/// \sa IListViewSubItem, _IListViewSubItemEvents, ExplorerListView, ListViewSubItems
	[
		uuid(E7532495-D232-45c8-B0FB-19C63F27FC54),
		version(1.7),
		noncreatable,
		helpstring("ListViewSubItem Class 1.7 (Unicode)")
	]
	coclass ListViewSubItem
	{
		[default] interface IListViewSubItem;
		[default, source] dispinterface _IListViewSubItemEvents;
	};


	/// \interface _IListViewSubItemsEvents
	/// \brief <em>The \c ListViewSubItems class' events interface</em>
	///
	/// This interface defines all events the \c ListViewSubItems class may raise.
	///
	/// \sa IListViewSubItems
	[
		uuid(1E088A78-3F37-467d-9CC2-FFC63222FF36),
		helpstring("IListViewSubItems-event-interface")
	]
	dispinterface _IListViewSubItemsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewSubItems class</em>
	///
	/// This COM class implements the \c IListViewSubItems and \c _IListViewSubItemsEvents interfaces.
	///
	/// \sa IListViewSubItems, _IListViewSubItemsEvents, ExplorerListView, ListViewSubItem
	[
		uuid(188D33D6-2228-46a9-A089-FF8788B03E3F),
		version(1.7),
		noncreatable,
		helpstring("ListViewSubItems Class 1.7 (Unicode)")
	]
	coclass ListViewSubItems
	{
		[default] interface IListViewSubItems;
		[default, source] dispinterface _IListViewSubItemsEvents;
	};


	/// \interface _IVirtualListViewWorkAreaEvents
	/// \brief <em>The \c VirtualListViewWorkArea class' events interface</em>
	///
	/// This interface defines all events the \c VirtualListViewWorkArea class may raise.
	///
	/// \sa IVirtualListViewWorkArea
	[
		uuid(4BF45240-3FB8-4e45-AD3F-9CE03739B5BF),
		helpstring("IVirtualListViewWorkArea-event-interface")
	]
	dispinterface _IVirtualListViewWorkAreaEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c VirtualListViewWorkArea class</em>
	///
	/// This COM class implements the \c IVirtualListViewWorkArea and \c _IVirtualListViewWorkAreaEvents
	/// interfaces.
	///
	/// \sa IVirtualListViewWorkArea, _IVirtualListViewWorkAreaEvents, ExplorerListView,
	///     VirtualListViewWorkAreas
	[
		uuid(1282F981-403A-4daf-974D-98BBEC3215A6),
		version(1.7),
		noncreatable,
		helpstring("VirtualListViewWorkArea Class 1.7 (Unicode)")
	]
	coclass VirtualListViewWorkArea
	{
		[default] interface IVirtualListViewWorkArea;
		[default, source] dispinterface _IVirtualListViewWorkAreaEvents;
	};


	/// \interface _IVirtualListViewWorkAreasEvents
	/// \brief <em>The \c VirtualListViewWorkAreas class' events interface</em>
	///
	/// This interface defines all events the \c VirtualListViewWorkAreas class may raise.
	///
	/// \sa IVirtualListViewWorkAreas
	[
		uuid(B329F7AD-FB75-4362-8C40-1E8ADF8217C0),
		helpstring("IVirtualListViewWorkAreas-event-interface")
	]
	dispinterface _IVirtualListViewWorkAreasEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c VirtualListViewWorkAreas class</em>
	///
	/// This COM class implements the \c IVirtualListViewWorkAreas and \c _IVirtualListViewWorkAreasEvents
	/// interfaces.
	///
	/// \sa IVirtualListViewWorkAreas, _IVirtualListViewWorkAreasEvents, ExplorerListView,
	///     VirtualListViewWorkArea
	[
		uuid(C2548C2A-DED6-4ab5-88EF-97D57A937235),
		version(1.7),
		noncreatable,
		helpstring("VirtualListViewWorkAreas Class 1.7 (Unicode)")
	]
	coclass VirtualListViewWorkAreas
	{
		[default] interface IVirtualListViewWorkAreas;
		[default, source] dispinterface _IVirtualListViewWorkAreasEvents;
	};


	/// \interface _IListViewWorkAreaEvents
	/// \brief <em>The \c ListViewWorkArea class' events interface</em>
	///
	/// This interface defines all events the \c ListViewWorkArea class may raise.
	///
	/// \sa IListViewWorkArea
	[
		uuid(B002BF52-3BE4-4c07-8E5F-4CDD013C1CCF),
		helpstring("IListViewWorkArea-event-interface")
	]
	dispinterface _IListViewWorkAreaEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewWorkArea class</em>
	///
	/// This COM class implements the \c IListViewWorkArea and \c _IListViewWorkAreaEvents interfaces.
	///
	/// \sa IListViewWorkArea, _IListViewWorkAreaEvents, ExplorerListView, ListViewWorkAreas
	[
		uuid(C77F9380-3C2A-483f-BCC8-0E9323F2E678),
		version(1.7),
		noncreatable,
		helpstring("ListViewWorkArea Class 1.7 (Unicode)")
	]
	coclass ListViewWorkArea
	{
		[default] interface IListViewWorkArea;
		[default, source] dispinterface _IListViewWorkAreaEvents;
	};


	/// \interface _IListViewWorkAreasEvents
	/// \brief <em>The \c ListViewWorkAreas class' events interface</em>
	///
	/// This interface defines all events the \c ListViewWorkAreas class may raise.
	///
	/// \sa IListViewWorkAreas
	[
		uuid(57C6B07B-494E-41b8-9DD8-D0B85779FBF4),
		helpstring("IListViewWorkAreas-event-interface")
	]
	dispinterface _IListViewWorkAreasEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ListViewWorkAreas class</em>
	///
	/// This COM class implements the \c IListViewWorkAreas and \c _IListViewWorkAreasEvents interfaces.
	///
	/// \sa IListViewWorkAreas, _IListViewWorkAreasEvents, ExplorerListView, ListViewWorkArea
	[
		uuid(30D537ED-13A0-4f8a-97F7-828ACDE6FEB8),
		version(1.7),
		noncreatable,
		helpstring("ListViewWorkAreas Class 1.7 (Unicode)")
	]
	coclass ListViewWorkAreas
	{
		[default] interface IListViewWorkAreas;
		[default, source] dispinterface _IListViewWorkAreasEvents;
	};


	/// \interface _IOLEDataObjectEvents
	/// \brief <em>The \c OLEDataObject class' events interface</em>
	///
	/// This interface defines all events the \c OLEDataObject class may raise.
	///
	/// \sa IOLEDataObject
	[
		uuid(1999276E-2420-4578-BFBD-F4BCF7E73A08),
		helpstring("IOLEDataObject-event-interface")
	]
	dispinterface _IOLEDataObjectEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c OLEDataObject class</em>
	///
	/// This COM class implements the \c IOLEDataObject and \c _IOLEDataObjectEvents interfaces.
	///
	/// \sa IOLEDataObject, _IOLEDataObjectEvents
	[
		uuid(94BBE739-5EEE-4d12-9073-0F2E0F2A9D19),
		version(1.7),
		noncreatable,
		helpstring("OLEDataObject Class 1.7 (Unicode)")
	]
	coclass OLEDataObject
	{
		[default] interface IOLEDataObject;
		[default, source] dispinterface _IOLEDataObjectEvents;
	};


	[
		uuid(A1C43FAA-19E3-4d60-8670-D9A5413A3F30),
		version(1.7),
		noncreatable,
		helpstring("CommonProperties Class 1.7 (Unicode)"),
		hidden
	]
	coclass CommonProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(4710F188-7616-4d5b-B821-EA0A461BDDA2),
		version(1.7),
		noncreatable,
		helpstring("StringProperties Class 1.7 (Unicode)"),
		hidden
	]
	coclass StringProperties
	{
		[default] interface IUnknown;
	};
};
